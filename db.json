{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/diaspora/source/css/diaspora.css","path":"css/diaspora.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/cover-nier-automata-2.jpg","path":"img/cover-nier-automata-2.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/cover-nier-automata-1.jpg","path":"img/cover-nier-automata-1.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/diaspora.js","path":"js/diaspora.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/typed.js","path":"js/typed.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","path":"photoswipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","path":"photoswipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"source/static/images/2017-09-14-ASProjectFolders/1.png","path":"static/images/2017-09-14-ASProjectFolders/1.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-09-14-ASProjectFolders/2.png","path":"static/images/2017-09-14-ASProjectFolders/2.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-09-14-ASProjectFolders/3.png","path":"static/images/2017-09-14-ASProjectFolders/3.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-02-26-RegEx/1.png","path":"static/images/2018-02-26-RegEx/1.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-02-26-RegEx/2.png","path":"static/images/2018-02-26-RegEx/2.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-02-26-RegEx/3.png","path":"static/images/2018-02-26-RegEx/3.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-02-26-RegEx/4.png","path":"static/images/2018-02-26-RegEx/4.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/1.png","path":"static/images/2017-11-02-CG5thSSAinHK/1.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/2.png","path":"static/images/2017-11-02-CG5thSSAinHK/2.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/3.png","path":"static/images/2017-11-02-CG5thSSAinHK/3.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/4.png","path":"static/images/2017-11-02-CG5thSSAinHK/4.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/5.png","path":"static/images/2017-11-02-CG5thSSAinHK/5.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/6.png","path":"static/images/2017-11-02-CG5thSSAinHK/6.png","modified":0,"renderable":0},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/7.png","path":"static/images/2017-11-02-CG5thSSAinHK/7.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-01-31-JSONinSwift/1.png","path":"static/images/2018-01-31-JSONinSwift/1.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-01-31-JSONinSwift/2.png","path":"static/images/2018-01-31-JSONinSwift/2.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-01-31-JSONinSwift/3.png","path":"static/images/2018-01-31-JSONinSwift/3.png","modified":0,"renderable":0},{"_id":"source/static/images/2018-01-31-JSONinSwift/4.gif","path":"static/images/2018-01-31-JSONinSwift/4.gif","modified":0,"renderable":0},{"_id":"source/static/images/2020-11-24-SignInWithApple/01.jpeg","path":"static/images/2020-11-24-SignInWithApple/01.jpeg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/variant-2_logos/LICENSE.txt","path":"static/images/jetbrains/variant-2_logos/LICENSE.txt","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/variant-2_logos/jetbrains-variant-2.png","path":"static/images/jetbrains/variant-2_logos/jetbrains-variant-2.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/variant-2_logos/jetbrains-variant-2.svg","path":"static/images/jetbrains/variant-2_logos/jetbrains-variant-2.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/LICENSE.txt","path":"static/images/jetbrains/datagrip_logos/LICENSE.txt","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/boxshot.png","path":"static/images/jetbrains/datagrip_logos/boxshot.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text-CMYK.pdf","path":"static/images/jetbrains/datagrip_logos/logo-text-CMYK.pdf","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text.png","path":"static/images/jetbrains/datagrip_logos/logo-text.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/logo.svg","path":"static/images/jetbrains/datagrip_logos/logo.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/logo.png","path":"static/images/jetbrains/datagrip_logos/logo.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text.svg","path":"static/images/jetbrains/datagrip_logos/logo-text.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/LICENSE.txt","path":"static/images/jetbrains/webstorm_logos/LICENSE.txt","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/boxshot.png","path":"static/images/jetbrains/webstorm_logos/boxshot.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text-CMYK.pdf","path":"static/images/jetbrains/webstorm_logos/logo-text-CMYK.pdf","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text.png","path":"static/images/jetbrains/webstorm_logos/logo-text.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text.svg","path":"static/images/jetbrains/webstorm_logos/logo-text.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/logo.png","path":"static/images/jetbrains/webstorm_logos/logo.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/webstorm_logos/logo.svg","path":"static/images/jetbrains/webstorm_logos/logo.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/LICENSE.txt","path":"static/images/jetbrains/intellij-idea_logos/LICENSE.txt","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/boxshot.png","path":"static/images/jetbrains/intellij-idea_logos/boxshot.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text.png","path":"static/images/jetbrains/intellij-idea_logos/logo-text.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text-CMYK.pdf","path":"static/images/jetbrains/intellij-idea_logos/logo-text-CMYK.pdf","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text.svg","path":"static/images/jetbrains/intellij-idea_logos/logo-text.svg","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo.png","path":"static/images/jetbrains/intellij-idea_logos/logo.png","modified":0,"renderable":0},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo.svg","path":"static/images/jetbrains/intellij-idea_logos/logo.svg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"88960b3c80cfb8b161add45fcdece4553ed3bc46","modified":1648692664048},{"_id":"themes/diaspora/.gitignore","hash":"d90a3c3ec1a53ba9e7c62b52ab2a7f4152527dd5","modified":1648634483364},{"_id":"themes/diaspora/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1648634483365},{"_id":"themes/diaspora/README.md","hash":"ac4ef1f91f67dbc10e8863ddf352e812c9590dc4","modified":1648634483365},{"_id":"themes/diaspora/_config.yml","hash":"71847ac39c04a8be55cfd4100d6f561b40c89c0e","modified":1648696604211},{"_id":"themes/diaspora/layout/archive.ejs","hash":"80aa442d757c082f37590a35a1f8f4f798996b4e","modified":1648634483367},{"_id":"themes/diaspora/layout/category.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1648634483367},{"_id":"themes/diaspora/layout/index.ejs","hash":"61158c6df5bb665aa5fa39f5fba950f23867eef6","modified":1648634483367},{"_id":"themes/diaspora/layout/layout.ejs","hash":"b9acea1512eba9ae16a6fd7f3f37b9fa3f4a0c95","modified":1648634483367},{"_id":"themes/diaspora/layout/page.ejs","hash":"ad954fb44615f603674782703a5a7f5b1f24ebf4","modified":1648634483367},{"_id":"themes/diaspora/layout/tag.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1648634483367},{"_id":"themes/diaspora/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1648634483367},{"_id":"themes/diaspora/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1648634483365},{"_id":"themes/diaspora/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1648634483365},{"_id":"themes/diaspora/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1648634483365},{"_id":"themes/diaspora/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1648634483365},{"_id":"themes/diaspora/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1648634483365},{"_id":"themes/diaspora/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1648634483365},{"_id":"themes/diaspora/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1648634483365},{"_id":"themes/diaspora/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1648634483365},{"_id":"themes/diaspora/layout/_partial/google-analytics.ejs","hash":"a23c3dd632cba28282a07022b9d0d93e48878a3b","modified":1648634483365},{"_id":"themes/diaspora/scripts/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1648634483367},{"_id":"themes/diaspora/.github/ISSUE_TEMPLATE/issues-template.md","hash":"34869fddae53c69c2648712d2f82fe9cb6e9cb0d","modified":1648634483364},{"_id":"themes/diaspora/layout/_partial/head.ejs","hash":"8b9fc3f73aa91aa78b0339631a5ef6617686ceea","modified":1648634483365},{"_id":"themes/diaspora/layout/_partial/categories.ejs","hash":"4a569e3d4e1a0498238aea62abdaf27af96d5a12","modified":1648634483365},{"_id":"themes/diaspora/layout/_partial/mathjax.ejs","hash":"87918a6547489265695cf21e09c35559412c29b1","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1648634483365},{"_id":"themes/diaspora/layout/_partial/menu.ejs","hash":"ace01623958bbbf40207e71ed6ef9da0c46e1326","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/screen.ejs","hash":"6fc576fb8cd9e19ad781b4c08e30e633f50682d6","modified":1648634483367},{"_id":"themes/diaspora/layout/_partial/scripts.ejs","hash":"ecb5fbee97c93ed438650f64d7939c5e9401c11e","modified":1648634483367},{"_id":"themes/diaspora/layout/_partial/search.ejs","hash":"12210ce0d939650b336f428fb8ba4e40b19b42ae","modified":1648634483367},{"_id":"themes/diaspora/layout/_partial/tags.ejs","hash":"fd398ab315ef57c8197cd218237ec07dcd92f372","modified":1648634483367},{"_id":"themes/diaspora/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1648634483366},{"_id":"themes/diaspora/source/css/diaspora.css","hash":"e4bf1e4e6d2220a38582fb0687677531faaf7793","modified":1648634483368},{"_id":"themes/diaspora/source/js/diaspora.js","hash":"990b1a4383e29b4182918acecfd7e0e7e83158e2","modified":1648634483369},{"_id":"themes/diaspora/source/js/typed.js","hash":"e817f2a2b12c2da5e76cc1428912fe5900eb100c","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1648634483371},{"_id":"themes/diaspora/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1648634483371},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1648634483371},{"_id":"themes/diaspora/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/post/article.ejs","hash":"355c7ebb1c69ee7f08822aa521a66dafb00a1e01","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/post/gitalk.ejs","hash":"76f458d42280ea59fdc567d75534c51e51b1fa65","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/post/item.ejs","hash":"17992d3ebcefa840c4bdd5d2de4a7b80c2a7f999","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/post/header.ejs","hash":"6e1bdde001df6c3b97bf4bf0bf7c2c4160f2071c","modified":1648634483366},{"_id":"themes/diaspora/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1648634483367},{"_id":"themes/diaspora/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1648634483367},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1648634483370},{"_id":"themes/diaspora/source/img/logo.png","hash":"703a38c014500a8a86a70ff2b2bead858c5530c0","modified":1648696897365},{"_id":"themes/diaspora/source/img/cover-nier-automata-1.jpg","hash":"bef46cb8ed44e95662f7c95ac7f2c3de9ee31996","modified":1610269501305},{"_id":"themes/diaspora/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1648634483370},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1648634483371},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","hash":"dc44e689268603853dc1c799931e65f5432cb2e6","modified":1610269501308},{"_id":"themes/diaspora/source/img/cover-nier-automata-2.jpg","hash":"cd59d7466a121c1b3230e849b91a0af3e095749a","modified":1610269501307},{"_id":"themes/diaspora/source/img/favicon.png","hash":"4f6501e4155f7844836b240c027b4cf3fb27a953","modified":1610269501286},{"_id":"source/categories/index.md","hash":"a18276dfcdb339002845199e77d807761e417c08","modified":1648694597528},{"_id":"source/tags/index.md","hash":"8381781f14a32ada4226a7fc66ec6c5343e58635","modified":1648694321131},{"_id":"source/whoami/index.md","hash":"3dabe75480d64ae855219d5933a25ad1dbddfe85","modified":1648695688843},{"_id":"themes/diaspora/.DS_Store","hash":"688ce4b0f0d8c1ddc3d757587228d549b9aea4da","modified":1648695348541},{"_id":"source/search/index.md","hash":"7d4a79bc68f57c68257a100ff86d877194a447c7","modified":1648694356349},{"_id":"source/.DS_Store","hash":"d39005a58468d6f8275c06961984e15d6564b96a","modified":1648700205577},{"_id":"source/static/.DS_Store","hash":"5c41442b988829af06180b613321ce5b783c3a4e","modified":1648695343716},{"_id":"themes/diaspora/source/.DS_Store","hash":"9fb4245c7defc7e6069a504a0913b364f44a9885","modified":1648695343718},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/pic-01.png","hash":"1c7f5a7872f27cae1896b3a9db8fd539e3d66834","modified":1648699236877},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/pic-02.png","hash":"85b88e3c3fe8a780523ab13f50fae21541b598a6","modified":1648699236878},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/pic-03.png","hash":"6501c93f5a0aa4d5ae8162fe1c8dfd56ceddb82e","modified":1648699236878},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/pic-04.png","hash":"f7984e212cc23be4bb52e2f091cefe31405e9956","modified":1648699236878},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/pic-05.png","hash":"35aeea10fcf31331987422d58b8b0711b374d890","modified":1648699236878},{"_id":"source/static/images/2017-09-14-ASProjectFolders/1.png","hash":"a19607ff45baab076783c7f0cd1c1c9c3a1861fe","modified":1648699236879},{"_id":"source/static/images/2017-09-14-ASProjectFolders/2.png","hash":"61d6a7a1d9ff85c446bfb422645f270c804d80b4","modified":1648699236879},{"_id":"source/static/images/2017-09-14-ASProjectFolders/3.png","hash":"5f9342fa34d35bbce330d9729b26a22780287ca6","modified":1648699236879},{"_id":"source/static/images/2018-02-26-RegEx/3.png","hash":"e467c2833d2d89d3b9341fc29b9eb3839dd02056","modified":1648699236902},{"_id":"source/static/images/2018-02-26-RegEx/4.png","hash":"bb6359d3017446507dda5913961fa3d1ea713107","modified":1648699236903},{"_id":"source/static/images/2018-02-26-RegEx/1.png","hash":"23f8133e579b81d1b2fa0f774d1272c6562b02d7","modified":1648699236902},{"_id":"source/static/images/2018-02-26-RegEx/2.png","hash":"4c834efc21d829ea07f84292fa9b6dbeffe5c5dd","modified":1648699236902},{"_id":"source/static/images/2018-01-31-JSONinSwift/1.png","hash":"7dcf50ec365667a656b3e3a1d04ea000781eee0d","modified":1648699236891},{"_id":"source/static/images/2017-05-15-HelloSpringBoot/title.png","hash":"5d6bb9d4b6c2691217ce08b595e87505b3670c88","modified":1648699236879},{"_id":"source/static/images/2018-01-31-JSONinSwift/2.png","hash":"195fce09a883c38f8cd2ce0536c0ec5865041be1","modified":1648699236892},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/3.png","hash":"b4ed3780033b43d2ec7a1934436b53c42a2b149e","modified":1648699236882},{"_id":"source/static/images/2018-01-31-JSONinSwift/3.png","hash":"190a9fb56e4052840c7511ce3c57af2303129f47","modified":1648699236893},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/1.png","hash":"2a06d9ed9233f5967723299b45e7820ac3a5ae44","modified":1648699236880},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/2.png","hash":"e35d7a9da0840410afee8adbd0d2afc8c943fa7e","modified":1648699236881},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/6.png","hash":"cf2404431756d2f1722ed217d301513f92131bdf","modified":1648699236889},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/5.png","hash":"fb47f9976b26bc744cae6fc5e940c9802c06541e","modified":1648699236886},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/7.png","hash":"02f98440ce69d8cf2171d6edf9a3beb9472ddc68","modified":1648699236890},{"_id":"source/static/images/2017-11-02-CG5thSSAinHK/4.png","hash":"9079ce536ab126628c531fd747919a30788ecb4b","modified":1648699236884},{"_id":"source/static/images/2018-01-31-JSONinSwift/4.gif","hash":"f274b54b599712b647a3ee126257db540adbccab","modified":1648699236898},{"_id":"source/static/images/2020-11-24-SignInWithApple/01.jpeg","hash":"de2a040955d7df6e4f6accdeb48e4a89505875dc","modified":1648699236923},{"_id":"source/static/images/jetbrains/datagrip_logos/LICENSE.txt","hash":"95b6499d24dae9cb0e636be2f4082819b7299f7d","modified":1648699236854},{"_id":"source/static/images/jetbrains/datagrip_logos/logo.svg","hash":"08a1603b446d5f3e2f1dec8e539eca0d797cbb19","modified":1648699236859},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text.png","hash":"ad287925a92529a9a7d974571dafadaa5f0ba2ce","modified":1648699236858},{"_id":"source/static/images/jetbrains/webstorm_logos/LICENSE.txt","hash":"95b6499d24dae9cb0e636be2f4082819b7299f7d","modified":1648699236867},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text.svg","hash":"523d11ba17e50170bcd05e56905d0db9cdc1c332","modified":1648699236858},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text.svg","hash":"aecfc7b8a5ee2b9be472b606676b9830ff71d5b1","modified":1648699236871},{"_id":"source/static/images/jetbrains/webstorm_logos/logo.svg","hash":"f037e49b5aa17c5f1fd7d356c1cb128c6186c320","modified":1648699236872},{"_id":"source/static/images/jetbrains/variant-2_logos/LICENSE.txt","hash":"95b6499d24dae9cb0e636be2f4082819b7299f7d","modified":1648699236866},{"_id":"source/static/images/jetbrains/variant-2_logos/jetbrains-variant-2.svg","hash":"04c7a58509c0fae162ea91397360fc7cc981efdc","modified":1648699236867},{"_id":"source/static/images/jetbrains/datagrip_logos/boxshot.png","hash":"3f80ceb5e3accdc7279e4c048fc3e189a4ad922d","modified":1648699236854},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text.png","hash":"d1227429a1e51b8e83c179dbe7cb0f136b602326","modified":1648699236870},{"_id":"source/static/images/jetbrains/intellij-idea_logos/LICENSE.txt","hash":"95b6499d24dae9cb0e636be2f4082819b7299f7d","modified":1648699236859},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text.png","hash":"a21f1a858b47f5a912ad529f0aaeb6890e9c12de","modified":1648699236864},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text.svg","hash":"ba59bdc91ec9a90a8e5b4d01179da86a5b7d8629","modified":1648699236864},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo.svg","hash":"a9b89229a01a1f8e8a556f55b57400f6c631fc8f","modified":1648699236866},{"_id":"source/static/images/jetbrains/datagrip_logos/logo.png","hash":"ec38238a01718e2e3da2e6c6711d968bb7a0717f","modified":1648699236859},{"_id":"source/static/images/jetbrains/webstorm_logos/boxshot.png","hash":"a81e5b64f872e886de08ba9429d3df3702a1bd4b","modified":1648699236867},{"_id":"source/static/images/jetbrains/webstorm_logos/logo.png","hash":"560b26f32f1b1d9cf4f4702ed6498d5afe61a87a","modified":1648699236872},{"_id":"source/static/images/jetbrains/variant-2_logos/jetbrains-variant-2.png","hash":"463c85230460fbc2776ff780664789485c1b5d24","modified":1648699236867},{"_id":"source/static/images/jetbrains/intellij-idea_logos/boxshot.png","hash":"4f6bf7fffef234c199e2a54dd98c00b5aedb1ab6","modified":1648699236861},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo.png","hash":"ae500858b0272e12de87afe9846ab83759cdf7d7","modified":1648699236865},{"_id":"source/static/images/jetbrains/datagrip_logos/logo-text-CMYK.pdf","hash":"d6c646b0bed2d5c12a8d603b19ec8a94a6c2bdda","modified":1648699236857},{"_id":"source/static/images/jetbrains/webstorm_logos/logo-text-CMYK.pdf","hash":"8cf6917454c30618ad7e5d92debb42d921d02a8f","modified":1648699236870},{"_id":"source/static/images/jetbrains/intellij-idea_logos/logo-text-CMYK.pdf","hash":"bfe00a5e804da2484e27dbb33565ffa272496c13","modified":1648699236864},{"_id":"source/_posts/2017-05-14-SSMGenerator.md","hash":"e6b99044503cf23f3092b6dcd3d4c5d3fc6bd306","modified":1648700148256},{"_id":"source/_posts/2017-05-15-HelloSpringBoot.md","hash":"5c28f1f4a72c4c48c6623e2aa946a6fa29dabdb6","modified":1648699236795},{"_id":"source/_posts/2017-05-14-welcome.md","hash":"d1d0b120f42e9e6b592b33c855e2cd89c23caeca","modified":1648699873060},{"_id":"source/_posts/2017-06-03-CodErator.md","hash":"f17f931a2a4e560c9433bb08d5c36af29acf3a20","modified":1648700330532},{"_id":"source/_posts/2017-06-03-CodEratorDevelopNote.md","hash":"93918bdec77e6cbe3cc31febe389c8c161c6236c","modified":1648700373705},{"_id":"source/_posts/2017-05-15-SimpleSpringBootCRUD.md","hash":"7b826e67c6bf5f6300ae5557ef52f11deffb626e","modified":1648700205557},{"_id":"source/_posts/2017-06-28-AboutBeanLifecycle.md","hash":"1b4a8b75f814773b4dc10d776f86f4be8bd70cec","modified":1648700472347},{"_id":"source/_posts/2017-05-15-MLEventRankingViewer.md","hash":"7f62444f639ddc430a472928fd3e5b1aad972b28","modified":1648700147029},{"_id":"source/_posts/2017-09-14-ASProjectFolders.md","hash":"9474362eb366dfac2766f1d328f7571e2174c27d","modified":1648700846772},{"_id":"source/_posts/2017-05-16-SpringBootConfig.md","hash":"d5679ae9452d8bb03e865c30b6c9eb4e7e832dd3","modified":1648700340483},{"_id":"source/_posts/2017-09-14-MlBorderFunction.md","hash":"7ea0993988c290395d4ce8da936cd811688bc02e","modified":1648701391386},{"_id":"source/_posts/2017-08-17-ApacheRedirect.md","hash":"176fa38d6472d43e0378000bba60643f15117cb1","modified":1648700478673},{"_id":"source/_posts/2017-10-19-ContentStorageApp.md","hash":"342e360252c6a48e194039881712fa24c110622c","modified":1648700637329},{"_id":"source/_posts/2017-10-30-ContentUpdateOverNotification.md","hash":"c7553c09a82eaa895c0468a94a4a9388663a0730","modified":1648700730435},{"_id":"source/_posts/2017-11-02-CG5thSSAinHK.md","hash":"be72f50eb8c112b76f76bbc175891032fd465bf4","modified":1648700899080},{"_id":"source/_posts/2018-01-22-PokerBySwift.md","hash":"cc103b820a5b0c1c4b18d6a3bdf8c14c7a675935","modified":1648700994483},{"_id":"source/_posts/2018-01-31-JSONinSwift.md","hash":"36e1b7ae440e879067b0d885ad351fbfa021dc71","modified":1648701053738},{"_id":"source/_posts/2019-08-01-PythonMetaclassSingleton.md","hash":"02214a7e2927743870f2744b2d586bda0d91b4ce","modified":1648701222726},{"_id":"source/_posts/2018-02-26-RegEx.md","hash":"1970eaafa90e41aa51d1c4b4476ecb5b43919569","modified":1648701078772},{"_id":"source/_posts/2019-08-27-DDMonitor.md","hash":"7d38753ce9bba9864b219f3604aa6a8f49c71915","modified":1648701254600},{"_id":"source/_posts/2018-05-25-InviteCode.md","hash":"7dd0a8d8ea64a1cbc3bed27834e0d217e51b152e","modified":1648701112490},{"_id":"source/_posts/2018-05-31-SwitchDifferentJDK.md","hash":"4e90dd54fa8a498e124a7a6b89a9ea9bbf3029e6","modified":1648701153144},{"_id":"source/_posts/2019-11-15-FixGPGSignFailedProb.md","hash":"d83059a084bc8c55874a6f5392db5ba9a7d37164","modified":1648701284429},{"_id":"source/_posts/2021-03-03-AnalysisOfDiscordBotOAuth.md","hash":"0229b4ac68cff16e4e098cfab1c583eced8c6d04","modified":1648701369139},{"_id":"source/_posts/2020-11-24-SignInWithApple.md","hash":"dd3d951381bebc467f4ddfc73c7710c9f2535def","modified":1648701333815}],"Category":[{"name":"project","_id":"cl1eh4sjn0031g7ip944m3hnk"},{"name":"whoami","_id":"cl1eh9d220000sdipe1cw363r"},{"name":"guide","_id":"cl1ehl1xp0009svip111hdlxw"},{"name":"notification","_id":"cl1ehtck7000xsvip80xy70r4"},{"name":"life","_id":"cl1ehucx70012svip4qn86tj2"}],"Data":[],"Page":[{"title":"tags","date":"2022-03-30T10:33:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-30 18:33:03\ntype: tags\n---\n","updated":"2022-03-31T02:38:41.131Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl1efcr4o0000fkipa14b51wf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2022-03-30T10:32:53.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-30 18:32:53\ntype: categories\n---\n","updated":"2022-03-31T02:43:17.528Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl1efcr4s0002fkip8k9g9k4j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"whoami","date":"2022-03-30T10:35:36.000Z","_content":"\n# Ayakura Yuki\n\n普普通通的程序员，符合常规定义的`码农`。\n\n喜欢造轮子，但不是轻易就会造轮子的那种。\n\n喜欢对代码钻空子，抓优化点，虽然也不排除会做些负优化行为。\n\n-   IM@S プロデューサー\n-   Liella! 星星人\n-   车万同人曲爱好者\n-   狒狒 14 生产选手\n-   重建伊修加德第四赛季《天穹圣人》称号持有者\n-   ...\n\n合格的 Java 程序员，半个 Gopher，express 之类的也有用过，稍微会一些前端玩意儿比如 Vue，目标是全栈。\n\n容器爱好者，对如何使用 Kubernetes 和 Docker 有一些自己的理解，会结合操作系统的知识去玩这些东西（但是并没有深入去研究 K8S 其中的核心，我自裁）。\n\n## 关于小站\n\n小站建立在 [Hexo](https://hexo.io/) 之上，加装了 [Diaspora](https://github.com/Fechin/hexo-theme-diaspora) 外壳，经历过标准 HTML 页面代码，到 Github Pages 托管 Jekyll 框架博客站，演变到如今的形式。\n\n喜欢有依有据的编写风格，也有我自己的碎碎念，尽可能保持原创，并在风趣的文笔中把有用的信息传达给各位。\n\n## 练手项目\n\n#### Java & Groovy\n\n-   [httpclientutil](https://github.com/AyakuraYuki/httpclientutil) 改写自 `Arronlong/httpclientutil` 的 Apache HttpClient 封装工具类\n-   [SimpleSpringBootCRUD](https://github.com/AyakuraYuki/SimpleSpringBootCRUD) Spring Boot CRUD 实例\n-   [IMAS-ML-event-ranking-list](https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list) Million Live 活动排名查看器\n-   [Content Storage App](https://github.com/AyakuraYuki/content-storage-app) 一个简陋的，利用 K/V 机制存储数据的小工具，利用 DES 加密数据\n\n#### Kotlin\n\n-   [reminder for Android](https://github.com/AyakuraYuki/reminder) 安卓上的闹钟程序\n\n#### Python\n\n-   [Producer-Cogs, a cog for Red-DiscordBot](https://github.com/8zu/Producer-Cogs)\n-   [borderbot, a bot for Discord](https://github.com/AyakuraYuki/borderbot)\n-   [ts_downloader](https://github.com/AyakuraYuki/ts_downloader)\n\n#### C Sharp\n\n-   [CodErator](https://github.com/AyakuraYuki/CodErator) 轻量级代码生成工具\n\n#### Swift\n\n-   [URLDecoder_Swift for macOS](https://github.com/AyakuraYuki/URLDecoder_Swift)\n\n#### Template generator\n\n-   [SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator) SSM 框架代码生成器\n","source":"whoami/index.md","raw":"---\ntitle: whoami\ndate: 2022-03-30 18:35:36\n---\n\n# Ayakura Yuki\n\n普普通通的程序员，符合常规定义的`码农`。\n\n喜欢造轮子，但不是轻易就会造轮子的那种。\n\n喜欢对代码钻空子，抓优化点，虽然也不排除会做些负优化行为。\n\n-   IM@S プロデューサー\n-   Liella! 星星人\n-   车万同人曲爱好者\n-   狒狒 14 生产选手\n-   重建伊修加德第四赛季《天穹圣人》称号持有者\n-   ...\n\n合格的 Java 程序员，半个 Gopher，express 之类的也有用过，稍微会一些前端玩意儿比如 Vue，目标是全栈。\n\n容器爱好者，对如何使用 Kubernetes 和 Docker 有一些自己的理解，会结合操作系统的知识去玩这些东西（但是并没有深入去研究 K8S 其中的核心，我自裁）。\n\n## 关于小站\n\n小站建立在 [Hexo](https://hexo.io/) 之上，加装了 [Diaspora](https://github.com/Fechin/hexo-theme-diaspora) 外壳，经历过标准 HTML 页面代码，到 Github Pages 托管 Jekyll 框架博客站，演变到如今的形式。\n\n喜欢有依有据的编写风格，也有我自己的碎碎念，尽可能保持原创，并在风趣的文笔中把有用的信息传达给各位。\n\n## 练手项目\n\n#### Java & Groovy\n\n-   [httpclientutil](https://github.com/AyakuraYuki/httpclientutil) 改写自 `Arronlong/httpclientutil` 的 Apache HttpClient 封装工具类\n-   [SimpleSpringBootCRUD](https://github.com/AyakuraYuki/SimpleSpringBootCRUD) Spring Boot CRUD 实例\n-   [IMAS-ML-event-ranking-list](https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list) Million Live 活动排名查看器\n-   [Content Storage App](https://github.com/AyakuraYuki/content-storage-app) 一个简陋的，利用 K/V 机制存储数据的小工具，利用 DES 加密数据\n\n#### Kotlin\n\n-   [reminder for Android](https://github.com/AyakuraYuki/reminder) 安卓上的闹钟程序\n\n#### Python\n\n-   [Producer-Cogs, a cog for Red-DiscordBot](https://github.com/8zu/Producer-Cogs)\n-   [borderbot, a bot for Discord](https://github.com/AyakuraYuki/borderbot)\n-   [ts_downloader](https://github.com/AyakuraYuki/ts_downloader)\n\n#### C Sharp\n\n-   [CodErator](https://github.com/AyakuraYuki/CodErator) 轻量级代码生成工具\n\n#### Swift\n\n-   [URLDecoder_Swift for macOS](https://github.com/AyakuraYuki/URLDecoder_Swift)\n\n#### Template generator\n\n-   [SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator) SSM 框架代码生成器\n","updated":"2022-03-31T03:01:28.843Z","path":"whoami/index.html","comments":1,"layout":"page","_id":"cl1efcr4s0003fkip656l3evm","content":"<h1 id=\"Ayakura-Yuki\"><a href=\"#Ayakura-Yuki\" class=\"headerlink\" title=\"Ayakura Yuki\"></a>Ayakura Yuki</h1><p>普普通通的程序员，符合常规定义的<code>码农</code>。</p>\n<p>喜欢造轮子，但不是轻易就会造轮子的那种。</p>\n<p>喜欢对代码钻空子，抓优化点，虽然也不排除会做些负优化行为。</p>\n<ul>\n<li>IM@S プロデューサー</li>\n<li>Liella! 星星人</li>\n<li>车万同人曲爱好者</li>\n<li>狒狒 14 生产选手</li>\n<li>重建伊修加德第四赛季《天穹圣人》称号持有者</li>\n<li>…</li>\n</ul>\n<p>合格的 Java 程序员，半个 Gopher，express 之类的也有用过，稍微会一些前端玩意儿比如 Vue，目标是全栈。</p>\n<p>容器爱好者，对如何使用 Kubernetes 和 Docker 有一些自己的理解，会结合操作系统的知识去玩这些东西（但是并没有深入去研究 K8S 其中的核心，我自裁）。</p>\n<h2 id=\"关于小站\"><a href=\"#关于小站\" class=\"headerlink\" title=\"关于小站\"></a>关于小站</h2><p>小站建立在 <a href=\"https://hexo.io/\">Hexo</a> 之上，加装了 <a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora</a> 外壳，经历过标准 HTML 页面代码，到 Github Pages 托管 Jekyll 框架博客站，演变到如今的形式。</p>\n<p>喜欢有依有据的编写风格，也有我自己的碎碎念，尽可能保持原创，并在风趣的文笔中把有用的信息传达给各位。</p>\n<h2 id=\"练手项目\"><a href=\"#练手项目\" class=\"headerlink\" title=\"练手项目\"></a>练手项目</h2><h4 id=\"Java-amp-Groovy\"><a href=\"#Java-amp-Groovy\" class=\"headerlink\" title=\"Java &amp; Groovy\"></a>Java &amp; Groovy</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/httpclientutil\">httpclientutil</a> 改写自 <code>Arronlong/httpclientutil</code> 的 Apache HttpClient 封装工具类</li>\n<li><a href=\"https://github.com/AyakuraYuki/SimpleSpringBootCRUD\">SimpleSpringBootCRUD</a> Spring Boot CRUD 实例</li>\n<li><a href=\"https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list\">IMAS-ML-event-ranking-list</a> Million Live 活动排名查看器</li>\n<li><a href=\"https://github.com/AyakuraYuki/content-storage-app\">Content Storage App</a> 一个简陋的，利用 K&#x2F;V 机制存储数据的小工具，利用 DES 加密数据</li>\n</ul>\n<h4 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/reminder\">reminder for Android</a> 安卓上的闹钟程序</li>\n</ul>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><ul>\n<li><a href=\"https://github.com/8zu/Producer-Cogs\">Producer-Cogs, a cog for Red-DiscordBot</a></li>\n<li><a href=\"https://github.com/AyakuraYuki/borderbot\">borderbot, a bot for Discord</a></li>\n<li><a href=\"https://github.com/AyakuraYuki/ts_downloader\">ts_downloader</a></li>\n</ul>\n<h4 id=\"C-Sharp\"><a href=\"#C-Sharp\" class=\"headerlink\" title=\"C Sharp\"></a>C Sharp</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/CodErator\">CodErator</a> 轻量级代码生成工具</li>\n</ul>\n<h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/URLDecoder_Swift\">URLDecoder_Swift for macOS</a></li>\n</ul>\n<h4 id=\"Template-generator\"><a href=\"#Template-generator\" class=\"headerlink\" title=\"Template generator\"></a>Template generator</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a> SSM 框架代码生成器</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ayakura-Yuki\"><a href=\"#Ayakura-Yuki\" class=\"headerlink\" title=\"Ayakura Yuki\"></a>Ayakura Yuki</h1><p>普普通通的程序员，符合常规定义的<code>码农</code>。</p>\n<p>喜欢造轮子，但不是轻易就会造轮子的那种。</p>\n<p>喜欢对代码钻空子，抓优化点，虽然也不排除会做些负优化行为。</p>\n<ul>\n<li>IM@S プロデューサー</li>\n<li>Liella! 星星人</li>\n<li>车万同人曲爱好者</li>\n<li>狒狒 14 生产选手</li>\n<li>重建伊修加德第四赛季《天穹圣人》称号持有者</li>\n<li>…</li>\n</ul>\n<p>合格的 Java 程序员，半个 Gopher，express 之类的也有用过，稍微会一些前端玩意儿比如 Vue，目标是全栈。</p>\n<p>容器爱好者，对如何使用 Kubernetes 和 Docker 有一些自己的理解，会结合操作系统的知识去玩这些东西（但是并没有深入去研究 K8S 其中的核心，我自裁）。</p>\n<h2 id=\"关于小站\"><a href=\"#关于小站\" class=\"headerlink\" title=\"关于小站\"></a>关于小站</h2><p>小站建立在 <a href=\"https://hexo.io/\">Hexo</a> 之上，加装了 <a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora</a> 外壳，经历过标准 HTML 页面代码，到 Github Pages 托管 Jekyll 框架博客站，演变到如今的形式。</p>\n<p>喜欢有依有据的编写风格，也有我自己的碎碎念，尽可能保持原创，并在风趣的文笔中把有用的信息传达给各位。</p>\n<h2 id=\"练手项目\"><a href=\"#练手项目\" class=\"headerlink\" title=\"练手项目\"></a>练手项目</h2><h4 id=\"Java-amp-Groovy\"><a href=\"#Java-amp-Groovy\" class=\"headerlink\" title=\"Java &amp; Groovy\"></a>Java &amp; Groovy</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/httpclientutil\">httpclientutil</a> 改写自 <code>Arronlong/httpclientutil</code> 的 Apache HttpClient 封装工具类</li>\n<li><a href=\"https://github.com/AyakuraYuki/SimpleSpringBootCRUD\">SimpleSpringBootCRUD</a> Spring Boot CRUD 实例</li>\n<li><a href=\"https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list\">IMAS-ML-event-ranking-list</a> Million Live 活动排名查看器</li>\n<li><a href=\"https://github.com/AyakuraYuki/content-storage-app\">Content Storage App</a> 一个简陋的，利用 K&#x2F;V 机制存储数据的小工具，利用 DES 加密数据</li>\n</ul>\n<h4 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/reminder\">reminder for Android</a> 安卓上的闹钟程序</li>\n</ul>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><ul>\n<li><a href=\"https://github.com/8zu/Producer-Cogs\">Producer-Cogs, a cog for Red-DiscordBot</a></li>\n<li><a href=\"https://github.com/AyakuraYuki/borderbot\">borderbot, a bot for Discord</a></li>\n<li><a href=\"https://github.com/AyakuraYuki/ts_downloader\">ts_downloader</a></li>\n</ul>\n<h4 id=\"C-Sharp\"><a href=\"#C-Sharp\" class=\"headerlink\" title=\"C Sharp\"></a>C Sharp</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/CodErator\">CodErator</a> 轻量级代码生成工具</li>\n</ul>\n<h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/URLDecoder_Swift\">URLDecoder_Swift for macOS</a></li>\n</ul>\n<h4 id=\"Template-generator\"><a href=\"#Template-generator\" class=\"headerlink\" title=\"Template generator\"></a>Template generator</h4><ul>\n<li><a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a> SSM 框架代码生成器</li>\n</ul>\n"},{"title":"search","date":"2022-03-31T02:38:49.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2022-03-31 10:38:49\ntype: search\n---\n","updated":"2022-03-31T02:39:16.349Z","path":"search/index.html","comments":1,"layout":"page","_id":"cl1efcr4t0004fkipacsdbbho","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SSM codes Generator","date":"2017-05-14T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n# [SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator)\n\n> Spring & SpringMVC & MyBatis 项目代码生成模板\n\n根据数据库生成对应的 po、dao、service、mapping 代码以及两个通用类\n\n需要使用 CodeSmith\n\n## 支持\n\n1.自定义作者名\n\n2.自定义输出路径\n\n3.自定义基础包名\n\n## Bugs\n\n暂时没有发现 Bug，如果找到 Bug 请到 issues 留言，或者其他方式找到我并告诉我你遇到的问题。\n\n## 获取模板\n\n[唯一的下载入口](https://github.com/AyakuraYuki/SSMGenerator/archive/master.zip)\n（因为不会有 Release 版本，注意随时会有修改）\n","source":"_posts/2017-05-14-SSMGenerator.md","raw":"---\ntitle: SSM codes Generator\ndate: 2017-05-14 12:00:00\ncategories:\n    - project\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n# [SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator)\n\n> Spring & SpringMVC & MyBatis 项目代码生成模板\n\n根据数据库生成对应的 po、dao、service、mapping 代码以及两个通用类\n\n需要使用 CodeSmith\n\n## 支持\n\n1.自定义作者名\n\n2.自定义输出路径\n\n3.自定义基础包名\n\n## Bugs\n\n暂时没有发现 Bug，如果找到 Bug 请到 issues 留言，或者其他方式找到我并告诉我你遇到的问题。\n\n## 获取模板\n\n[唯一的下载入口](https://github.com/AyakuraYuki/SSMGenerator/archive/master.zip)\n（因为不会有 Release 版本，注意随时会有修改）\n","slug":"2017-05-14-SSMGenerator","published":1,"updated":"2022-03-31T04:15:48.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9a0000vrip5xpr45yg","content":"<h1 id=\"SSMGenerator\"><a href=\"#SSMGenerator\" class=\"headerlink\" title=\"SSMGenerator\"></a><a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a></h1><blockquote>\n<p>Spring &amp; SpringMVC &amp; MyBatis 项目代码生成模板</p>\n</blockquote>\n<p>根据数据库生成对应的 po、dao、service、mapping 代码以及两个通用类</p>\n<p>需要使用 CodeSmith</p>\n<h2 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h2><p>1.自定义作者名</p>\n<p>2.自定义输出路径</p>\n<p>3.自定义基础包名</p>\n<h2 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h2><p>暂时没有发现 Bug，如果找到 Bug 请到 issues 留言，或者其他方式找到我并告诉我你遇到的问题。</p>\n<h2 id=\"获取模板\"><a href=\"#获取模板\" class=\"headerlink\" title=\"获取模板\"></a>获取模板</h2><p><a href=\"https://github.com/AyakuraYuki/SSMGenerator/archive/master.zip\">唯一的下载入口</a><br>（因为不会有 Release 版本，注意随时会有修改）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SSMGenerator\"><a href=\"#SSMGenerator\" class=\"headerlink\" title=\"SSMGenerator\"></a><a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a></h1><blockquote>\n<p>Spring &amp; SpringMVC &amp; MyBatis 项目代码生成模板</p>\n</blockquote>\n<p>根据数据库生成对应的 po、dao、service、mapping 代码以及两个通用类</p>\n<p>需要使用 CodeSmith</p>\n<h2 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h2><p>1.自定义作者名</p>\n<p>2.自定义输出路径</p>\n<p>3.自定义基础包名</p>\n<h2 id=\"Bugs\"><a href=\"#Bugs\" class=\"headerlink\" title=\"Bugs\"></a>Bugs</h2><p>暂时没有发现 Bug，如果找到 Bug 请到 issues 留言，或者其他方式找到我并告诉我你遇到的问题。</p>\n<h2 id=\"获取模板\"><a href=\"#获取模板\" class=\"headerlink\" title=\"获取模板\"></a>获取模板</h2><p><a href=\"https://github.com/AyakuraYuki/SSMGenerator/archive/master.zip\">唯一的下载入口</a><br>（因为不会有 Release 版本，注意随时会有修改）</p>\n"},{"title":"Million Live Event Ranking Viewer","date":"2017-05-15T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n# Million Live Event Ranking Viewer\n\n> 卡牌游戏偶像大师百万现场活动排名查看器，简单查看各个分数线的分数。\n\n这是一个用于查看 Million Live 活动排名的小工具，可以方便查看各分数线的分数。\n\n## 开发工具及项目环境\n\n1.Intellij Idea\n\n2.使用 Maven 构建项目\n\n3.JavaSE 1.8\n\n## 使用技术\n\n1.Httpclient ——Ver4.5.2\n\n2.Jsoup ——Ver1.10.2\n\n3.log4j ——Ver1.2.17\n\n## 使用说明\n\n配置文件里可以设置当前活动的活动编号，这个编号可以从 URL 中提取，例如当期「夢の国！？ショコラティエの大冒険」的编号是 348。\n\n## 参与测试？\n\n可以在 [这里](https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list/releases) 下载最新版，包括测试版本和发布版。\n\n## 已知问题\n\n-   需要配合使用 Chrome 调试、Firebug、Fiddler 等软件抓取请求头，获得 Cookie 之后设置配置文件 config.properties\n\n-   异常错误转储为日志尚未完成\n\n-   Cookie 失效的情况，刷新排名之后界面不刷新任何数据，也不会有异常错误提示\n\n-   由于是单线程加 Swing 编程，点击刷新按钮后界面会卡住“假死”，但不是真正的程序崩溃，也由此导致获取的数据会有相对较大的延迟。\n\n根据上述问题，该软件可能需要重写，所以暂时就没什么更新了。\n\n## 关于 config.properties 的说明：\n\n-   第 1-10 行属于 HTTP 请求配置，这个配置暂时需要用户自行提取请求头内容。推荐的获取方式是使用 Chrome 的 F12 调试界面，选择 Network，然后重新载入 mypage 页面，获取 mypage 的 Request Header 中的 User-Agent 和 Cookie，将这两项复制到 config.properties 对应的两项中即可。需要注意的是，Cookie 需要复制的内容是从\"PHPSESSID\"开始到\"utmcsr=\"的\"u\"前面的\".\"，中间的这一段。\n\n-   第 12 行是活动编号，活动的「ランキング」页面的 URL 中，“event/”后面的数字即是活动编号\n\n-   第 13-15 行是软件表格的背景色设置，分别代表 R、G、B 颜色数值\n","source":"_posts/2017-05-15-MLEventRankingViewer.md","raw":"---\ntitle: Million Live Event Ranking Viewer\ndate: 2017-05-15 12:00:00\ncategories:\n    - project\ntags:\n    - Java\n    - Swing\n    - IM@S\nmp3:\ncover:\n---\n\n# Million Live Event Ranking Viewer\n\n> 卡牌游戏偶像大师百万现场活动排名查看器，简单查看各个分数线的分数。\n\n这是一个用于查看 Million Live 活动排名的小工具，可以方便查看各分数线的分数。\n\n## 开发工具及项目环境\n\n1.Intellij Idea\n\n2.使用 Maven 构建项目\n\n3.JavaSE 1.8\n\n## 使用技术\n\n1.Httpclient ——Ver4.5.2\n\n2.Jsoup ——Ver1.10.2\n\n3.log4j ——Ver1.2.17\n\n## 使用说明\n\n配置文件里可以设置当前活动的活动编号，这个编号可以从 URL 中提取，例如当期「夢の国！？ショコラティエの大冒険」的编号是 348。\n\n## 参与测试？\n\n可以在 [这里](https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list/releases) 下载最新版，包括测试版本和发布版。\n\n## 已知问题\n\n-   需要配合使用 Chrome 调试、Firebug、Fiddler 等软件抓取请求头，获得 Cookie 之后设置配置文件 config.properties\n\n-   异常错误转储为日志尚未完成\n\n-   Cookie 失效的情况，刷新排名之后界面不刷新任何数据，也不会有异常错误提示\n\n-   由于是单线程加 Swing 编程，点击刷新按钮后界面会卡住“假死”，但不是真正的程序崩溃，也由此导致获取的数据会有相对较大的延迟。\n\n根据上述问题，该软件可能需要重写，所以暂时就没什么更新了。\n\n## 关于 config.properties 的说明：\n\n-   第 1-10 行属于 HTTP 请求配置，这个配置暂时需要用户自行提取请求头内容。推荐的获取方式是使用 Chrome 的 F12 调试界面，选择 Network，然后重新载入 mypage 页面，获取 mypage 的 Request Header 中的 User-Agent 和 Cookie，将这两项复制到 config.properties 对应的两项中即可。需要注意的是，Cookie 需要复制的内容是从\"PHPSESSID\"开始到\"utmcsr=\"的\"u\"前面的\".\"，中间的这一段。\n\n-   第 12 行是活动编号，活动的「ランキング」页面的 URL 中，“event/”后面的数字即是活动编号\n\n-   第 13-15 行是软件表格的背景色设置，分别代表 R、G、B 颜色数值\n","slug":"2017-05-15-MLEventRankingViewer","published":1,"updated":"2022-03-31T04:15:47.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9c0001vrip9w8n2c5t","content":"<h1 id=\"Million-Live-Event-Ranking-Viewer\"><a href=\"#Million-Live-Event-Ranking-Viewer\" class=\"headerlink\" title=\"Million Live Event Ranking Viewer\"></a>Million Live Event Ranking Viewer</h1><blockquote>\n<p>卡牌游戏偶像大师百万现场活动排名查看器，简单查看各个分数线的分数。</p>\n</blockquote>\n<p>这是一个用于查看 Million Live 活动排名的小工具，可以方便查看各分数线的分数。</p>\n<h2 id=\"开发工具及项目环境\"><a href=\"#开发工具及项目环境\" class=\"headerlink\" title=\"开发工具及项目环境\"></a>开发工具及项目环境</h2><p>1.Intellij Idea</p>\n<p>2.使用 Maven 构建项目</p>\n<p>3.JavaSE 1.8</p>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><p>1.Httpclient ——Ver4.5.2</p>\n<p>2.Jsoup ——Ver1.10.2</p>\n<p>3.log4j ——Ver1.2.17</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>配置文件里可以设置当前活动的活动编号，这个编号可以从 URL 中提取，例如当期「夢の国！？ショコラティエの大冒険」的编号是 348。</p>\n<h2 id=\"参与测试？\"><a href=\"#参与测试？\" class=\"headerlink\" title=\"参与测试？\"></a>参与测试？</h2><p>可以在 <a href=\"https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list/releases\">这里</a> 下载最新版，包括测试版本和发布版。</p>\n<h2 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h2><ul>\n<li><p>需要配合使用 Chrome 调试、Firebug、Fiddler 等软件抓取请求头，获得 Cookie 之后设置配置文件 config.properties</p>\n</li>\n<li><p>异常错误转储为日志尚未完成</p>\n</li>\n<li><p>Cookie 失效的情况，刷新排名之后界面不刷新任何数据，也不会有异常错误提示</p>\n</li>\n<li><p>由于是单线程加 Swing 编程，点击刷新按钮后界面会卡住“假死”，但不是真正的程序崩溃，也由此导致获取的数据会有相对较大的延迟。</p>\n</li>\n</ul>\n<p>根据上述问题，该软件可能需要重写，所以暂时就没什么更新了。</p>\n<h2 id=\"关于-config-properties-的说明：\"><a href=\"#关于-config-properties-的说明：\" class=\"headerlink\" title=\"关于 config.properties 的说明：\"></a>关于 config.properties 的说明：</h2><ul>\n<li><p>第 1-10 行属于 HTTP 请求配置，这个配置暂时需要用户自行提取请求头内容。推荐的获取方式是使用 Chrome 的 F12 调试界面，选择 Network，然后重新载入 mypage 页面，获取 mypage 的 Request Header 中的 User-Agent 和 Cookie，将这两项复制到 config.properties 对应的两项中即可。需要注意的是，Cookie 需要复制的内容是从”PHPSESSID”开始到”utmcsr&#x3D;”的”u”前面的”.”，中间的这一段。</p>\n</li>\n<li><p>第 12 行是活动编号，活动的「ランキング」页面的 URL 中，“event&#x2F;”后面的数字即是活动编号</p>\n</li>\n<li><p>第 13-15 行是软件表格的背景色设置，分别代表 R、G、B 颜色数值</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Million-Live-Event-Ranking-Viewer\"><a href=\"#Million-Live-Event-Ranking-Viewer\" class=\"headerlink\" title=\"Million Live Event Ranking Viewer\"></a>Million Live Event Ranking Viewer</h1><blockquote>\n<p>卡牌游戏偶像大师百万现场活动排名查看器，简单查看各个分数线的分数。</p>\n</blockquote>\n<p>这是一个用于查看 Million Live 活动排名的小工具，可以方便查看各分数线的分数。</p>\n<h2 id=\"开发工具及项目环境\"><a href=\"#开发工具及项目环境\" class=\"headerlink\" title=\"开发工具及项目环境\"></a>开发工具及项目环境</h2><p>1.Intellij Idea</p>\n<p>2.使用 Maven 构建项目</p>\n<p>3.JavaSE 1.8</p>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><p>1.Httpclient ——Ver4.5.2</p>\n<p>2.Jsoup ——Ver1.10.2</p>\n<p>3.log4j ——Ver1.2.17</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><p>配置文件里可以设置当前活动的活动编号，这个编号可以从 URL 中提取，例如当期「夢の国！？ショコラティエの大冒険」的编号是 348。</p>\n<h2 id=\"参与测试？\"><a href=\"#参与测试？\" class=\"headerlink\" title=\"参与测试？\"></a>参与测试？</h2><p>可以在 <a href=\"https://github.com/AyakuraYuki/IMAS-ML-event-ranking-list/releases\">这里</a> 下载最新版，包括测试版本和发布版。</p>\n<h2 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h2><ul>\n<li><p>需要配合使用 Chrome 调试、Firebug、Fiddler 等软件抓取请求头，获得 Cookie 之后设置配置文件 config.properties</p>\n</li>\n<li><p>异常错误转储为日志尚未完成</p>\n</li>\n<li><p>Cookie 失效的情况，刷新排名之后界面不刷新任何数据，也不会有异常错误提示</p>\n</li>\n<li><p>由于是单线程加 Swing 编程，点击刷新按钮后界面会卡住“假死”，但不是真正的程序崩溃，也由此导致获取的数据会有相对较大的延迟。</p>\n</li>\n</ul>\n<p>根据上述问题，该软件可能需要重写，所以暂时就没什么更新了。</p>\n<h2 id=\"关于-config-properties-的说明：\"><a href=\"#关于-config-properties-的说明：\" class=\"headerlink\" title=\"关于 config.properties 的说明：\"></a>关于 config.properties 的说明：</h2><ul>\n<li><p>第 1-10 行属于 HTTP 请求配置，这个配置暂时需要用户自行提取请求头内容。推荐的获取方式是使用 Chrome 的 F12 调试界面，选择 Network，然后重新载入 mypage 页面，获取 mypage 的 Request Header 中的 User-Agent 和 Cookie，将这两项复制到 config.properties 对应的两项中即可。需要注意的是，Cookie 需要复制的内容是从”PHPSESSID”开始到”utmcsr&#x3D;”的”u”前面的”.”，中间的这一段。</p>\n</li>\n<li><p>第 12 行是活动编号，活动的「ランキング」页面的 URL 中，“event&#x2F;”后面的数字即是活动编号</p>\n</li>\n<li><p>第 13-15 行是软件表格的背景色设置，分别代表 R、G、B 颜色数值</p>\n</li>\n</ul>\n"},{"title":"CodErator","date":"2017-06-03T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n# [CodErator](https://github.com/AyakuraYuki/CodErator)\n\n> 轻量级代码生成工具\n\n查询元数据，暴力封装元数据信息，暴力生成源码，能生成就是好工具，反正都要按需求改！\n\n## 环境与依赖\n\n-   项目创建于 Visual Studio 2017\n\n-   .Net Framework 4.5.2\n\n-   WinForm\n\n-   “难用”的要死的[Razor Engine 3.9.3](https://github.com/Antaris/RazorEngine)\n\n-   MySQL Connector.Net 6.9\n\n## 使用目标\n\n### JavaEE\n\n-   SSM 框架代码生成\n\n-   可自由选择需要生成的层面\n\n### CSharp\n\n-   生成 Entity\n\n## 支持功能\n\n-   连接到指定 schema，尚未支持不指定 schema 的连接\n\n-   表字段内容获取\n\n-   列表多选即可选择需要生成的表\n\n-   指定输出位置\n\n## 开发路线\n\n-   项目初始版本属于 XP 模型产物，根据开发过程遇到的问题，可能需要在代码框架、逻辑设计上重新进行分析。\n\n-   初始版本对模板的支持比较严格，不建议用户修改模板文件。然而这不是废话吗？并不，我鼓励各位根据自己的需求或者代码风格去修改模板文件，只要遵守现有的文件名以及 Razor Engine 语法即可。\n\n-   未来考虑对模板支持进行大的修改，做到支持程序猿自己定义的模板。这个修改只要确保程序猿们遵守了 Razor Engine 语法，就可以生成代码，不受模板文件名的影响。\n\n-   上述开发路线说明或许会因为懒癌发作延期，作为开源项目，如果各位愿意的话，倒不是不可以去修改。欢迎 fork，不求 star。\n\n## 现存问题\n\n-   模板文件是定死的，包括文件名（前缀后缀）、文件数量\n\n-   仅支持三层生成（Entity、Dao、Service）\n\n-   C#暂时只支持 Entity，其余两层因为本人没有接触过 ASP.Net MVC 所以不太能下手\n\n-   一些藏得比较深的 bug\n","source":"_posts/2017-06-03-CodErator.md","raw":"---\ntitle: CodErator\ndate: 2017-06-03 12:00:00\ncategories:\n    - project\ntags:\n    - C#\n    - generator\nmp3:\ncover:\n---\n\n# [CodErator](https://github.com/AyakuraYuki/CodErator)\n\n> 轻量级代码生成工具\n\n查询元数据，暴力封装元数据信息，暴力生成源码，能生成就是好工具，反正都要按需求改！\n\n## 环境与依赖\n\n-   项目创建于 Visual Studio 2017\n\n-   .Net Framework 4.5.2\n\n-   WinForm\n\n-   “难用”的要死的[Razor Engine 3.9.3](https://github.com/Antaris/RazorEngine)\n\n-   MySQL Connector.Net 6.9\n\n## 使用目标\n\n### JavaEE\n\n-   SSM 框架代码生成\n\n-   可自由选择需要生成的层面\n\n### CSharp\n\n-   生成 Entity\n\n## 支持功能\n\n-   连接到指定 schema，尚未支持不指定 schema 的连接\n\n-   表字段内容获取\n\n-   列表多选即可选择需要生成的表\n\n-   指定输出位置\n\n## 开发路线\n\n-   项目初始版本属于 XP 模型产物，根据开发过程遇到的问题，可能需要在代码框架、逻辑设计上重新进行分析。\n\n-   初始版本对模板的支持比较严格，不建议用户修改模板文件。然而这不是废话吗？并不，我鼓励各位根据自己的需求或者代码风格去修改模板文件，只要遵守现有的文件名以及 Razor Engine 语法即可。\n\n-   未来考虑对模板支持进行大的修改，做到支持程序猿自己定义的模板。这个修改只要确保程序猿们遵守了 Razor Engine 语法，就可以生成代码，不受模板文件名的影响。\n\n-   上述开发路线说明或许会因为懒癌发作延期，作为开源项目，如果各位愿意的话，倒不是不可以去修改。欢迎 fork，不求 star。\n\n## 现存问题\n\n-   模板文件是定死的，包括文件名（前缀后缀）、文件数量\n\n-   仅支持三层生成（Entity、Dao、Service）\n\n-   C#暂时只支持 Entity，其余两层因为本人没有接触过 ASP.Net MVC 所以不太能下手\n\n-   一些藏得比较深的 bug\n","slug":"2017-06-03-CodErator","published":1,"updated":"2022-03-31T04:18:50.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9e0003vripfdt6g5hh","content":"<h1 id=\"CodErator\"><a href=\"#CodErator\" class=\"headerlink\" title=\"CodErator\"></a><a href=\"https://github.com/AyakuraYuki/CodErator\">CodErator</a></h1><blockquote>\n<p>轻量级代码生成工具</p>\n</blockquote>\n<p>查询元数据，暴力封装元数据信息，暴力生成源码，能生成就是好工具，反正都要按需求改！</p>\n<h2 id=\"环境与依赖\"><a href=\"#环境与依赖\" class=\"headerlink\" title=\"环境与依赖\"></a>环境与依赖</h2><ul>\n<li><p>项目创建于 Visual Studio 2017</p>\n</li>\n<li><p>.Net Framework 4.5.2</p>\n</li>\n<li><p>WinForm</p>\n</li>\n<li><p>“难用”的要死的<a href=\"https://github.com/Antaris/RazorEngine\">Razor Engine 3.9.3</a></p>\n</li>\n<li><p>MySQL Connector.Net 6.9</p>\n</li>\n</ul>\n<h2 id=\"使用目标\"><a href=\"#使用目标\" class=\"headerlink\" title=\"使用目标\"></a>使用目标</h2><h3 id=\"JavaEE\"><a href=\"#JavaEE\" class=\"headerlink\" title=\"JavaEE\"></a>JavaEE</h3><ul>\n<li><p>SSM 框架代码生成</p>\n</li>\n<li><p>可自由选择需要生成的层面</p>\n</li>\n</ul>\n<h3 id=\"CSharp\"><a href=\"#CSharp\" class=\"headerlink\" title=\"CSharp\"></a>CSharp</h3><ul>\n<li>生成 Entity</li>\n</ul>\n<h2 id=\"支持功能\"><a href=\"#支持功能\" class=\"headerlink\" title=\"支持功能\"></a>支持功能</h2><ul>\n<li><p>连接到指定 schema，尚未支持不指定 schema 的连接</p>\n</li>\n<li><p>表字段内容获取</p>\n</li>\n<li><p>列表多选即可选择需要生成的表</p>\n</li>\n<li><p>指定输出位置</p>\n</li>\n</ul>\n<h2 id=\"开发路线\"><a href=\"#开发路线\" class=\"headerlink\" title=\"开发路线\"></a>开发路线</h2><ul>\n<li><p>项目初始版本属于 XP 模型产物，根据开发过程遇到的问题，可能需要在代码框架、逻辑设计上重新进行分析。</p>\n</li>\n<li><p>初始版本对模板的支持比较严格，不建议用户修改模板文件。然而这不是废话吗？并不，我鼓励各位根据自己的需求或者代码风格去修改模板文件，只要遵守现有的文件名以及 Razor Engine 语法即可。</p>\n</li>\n<li><p>未来考虑对模板支持进行大的修改，做到支持程序猿自己定义的模板。这个修改只要确保程序猿们遵守了 Razor Engine 语法，就可以生成代码，不受模板文件名的影响。</p>\n</li>\n<li><p>上述开发路线说明或许会因为懒癌发作延期，作为开源项目，如果各位愿意的话，倒不是不可以去修改。欢迎 fork，不求 star。</p>\n</li>\n</ul>\n<h2 id=\"现存问题\"><a href=\"#现存问题\" class=\"headerlink\" title=\"现存问题\"></a>现存问题</h2><ul>\n<li><p>模板文件是定死的，包括文件名（前缀后缀）、文件数量</p>\n</li>\n<li><p>仅支持三层生成（Entity、Dao、Service）</p>\n</li>\n<li><p>C#暂时只支持 Entity，其余两层因为本人没有接触过 ASP.Net MVC 所以不太能下手</p>\n</li>\n<li><p>一些藏得比较深的 bug</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CodErator\"><a href=\"#CodErator\" class=\"headerlink\" title=\"CodErator\"></a><a href=\"https://github.com/AyakuraYuki/CodErator\">CodErator</a></h1><blockquote>\n<p>轻量级代码生成工具</p>\n</blockquote>\n<p>查询元数据，暴力封装元数据信息，暴力生成源码，能生成就是好工具，反正都要按需求改！</p>\n<h2 id=\"环境与依赖\"><a href=\"#环境与依赖\" class=\"headerlink\" title=\"环境与依赖\"></a>环境与依赖</h2><ul>\n<li><p>项目创建于 Visual Studio 2017</p>\n</li>\n<li><p>.Net Framework 4.5.2</p>\n</li>\n<li><p>WinForm</p>\n</li>\n<li><p>“难用”的要死的<a href=\"https://github.com/Antaris/RazorEngine\">Razor Engine 3.9.3</a></p>\n</li>\n<li><p>MySQL Connector.Net 6.9</p>\n</li>\n</ul>\n<h2 id=\"使用目标\"><a href=\"#使用目标\" class=\"headerlink\" title=\"使用目标\"></a>使用目标</h2><h3 id=\"JavaEE\"><a href=\"#JavaEE\" class=\"headerlink\" title=\"JavaEE\"></a>JavaEE</h3><ul>\n<li><p>SSM 框架代码生成</p>\n</li>\n<li><p>可自由选择需要生成的层面</p>\n</li>\n</ul>\n<h3 id=\"CSharp\"><a href=\"#CSharp\" class=\"headerlink\" title=\"CSharp\"></a>CSharp</h3><ul>\n<li>生成 Entity</li>\n</ul>\n<h2 id=\"支持功能\"><a href=\"#支持功能\" class=\"headerlink\" title=\"支持功能\"></a>支持功能</h2><ul>\n<li><p>连接到指定 schema，尚未支持不指定 schema 的连接</p>\n</li>\n<li><p>表字段内容获取</p>\n</li>\n<li><p>列表多选即可选择需要生成的表</p>\n</li>\n<li><p>指定输出位置</p>\n</li>\n</ul>\n<h2 id=\"开发路线\"><a href=\"#开发路线\" class=\"headerlink\" title=\"开发路线\"></a>开发路线</h2><ul>\n<li><p>项目初始版本属于 XP 模型产物，根据开发过程遇到的问题，可能需要在代码框架、逻辑设计上重新进行分析。</p>\n</li>\n<li><p>初始版本对模板的支持比较严格，不建议用户修改模板文件。然而这不是废话吗？并不，我鼓励各位根据自己的需求或者代码风格去修改模板文件，只要遵守现有的文件名以及 Razor Engine 语法即可。</p>\n</li>\n<li><p>未来考虑对模板支持进行大的修改，做到支持程序猿自己定义的模板。这个修改只要确保程序猿们遵守了 Razor Engine 语法，就可以生成代码，不受模板文件名的影响。</p>\n</li>\n<li><p>上述开发路线说明或许会因为懒癌发作延期，作为开源项目，如果各位愿意的话，倒不是不可以去修改。欢迎 fork，不求 star。</p>\n</li>\n</ul>\n<h2 id=\"现存问题\"><a href=\"#现存问题\" class=\"headerlink\" title=\"现存问题\"></a>现存问题</h2><ul>\n<li><p>模板文件是定死的，包括文件名（前缀后缀）、文件数量</p>\n</li>\n<li><p>仅支持三层生成（Entity、Dao、Service）</p>\n</li>\n<li><p>C#暂时只支持 Entity，其余两层因为本人没有接触过 ASP.Net MVC 所以不太能下手</p>\n</li>\n<li><p>一些藏得比较深的 bug</p>\n</li>\n</ul>\n"},{"title":"欢迎","date":"2017-05-13T16:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 第一次有了好看的个人博客，第一次写了欢迎博文，两种快乐的事情重合在一起...\n\n### 关于我\n\n-   JavaEE 应用工程师\n-   C#程序员\n-   软件需求分析比较溜\n-   对新的框架和语言有很强的好奇心\n-   “脚手架”玩的贼溜\n-   女装程序员\n-   プロデューサー\n-   IM@S 驱动的程序设计\n-   还有更多...\n\n### 关于这个模板\n\n[Moon](https://github.com/TaylanTatli/Moon)是一个我认为比较好的模板，个人介绍的味道比较足，不强调项目*（小声：不强调项目怎么看得出这个博主是程序猿！）*\n\n选择了[Moon](https://github.com/TaylanTatli/Moon)是因为它对社交媒体外链的支持出乎我想想的多，虽然大多数还是国外的 SNS 服务，但就连微博（包括微博的 ICON）都支持了，这样是最好的。\n\n这里不得不提一下上一个用到的模板[Space](https://victorvoid.github.io/space-jekyll-template/)（[Github](https://github.com/victorvoid/space-jekyll-template)），这个模板优势在于，它的 menubar 支持键盘快捷键，还有全局搜索功能（姑且算是全局搜索吧），不过让我不爽的是，使用 SVG 标签获取 SNS 图标这一点，你却不告诉我 class 去哪配置，自定义图标的难度就刷刷刷上去了。\n","source":"_posts/2017-05-14-welcome.md","raw":"---\ntitle: 欢迎\ndate: 2017-05-14 00:00:00\ncategories:\n    - whoami\ntags:\n    - welcome\nmp3:\ncover:\n---\n\n> 第一次有了好看的个人博客，第一次写了欢迎博文，两种快乐的事情重合在一起...\n\n### 关于我\n\n-   JavaEE 应用工程师\n-   C#程序员\n-   软件需求分析比较溜\n-   对新的框架和语言有很强的好奇心\n-   “脚手架”玩的贼溜\n-   女装程序员\n-   プロデューサー\n-   IM@S 驱动的程序设计\n-   还有更多...\n\n### 关于这个模板\n\n[Moon](https://github.com/TaylanTatli/Moon)是一个我认为比较好的模板，个人介绍的味道比较足，不强调项目*（小声：不强调项目怎么看得出这个博主是程序猿！）*\n\n选择了[Moon](https://github.com/TaylanTatli/Moon)是因为它对社交媒体外链的支持出乎我想想的多，虽然大多数还是国外的 SNS 服务，但就连微博（包括微博的 ICON）都支持了，这样是最好的。\n\n这里不得不提一下上一个用到的模板[Space](https://victorvoid.github.io/space-jekyll-template/)（[Github](https://github.com/victorvoid/space-jekyll-template)），这个模板优势在于，它的 menubar 支持键盘快捷键，还有全局搜索功能（姑且算是全局搜索吧），不过让我不爽的是，使用 SVG 标签获取 SNS 图标这一点，你却不告诉我 class 去哪配置，自定义图标的难度就刷刷刷上去了。\n","slug":"2017-05-14-welcome","published":1,"updated":"2022-03-31T04:11:13.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9e0004vrip51ki5xw3","content":"<blockquote>\n<p>第一次有了好看的个人博客，第一次写了欢迎博文，两种快乐的事情重合在一起…</p>\n</blockquote>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>JavaEE 应用工程师</li>\n<li>C#程序员</li>\n<li>软件需求分析比较溜</li>\n<li>对新的框架和语言有很强的好奇心</li>\n<li>“脚手架”玩的贼溜</li>\n<li>女装程序员</li>\n<li>プロデューサー</li>\n<li>IM@S 驱动的程序设计</li>\n<li>还有更多…</li>\n</ul>\n<h3 id=\"关于这个模板\"><a href=\"#关于这个模板\" class=\"headerlink\" title=\"关于这个模板\"></a>关于这个模板</h3><p><a href=\"https://github.com/TaylanTatli/Moon\">Moon</a>是一个我认为比较好的模板，个人介绍的味道比较足，不强调项目<em>（小声：不强调项目怎么看得出这个博主是程序猿！）</em></p>\n<p>选择了<a href=\"https://github.com/TaylanTatli/Moon\">Moon</a>是因为它对社交媒体外链的支持出乎我想想的多，虽然大多数还是国外的 SNS 服务，但就连微博（包括微博的 ICON）都支持了，这样是最好的。</p>\n<p>这里不得不提一下上一个用到的模板<a href=\"https://victorvoid.github.io/space-jekyll-template/\">Space</a>（<a href=\"https://github.com/victorvoid/space-jekyll-template\">Github</a>），这个模板优势在于，它的 menubar 支持键盘快捷键，还有全局搜索功能（姑且算是全局搜索吧），不过让我不爽的是，使用 SVG 标签获取 SNS 图标这一点，你却不告诉我 class 去哪配置，自定义图标的难度就刷刷刷上去了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>第一次有了好看的个人博客，第一次写了欢迎博文，两种快乐的事情重合在一起…</p>\n</blockquote>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li>JavaEE 应用工程师</li>\n<li>C#程序员</li>\n<li>软件需求分析比较溜</li>\n<li>对新的框架和语言有很强的好奇心</li>\n<li>“脚手架”玩的贼溜</li>\n<li>女装程序员</li>\n<li>プロデューサー</li>\n<li>IM@S 驱动的程序设计</li>\n<li>还有更多…</li>\n</ul>\n<h3 id=\"关于这个模板\"><a href=\"#关于这个模板\" class=\"headerlink\" title=\"关于这个模板\"></a>关于这个模板</h3><p><a href=\"https://github.com/TaylanTatli/Moon\">Moon</a>是一个我认为比较好的模板，个人介绍的味道比较足，不强调项目<em>（小声：不强调项目怎么看得出这个博主是程序猿！）</em></p>\n<p>选择了<a href=\"https://github.com/TaylanTatli/Moon\">Moon</a>是因为它对社交媒体外链的支持出乎我想想的多，虽然大多数还是国外的 SNS 服务，但就连微博（包括微博的 ICON）都支持了，这样是最好的。</p>\n<p>这里不得不提一下上一个用到的模板<a href=\"https://victorvoid.github.io/space-jekyll-template/\">Space</a>（<a href=\"https://github.com/victorvoid/space-jekyll-template\">Github</a>），这个模板优势在于，它的 menubar 支持键盘快捷键，还有全局搜索功能（姑且算是全局搜索吧），不过让我不爽的是，使用 SVG 标签获取 SNS 图标这一点，你却不告诉我 class 去哪配置，自定义图标的难度就刷刷刷上去了。</p>\n"},{"title":"Spring Boot CRUD","date":"2017-05-15T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n# SimpleSpringBootCRUD\n\n这是一个基础的 CRUD 系统，基于 Spring Boot 编写，整合了 MyBatis 和 Thymeleaf。\n\n[项目地址](https://github.com/AyakuraYuki/SimpleSpringBootCRUD)\n\n有兴趣的话也可以 fork 下来试着玩玩 : D\n","source":"_posts/2017-05-15-SimpleSpringBootCRUD.md","raw":"---\ntitle: Spring Boot CRUD\ndate: 2017-05-15 12:00:00\ncategories:\n    - project\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n# SimpleSpringBootCRUD\n\n这是一个基础的 CRUD 系统，基于 Spring Boot 编写，整合了 MyBatis 和 Thymeleaf。\n\n[项目地址](https://github.com/AyakuraYuki/SimpleSpringBootCRUD)\n\n有兴趣的话也可以 fork 下来试着玩玩 : D\n","slug":"2017-05-15-SimpleSpringBootCRUD","published":1,"updated":"2022-03-31T04:16:45.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9f0006vripck3i5vfi","content":"<h1 id=\"SimpleSpringBootCRUD\"><a href=\"#SimpleSpringBootCRUD\" class=\"headerlink\" title=\"SimpleSpringBootCRUD\"></a>SimpleSpringBootCRUD</h1><p>这是一个基础的 CRUD 系统，基于 Spring Boot 编写，整合了 MyBatis 和 Thymeleaf。</p>\n<p><a href=\"https://github.com/AyakuraYuki/SimpleSpringBootCRUD\">项目地址</a></p>\n<p>有兴趣的话也可以 fork 下来试着玩玩 : D</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SimpleSpringBootCRUD\"><a href=\"#SimpleSpringBootCRUD\" class=\"headerlink\" title=\"SimpleSpringBootCRUD\"></a>SimpleSpringBootCRUD</h1><p>这是一个基础的 CRUD 系统，基于 Spring Boot 编写，整合了 MyBatis 和 Thymeleaf。</p>\n<p><a href=\"https://github.com/AyakuraYuki/SimpleSpringBootCRUD\">项目地址</a></p>\n<p>有兴趣的话也可以 fork 下来试着玩玩 : D</p>\n"},{"title":"Spring Boot学习之基本配置","date":"2017-05-16T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n> Spring Boot 其实可以不需要配置就能运行，但实际的实现过程中，我们还是需要给它写一些配置，准确的说，是给包含第三方依赖的环境编写配置。\n\n## Maven - pom.xml\n\n根据相关文档说明，构建 Spring Boot 项目建议使用 Gradle，但不排斥 Maven 创建项目。\n\n在我的演示项目中，我使用了 Spring Boot + MyBatis + Thymeleaf 的环境。\n\n以下是使用 Maven 创建 Spring Boot 项目所用的 pom.xml 文件配置内容。\n\n```xml\n<!-- Spring Boot基础依赖 -->\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.2.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<dependencies>\n    <!-- Spring Boot JDBC 支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n\n    <!-- Spring-MyBatis 支持 -->\n    <dependency>\n        <groupId>org.mybatis.spring.boot</groupId>\n        <artifactId>mybatis-spring-boot-starter</artifactId>\n        <version>1.3.0</version>\n    </dependency>\n\n    <!-- Thymeleaf 模板引擎支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n\n    <!-- MySQL 连接器 -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n\n    <!-- Spring Boot 测试单元支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n    <!-- Restful 文档 -->\n    <dependency>\n        <groupId>org.springframework.restdocs</groupId>\n        <artifactId>spring-restdocs-mockmvc</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n    <!-- Spring Boot 开发工具包 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <!-- Groovy 支持 -->\n    <dependency>\n        <groupId>org.codehaus.groovy</groupId>\n        <artifactId>groovy</artifactId>\n        <version>2.4.10</version>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <!--\n            使用Maven package时，如果指定了这个插件，打包会生成JAR文件，而不是WAR文件\n            启动Spring Boot是通过指定的BootApplication.main()来启动，所以使用JAR包直接运行\n         -->\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## Environment - application.yml\n\n[YAML](http://www.yaml.org/) (YAML Ain't Markup Language)，即“YAML 不是一种置标语言”，是所有编程语言的人性化数据序列化标准。\n\nYAML 是 JSON 的一个超集，也是一种方便的定义层次配置数据的格式。只要将 SnakeYAML 库放到 classpath 下，SpringApplication 就会自动支持 YAML，以作为 properties 的替换。\n\n简单来说，YAML 不像 xml 那样需要配置繁琐的标签和属性以及文档验证，也不像 properties 那样只有普通的 key/value。YAML 使用大纲的缩进表现形式，让配置项有明显的结构表示。\n\n```yaml\n# System configuration\nserver:\n    display-name: CRUD # 定义服务器的显示名称\n    port:\n        8888 # 定义可访问的端口，默认访问端口是8080\n        # 由于Spring Boot是内建Tomcat，所以没有了Tomcat的配置，取而代之的是在这里配置访问端口\n\n# Datasource & Thymeleaf configuration\nspring:\n    datasource:\n        driver-class-name: com.mysql.jdbc.Driver # 定义数据源使用的驱动类\n        username: root # 数据库用户\n        password: root # 数据库密码\n        url: jdbc:mysql://[server_address]:[port]/[schema_name] # 连接URL\n    thymeleaf: # 配置模板引擎\n        enabled: true # 开启模板引擎，默认true，这里配置其实可以不写这句\n        mode: HTML5 # 定义模板类型\n        encoding: utf-8 # 编码，不用多说了\n        content-type: text/html # 报文类型\n        cache:\n            false # 是否开启缓存，这里跟修改模板文件后自动部署有关\n            # 关闭之后如果对模板文件有修改，就会更新服务器上的文件\n        prefix: classpath:/templates/ # 访问前缀，默认是/template文件夹\n        suffix: .html # 访问后缀，可以改为其他的名称，默认就是.html\n    resources: # 资源文件绑定\n        static-locations: classpath:/static # 这里的配置可以使模板像调用本地文件一样调用到样式资源\n```\n\n## MyBatis - bean & mapping xml\n\nMyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生 Map 使用简单的 XML 或注解，将接口和 POJO 映射成数据库中的记录。\n\nMyBatis 相比 Hibernate，其可控性几乎是完全的，程序员可以通过 mapping 配置，使程序不用回炉重造就能支持多个数据库的连接，并且有效控制对数据的操作。\n\n本演示项目没有使用如 Druid、DBCP 等的数据库连接池工具，而是使用 Tomcat 数据库连接池，使用 Tomcat 连接池的配置相对简单，适合初学者入门（但为了数据库连接信息安全，更推荐使用 Druid）。对于使用数据库连接池的配置，会在今后撰文介绍。\n\n```java\n@SpringBootApplication\n@MapperScan(\"me.yuki.dao\")\npublic class BootApplication {\n\t@Bean\n\t@ConfigurationProperties(\"spring.datasource\")\n\tpublic DataSource getDataSource() {\n\t\treturn new org.apache.tomcat.jdbc.pool.DataSource();\n\t}\n\n\t@Bean\n    public SqlSessionFactory getSqlSessionFactory() throws Exception {\n    \tSqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();\n    \tsqlSessionFactory.setDataSource(getDataSource());\n    \tPathMatchingResourcePatternResolver resolver\n    \t                        = new PathMatchingResourcePatternResolver();\n    \tsqlSessionFactory.setMapperLocations(resolver.getResources(\"/mapper/*.xml\"));\n    \treturn sqlSessionFactory.getObject();\n    }\n\n\t@Bean\n\tpublic PlatformTransactionManager getTransactionManager() {\n\t\treturn new DataSourceTransactionManager(getDataSource());\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BootApplication.class, args);\n\t}\n}\n```\n\n### 数据源配置 - 代码分析\n\n#### 类注解\n\n```java\n@SpringBootApplication // 标记该类是Spring Boot启动类\n@MapperScan(\"me.yuki.dao\") // 配置mapper扫描器扫描的包位置\n```\n\n#### getDataSource()\n\n```java\n@Bean // 注册为DataSource Bean\n@ConfigurationProperties(\"spring.datasource\") // 从yml取得节点spring.datasource下的配置\npublic DataSource getDataSource() {\n    return new org.apache.tomcat.jdbc.pool.DataSource(); // 从Tomcat获取DataSource\n}\n```\n\n对应的 SpringFramework 配置如下（可能会有不同，参考的 xml 采用了 DBCP 配置数据源）\n\n```xml\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${spring.datasource.driver-class-name}\" />\n\t<property name=\"url\" value=\"${spring.datasource.url}\" />\n\t<property name=\"username\" value=\"${spring.datasource.username}\" />\n\t<property name=\"password\" value=\"${spring.datasource.password}\" />\n</bean>\n```\n\n#### getSqlSessionFactory()\n\n```java\n@Bean // 注册为SqlSessionFactory Bean\npublic SqlSessionFactory getSqlSessionFactory() throws Exception {\n    // <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();\n    // <property name=\"dataSource\" ref=\"dataSource\" />\n    sqlSessionFactory.setDataSource(getDataSource());\n    PathMatchingResourcePatternResolver resolver\n                            = new PathMatchingResourcePatternResolver();\n    // <property name=\"mapperLocations\" value=\"classpath*:/mapper/*.xml\" />\n    sqlSessionFactory.setMapperLocations(resolver.getResources(\"/mapper/*.xml\"));\n    return sqlSessionFactory.getObject();\n}\n```\n\n#### getTransactionManager()\n\n```java\n@Bean // 注册为PlatformTransactionManager Bean\npublic PlatformTransactionManager getTransactionManager() {\n    /*\n    <bean id=\"transactionManager\"\n            class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n       \t<property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n     */\n\treturn new DataSourceTransactionManager(getDataSource());\n}\n```\n\n### Mapping.xml\n\nMyBatis mapping 文件的配置与 SSM 的配置完全一样，只要把文件放到在 getSqlSessionFactory()中配置的 MapperLocation 文件夹之下，对应文件名匹配格式即可。\n","source":"_posts/2017-05-16-SpringBootConfig.md","raw":"---\ntitle: Spring Boot学习之基本配置\ndate: 2017-05-16 12:00:00\ncategories:\n    - guide\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n> Spring Boot 其实可以不需要配置就能运行，但实际的实现过程中，我们还是需要给它写一些配置，准确的说，是给包含第三方依赖的环境编写配置。\n\n## Maven - pom.xml\n\n根据相关文档说明，构建 Spring Boot 项目建议使用 Gradle，但不排斥 Maven 创建项目。\n\n在我的演示项目中，我使用了 Spring Boot + MyBatis + Thymeleaf 的环境。\n\n以下是使用 Maven 创建 Spring Boot 项目所用的 pom.xml 文件配置内容。\n\n```xml\n<!-- Spring Boot基础依赖 -->\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.2.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n\n<dependencies>\n    <!-- Spring Boot JDBC 支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n\n    <!-- Spring-MyBatis 支持 -->\n    <dependency>\n        <groupId>org.mybatis.spring.boot</groupId>\n        <artifactId>mybatis-spring-boot-starter</artifactId>\n        <version>1.3.0</version>\n    </dependency>\n\n    <!-- Thymeleaf 模板引擎支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n\n    <!-- MySQL 连接器 -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n\n    <!-- Spring Boot 测试单元支持 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n    <!-- Restful 文档 -->\n    <dependency>\n        <groupId>org.springframework.restdocs</groupId>\n        <artifactId>spring-restdocs-mockmvc</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n    <!-- Spring Boot 开发工具包 -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <!-- Groovy 支持 -->\n    <dependency>\n        <groupId>org.codehaus.groovy</groupId>\n        <artifactId>groovy</artifactId>\n        <version>2.4.10</version>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <!--\n            使用Maven package时，如果指定了这个插件，打包会生成JAR文件，而不是WAR文件\n            启动Spring Boot是通过指定的BootApplication.main()来启动，所以使用JAR包直接运行\n         -->\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## Environment - application.yml\n\n[YAML](http://www.yaml.org/) (YAML Ain't Markup Language)，即“YAML 不是一种置标语言”，是所有编程语言的人性化数据序列化标准。\n\nYAML 是 JSON 的一个超集，也是一种方便的定义层次配置数据的格式。只要将 SnakeYAML 库放到 classpath 下，SpringApplication 就会自动支持 YAML，以作为 properties 的替换。\n\n简单来说，YAML 不像 xml 那样需要配置繁琐的标签和属性以及文档验证，也不像 properties 那样只有普通的 key/value。YAML 使用大纲的缩进表现形式，让配置项有明显的结构表示。\n\n```yaml\n# System configuration\nserver:\n    display-name: CRUD # 定义服务器的显示名称\n    port:\n        8888 # 定义可访问的端口，默认访问端口是8080\n        # 由于Spring Boot是内建Tomcat，所以没有了Tomcat的配置，取而代之的是在这里配置访问端口\n\n# Datasource & Thymeleaf configuration\nspring:\n    datasource:\n        driver-class-name: com.mysql.jdbc.Driver # 定义数据源使用的驱动类\n        username: root # 数据库用户\n        password: root # 数据库密码\n        url: jdbc:mysql://[server_address]:[port]/[schema_name] # 连接URL\n    thymeleaf: # 配置模板引擎\n        enabled: true # 开启模板引擎，默认true，这里配置其实可以不写这句\n        mode: HTML5 # 定义模板类型\n        encoding: utf-8 # 编码，不用多说了\n        content-type: text/html # 报文类型\n        cache:\n            false # 是否开启缓存，这里跟修改模板文件后自动部署有关\n            # 关闭之后如果对模板文件有修改，就会更新服务器上的文件\n        prefix: classpath:/templates/ # 访问前缀，默认是/template文件夹\n        suffix: .html # 访问后缀，可以改为其他的名称，默认就是.html\n    resources: # 资源文件绑定\n        static-locations: classpath:/static # 这里的配置可以使模板像调用本地文件一样调用到样式资源\n```\n\n## MyBatis - bean & mapping xml\n\nMyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生 Map 使用简单的 XML 或注解，将接口和 POJO 映射成数据库中的记录。\n\nMyBatis 相比 Hibernate，其可控性几乎是完全的，程序员可以通过 mapping 配置，使程序不用回炉重造就能支持多个数据库的连接，并且有效控制对数据的操作。\n\n本演示项目没有使用如 Druid、DBCP 等的数据库连接池工具，而是使用 Tomcat 数据库连接池，使用 Tomcat 连接池的配置相对简单，适合初学者入门（但为了数据库连接信息安全，更推荐使用 Druid）。对于使用数据库连接池的配置，会在今后撰文介绍。\n\n```java\n@SpringBootApplication\n@MapperScan(\"me.yuki.dao\")\npublic class BootApplication {\n\t@Bean\n\t@ConfigurationProperties(\"spring.datasource\")\n\tpublic DataSource getDataSource() {\n\t\treturn new org.apache.tomcat.jdbc.pool.DataSource();\n\t}\n\n\t@Bean\n    public SqlSessionFactory getSqlSessionFactory() throws Exception {\n    \tSqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();\n    \tsqlSessionFactory.setDataSource(getDataSource());\n    \tPathMatchingResourcePatternResolver resolver\n    \t                        = new PathMatchingResourcePatternResolver();\n    \tsqlSessionFactory.setMapperLocations(resolver.getResources(\"/mapper/*.xml\"));\n    \treturn sqlSessionFactory.getObject();\n    }\n\n\t@Bean\n\tpublic PlatformTransactionManager getTransactionManager() {\n\t\treturn new DataSourceTransactionManager(getDataSource());\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BootApplication.class, args);\n\t}\n}\n```\n\n### 数据源配置 - 代码分析\n\n#### 类注解\n\n```java\n@SpringBootApplication // 标记该类是Spring Boot启动类\n@MapperScan(\"me.yuki.dao\") // 配置mapper扫描器扫描的包位置\n```\n\n#### getDataSource()\n\n```java\n@Bean // 注册为DataSource Bean\n@ConfigurationProperties(\"spring.datasource\") // 从yml取得节点spring.datasource下的配置\npublic DataSource getDataSource() {\n    return new org.apache.tomcat.jdbc.pool.DataSource(); // 从Tomcat获取DataSource\n}\n```\n\n对应的 SpringFramework 配置如下（可能会有不同，参考的 xml 采用了 DBCP 配置数据源）\n\n```xml\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${spring.datasource.driver-class-name}\" />\n\t<property name=\"url\" value=\"${spring.datasource.url}\" />\n\t<property name=\"username\" value=\"${spring.datasource.username}\" />\n\t<property name=\"password\" value=\"${spring.datasource.password}\" />\n</bean>\n```\n\n#### getSqlSessionFactory()\n\n```java\n@Bean // 注册为SqlSessionFactory Bean\npublic SqlSessionFactory getSqlSessionFactory() throws Exception {\n    // <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();\n    // <property name=\"dataSource\" ref=\"dataSource\" />\n    sqlSessionFactory.setDataSource(getDataSource());\n    PathMatchingResourcePatternResolver resolver\n                            = new PathMatchingResourcePatternResolver();\n    // <property name=\"mapperLocations\" value=\"classpath*:/mapper/*.xml\" />\n    sqlSessionFactory.setMapperLocations(resolver.getResources(\"/mapper/*.xml\"));\n    return sqlSessionFactory.getObject();\n}\n```\n\n#### getTransactionManager()\n\n```java\n@Bean // 注册为PlatformTransactionManager Bean\npublic PlatformTransactionManager getTransactionManager() {\n    /*\n    <bean id=\"transactionManager\"\n            class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n       \t<property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n     */\n\treturn new DataSourceTransactionManager(getDataSource());\n}\n```\n\n### Mapping.xml\n\nMyBatis mapping 文件的配置与 SSM 的配置完全一样，只要把文件放到在 getSqlSessionFactory()中配置的 MapperLocation 文件夹之下，对应文件名匹配格式即可。\n","slug":"2017-05-16-SpringBootConfig","published":1,"updated":"2022-03-31T04:19:00.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9f0009vrip7sf09zf3","content":"<blockquote>\n<p>Spring Boot 其实可以不需要配置就能运行，但实际的实现过程中，我们还是需要给它写一些配置，准确的说，是给包含第三方依赖的环境编写配置。</p>\n</blockquote>\n<h2 id=\"Maven-pom-xml\"><a href=\"#Maven-pom-xml\" class=\"headerlink\" title=\"Maven - pom.xml\"></a>Maven - pom.xml</h2><p>根据相关文档说明，构建 Spring Boot 项目建议使用 Gradle，但不排斥 Maven 创建项目。</p>\n<p>在我的演示项目中，我使用了 Spring Boot + MyBatis + Thymeleaf 的环境。</p>\n<p>以下是使用 Maven 创建 Spring Boot 项目所用的 pom.xml 文件配置内容。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Spring Boot基础依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot JDBC 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring-MyBatis 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Thymeleaf 模板引擎支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MySQL 连接器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot 测试单元支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Restful 文档 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.restdocs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-restdocs-mockmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot 开发工具包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Groovy 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.groovy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>groovy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            使用Maven package时，如果指定了这个插件，打包会生成JAR文件，而不是WAR文件</span></span><br><span class=\"line\"><span class=\"comment\">            启动Spring Boot是通过指定的BootApplication.main()来启动，所以使用JAR包直接运行</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Environment-application-yml\"><a href=\"#Environment-application-yml\" class=\"headerlink\" title=\"Environment - application.yml\"></a>Environment - application.yml</h2><p><a href=\"http://www.yaml.org/\">YAML</a> (YAML Ain’t Markup Language)，即“YAML 不是一种置标语言”，是所有编程语言的人性化数据序列化标准。</p>\n<p>YAML 是 JSON 的一个超集，也是一种方便的定义层次配置数据的格式。只要将 SnakeYAML 库放到 classpath 下，SpringApplication 就会自动支持 YAML，以作为 properties 的替换。</p>\n<p>简单来说，YAML 不像 xml 那样需要配置繁琐的标签和属性以及文档验证，也不像 properties 那样只有普通的 key&#x2F;value。YAML 使用大纲的缩进表现形式，让配置项有明显的结构表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># System configuration</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">display-name:</span> <span class=\"string\">CRUD</span> <span class=\"comment\"># 定义服务器的显示名称</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">        <span class=\"number\">8888</span> <span class=\"comment\"># 定义可访问的端口，默认访问端口是8080</span></span><br><span class=\"line\">        <span class=\"comment\"># 由于Spring Boot是内建Tomcat，所以没有了Tomcat的配置，取而代之的是在这里配置访问端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Datasource &amp; Thymeleaf configuration</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span> <span class=\"comment\"># 定义数据源使用的驱动类</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">root</span> <span class=\"comment\"># 数据库用户</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">root</span> <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://[server_address]:[port]/[schema_name]</span> <span class=\"comment\"># 连接URL</span></span><br><span class=\"line\">    <span class=\"attr\">thymeleaf:</span> <span class=\"comment\"># 配置模板引擎</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 开启模板引擎，默认true，这里配置其实可以不写这句</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">HTML5</span> <span class=\"comment\"># 定义模板类型</span></span><br><span class=\"line\">        <span class=\"attr\">encoding:</span> <span class=\"string\">utf-8</span> <span class=\"comment\"># 编码，不用多说了</span></span><br><span class=\"line\">        <span class=\"attr\">content-type:</span> <span class=\"string\">text/html</span> <span class=\"comment\"># 报文类型</span></span><br><span class=\"line\">        <span class=\"attr\">cache:</span></span><br><span class=\"line\">            <span class=\"literal\">false</span> <span class=\"comment\"># 是否开启缓存，这里跟修改模板文件后自动部署有关</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭之后如果对模板文件有修改，就会更新服务器上的文件</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span> <span class=\"comment\"># 访问前缀，默认是/template文件夹</span></span><br><span class=\"line\">        <span class=\"attr\">suffix:</span> <span class=\"string\">.html</span> <span class=\"comment\"># 访问后缀，可以改为其他的名称，默认就是.html</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\"># 资源文件绑定</span></span><br><span class=\"line\">        <span class=\"attr\">static-locations:</span> <span class=\"string\">classpath:/static</span> <span class=\"comment\"># 这里的配置可以使模板像调用本地文件一样调用到样式资源</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MyBatis-bean-amp-mapping-xml\"><a href=\"#MyBatis-bean-amp-mapping-xml\" class=\"headerlink\" title=\"MyBatis - bean &amp; mapping xml\"></a>MyBatis - bean &amp; mapping xml</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生 Map 使用简单的 XML 或注解，将接口和 POJO 映射成数据库中的记录。</p>\n<p>MyBatis 相比 Hibernate，其可控性几乎是完全的，程序员可以通过 mapping 配置，使程序不用回炉重造就能支持多个数据库的连接，并且有效控制对数据的操作。</p>\n<p>本演示项目没有使用如 Druid、DBCP 等的数据库连接池工具，而是使用 Tomcat 数据库连接池，使用 Tomcat 连接池的配置相对简单，适合初学者入门（但为了数据库连接信息安全，更推荐使用 Druid）。对于使用数据库连接池的配置，会在今后撰文介绍。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;me.yuki.dao&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApplication</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.apache.tomcat.jdbc.pool.DataSource();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">getSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    \t<span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    \tsqlSessionFactory.setDataSource(getDataSource());</span><br><span class=\"line\">    \t<span class=\"type\">PathMatchingResourcePatternResolver</span> <span class=\"variable\">resolver</span></span><br><span class=\"line\">    \t                        <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PathMatchingResourcePatternResolver</span>();</span><br><span class=\"line\">    \tsqlSessionFactory.setMapperLocations(resolver.getResources(<span class=\"string\">&quot;/mapper/*.xml&quot;</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> sqlSessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title function_\">getTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>(getDataSource());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(BootApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据源配置-代码分析\"><a href=\"#数据源配置-代码分析\" class=\"headerlink\" title=\"数据源配置 - 代码分析\"></a>数据源配置 - 代码分析</h3><h4 id=\"类注解\"><a href=\"#类注解\" class=\"headerlink\" title=\"类注解\"></a>类注解</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span> <span class=\"comment\">// 标记该类是Spring Boot启动类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;me.yuki.dao&quot;)</span> <span class=\"comment\">// 配置mapper扫描器扫描的包位置</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getDataSource\"><a href=\"#getDataSource\" class=\"headerlink\" title=\"getDataSource()\"></a>getDataSource()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为DataSource Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class=\"comment\">// 从yml取得节点spring.datasource下的配置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.apache.tomcat.jdbc.pool.DataSource(); <span class=\"comment\">// 从Tomcat获取DataSource</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的 SpringFramework 配置如下（可能会有不同，参考的 xml 采用了 DBCP 配置数据源）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getSqlSessionFactory\"><a href=\"#getSqlSessionFactory\" class=\"headerlink\" title=\"getSqlSessionFactory()\"></a>getSqlSessionFactory()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为SqlSessionFactory Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">getSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    <span class=\"comment\">// &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span></span><br><span class=\"line\">    sqlSessionFactory.setDataSource(getDataSource());</span><br><span class=\"line\">    <span class=\"type\">PathMatchingResourcePatternResolver</span> <span class=\"variable\">resolver</span></span><br><span class=\"line\">                            <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PathMatchingResourcePatternResolver</span>();</span><br><span class=\"line\">    <span class=\"comment\">// &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/mapper/*.xml&quot; /&gt;</span></span><br><span class=\"line\">    sqlSessionFactory.setMapperLocations(resolver.getResources(<span class=\"string\">&quot;/mapper/*.xml&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqlSessionFactory.getObject();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getTransactionManager\"><a href=\"#getTransactionManager\" class=\"headerlink\" title=\"getTransactionManager()\"></a>getTransactionManager()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为PlatformTransactionManager Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title function_\">getTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;bean id=&quot;transactionManager&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>(getDataSource());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mapping-xml\"><a href=\"#Mapping-xml\" class=\"headerlink\" title=\"Mapping.xml\"></a>Mapping.xml</h3><p>MyBatis mapping 文件的配置与 SSM 的配置完全一样，只要把文件放到在 getSqlSessionFactory()中配置的 MapperLocation 文件夹之下，对应文件名匹配格式即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Spring Boot 其实可以不需要配置就能运行，但实际的实现过程中，我们还是需要给它写一些配置，准确的说，是给包含第三方依赖的环境编写配置。</p>\n</blockquote>\n<h2 id=\"Maven-pom-xml\"><a href=\"#Maven-pom-xml\" class=\"headerlink\" title=\"Maven - pom.xml\"></a>Maven - pom.xml</h2><p>根据相关文档说明，构建 Spring Boot 项目建议使用 Gradle，但不排斥 Maven 创建项目。</p>\n<p>在我的演示项目中，我使用了 Spring Boot + MyBatis + Thymeleaf 的环境。</p>\n<p>以下是使用 Maven 创建 Spring Boot 项目所用的 pom.xml 文件配置内容。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Spring Boot基础依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot JDBC 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring-MyBatis 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Thymeleaf 模板引擎支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MySQL 连接器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot 测试单元支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Restful 文档 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.restdocs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-restdocs-mockmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring Boot 开发工具包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Groovy 支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.groovy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>groovy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            使用Maven package时，如果指定了这个插件，打包会生成JAR文件，而不是WAR文件</span></span><br><span class=\"line\"><span class=\"comment\">            启动Spring Boot是通过指定的BootApplication.main()来启动，所以使用JAR包直接运行</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Environment-application-yml\"><a href=\"#Environment-application-yml\" class=\"headerlink\" title=\"Environment - application.yml\"></a>Environment - application.yml</h2><p><a href=\"http://www.yaml.org/\">YAML</a> (YAML Ain’t Markup Language)，即“YAML 不是一种置标语言”，是所有编程语言的人性化数据序列化标准。</p>\n<p>YAML 是 JSON 的一个超集，也是一种方便的定义层次配置数据的格式。只要将 SnakeYAML 库放到 classpath 下，SpringApplication 就会自动支持 YAML，以作为 properties 的替换。</p>\n<p>简单来说，YAML 不像 xml 那样需要配置繁琐的标签和属性以及文档验证，也不像 properties 那样只有普通的 key&#x2F;value。YAML 使用大纲的缩进表现形式，让配置项有明显的结构表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># System configuration</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">display-name:</span> <span class=\"string\">CRUD</span> <span class=\"comment\"># 定义服务器的显示名称</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span></span><br><span class=\"line\">        <span class=\"number\">8888</span> <span class=\"comment\"># 定义可访问的端口，默认访问端口是8080</span></span><br><span class=\"line\">        <span class=\"comment\"># 由于Spring Boot是内建Tomcat，所以没有了Tomcat的配置，取而代之的是在这里配置访问端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Datasource &amp; Thymeleaf configuration</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span> <span class=\"comment\"># 定义数据源使用的驱动类</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">root</span> <span class=\"comment\"># 数据库用户</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">root</span> <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://[server_address]:[port]/[schema_name]</span> <span class=\"comment\"># 连接URL</span></span><br><span class=\"line\">    <span class=\"attr\">thymeleaf:</span> <span class=\"comment\"># 配置模板引擎</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 开启模板引擎，默认true，这里配置其实可以不写这句</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"string\">HTML5</span> <span class=\"comment\"># 定义模板类型</span></span><br><span class=\"line\">        <span class=\"attr\">encoding:</span> <span class=\"string\">utf-8</span> <span class=\"comment\"># 编码，不用多说了</span></span><br><span class=\"line\">        <span class=\"attr\">content-type:</span> <span class=\"string\">text/html</span> <span class=\"comment\"># 报文类型</span></span><br><span class=\"line\">        <span class=\"attr\">cache:</span></span><br><span class=\"line\">            <span class=\"literal\">false</span> <span class=\"comment\"># 是否开启缓存，这里跟修改模板文件后自动部署有关</span></span><br><span class=\"line\">            <span class=\"comment\"># 关闭之后如果对模板文件有修改，就会更新服务器上的文件</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">classpath:/templates/</span> <span class=\"comment\"># 访问前缀，默认是/template文件夹</span></span><br><span class=\"line\">        <span class=\"attr\">suffix:</span> <span class=\"string\">.html</span> <span class=\"comment\"># 访问后缀，可以改为其他的名称，默认就是.html</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\"># 资源文件绑定</span></span><br><span class=\"line\">        <span class=\"attr\">static-locations:</span> <span class=\"string\">classpath:/static</span> <span class=\"comment\"># 这里的配置可以使模板像调用本地文件一样调用到样式资源</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MyBatis-bean-amp-mapping-xml\"><a href=\"#MyBatis-bean-amp-mapping-xml\" class=\"headerlink\" title=\"MyBatis - bean &amp; mapping xml\"></a>MyBatis - bean &amp; mapping xml</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生 Map 使用简单的 XML 或注解，将接口和 POJO 映射成数据库中的记录。</p>\n<p>MyBatis 相比 Hibernate，其可控性几乎是完全的，程序员可以通过 mapping 配置，使程序不用回炉重造就能支持多个数据库的连接，并且有效控制对数据的操作。</p>\n<p>本演示项目没有使用如 Druid、DBCP 等的数据库连接池工具，而是使用 Tomcat 数据库连接池，使用 Tomcat 连接池的配置相对简单，适合初学者入门（但为了数据库连接信息安全，更推荐使用 Druid）。对于使用数据库连接池的配置，会在今后撰文介绍。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;me.yuki.dao&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BootApplication</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.apache.tomcat.jdbc.pool.DataSource();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">getSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    \t<span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    \tsqlSessionFactory.setDataSource(getDataSource());</span><br><span class=\"line\">    \t<span class=\"type\">PathMatchingResourcePatternResolver</span> <span class=\"variable\">resolver</span></span><br><span class=\"line\">    \t                        <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PathMatchingResourcePatternResolver</span>();</span><br><span class=\"line\">    \tsqlSessionFactory.setMapperLocations(resolver.getResources(<span class=\"string\">&quot;/mapper/*.xml&quot;</span>));</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> sqlSessionFactory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title function_\">getTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>(getDataSource());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSpringApplication.run(BootApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据源配置-代码分析\"><a href=\"#数据源配置-代码分析\" class=\"headerlink\" title=\"数据源配置 - 代码分析\"></a>数据源配置 - 代码分析</h3><h4 id=\"类注解\"><a href=\"#类注解\" class=\"headerlink\" title=\"类注解\"></a>类注解</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span> <span class=\"comment\">// 标记该类是Spring Boot启动类</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;me.yuki.dao&quot;)</span> <span class=\"comment\">// 配置mapper扫描器扫描的包位置</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getDataSource\"><a href=\"#getDataSource\" class=\"headerlink\" title=\"getDataSource()\"></a>getDataSource()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为DataSource Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class=\"comment\">// 从yml取得节点spring.datasource下的配置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">org</span>.apache.tomcat.jdbc.pool.DataSource(); <span class=\"comment\">// 从Tomcat获取DataSource</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的 SpringFramework 配置如下（可能会有不同，参考的 xml 采用了 DBCP 配置数据源）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.url&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.username&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;spring.datasource.password&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getSqlSessionFactory\"><a href=\"#getSqlSessionFactory\" class=\"headerlink\" title=\"getSqlSessionFactory()\"></a>getSqlSessionFactory()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为SqlSessionFactory Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">getSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"type\">SqlSessionFactoryBean</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBean</span>();</span><br><span class=\"line\">    <span class=\"comment\">// &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span></span><br><span class=\"line\">    sqlSessionFactory.setDataSource(getDataSource());</span><br><span class=\"line\">    <span class=\"type\">PathMatchingResourcePatternResolver</span> <span class=\"variable\">resolver</span></span><br><span class=\"line\">                            <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PathMatchingResourcePatternResolver</span>();</span><br><span class=\"line\">    <span class=\"comment\">// &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/mapper/*.xml&quot; /&gt;</span></span><br><span class=\"line\">    sqlSessionFactory.setMapperLocations(resolver.getResources(<span class=\"string\">&quot;/mapper/*.xml&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqlSessionFactory.getObject();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getTransactionManager\"><a href=\"#getTransactionManager\" class=\"headerlink\" title=\"getTransactionManager()\"></a>getTransactionManager()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> <span class=\"comment\">// 注册为PlatformTransactionManager Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title function_\">getTransactionManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;bean id=&quot;transactionManager&quot;</span></span><br><span class=\"line\"><span class=\"comment\">            class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       \t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceTransactionManager</span>(getDataSource());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mapping-xml\"><a href=\"#Mapping-xml\" class=\"headerlink\" title=\"Mapping.xml\"></a>Mapping.xml</h3><p>MyBatis mapping 文件的配置与 SSM 的配置完全一样，只要把文件放到在 getSqlSessionFactory()中配置的 MapperLocation 文件夹之下，对应文件名匹配格式即可。</p>\n"},{"title":"Bean的生命周期","date":"2017-06-28T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 记录有关Spring Bean生命周期的过程\n\n## 生命周期过程描述\n\n大致的 Bean 生命周期可以描述为如下过程：\n\n#### 创建\n\n1. 实例化\n\n2. 设置属性值\n\n3. 调用 BeanPostProcessor 的预初始化方法\n\n4. 调用 InitializingBean 的 afterPropertiesSet()方法\n\n5. 调用定制的初始化方法\n\n6. 调用 BeanPostProcessor 的后初始化方法\n\n7. 完成实例化，Bean 可以使用\n\n#### 关闭\n\n8. 调用 DisposableBean 的 destroy()方法\n\n9. 调用定制的销毁方法\n\n## 相关内容\n\n### Bean 实例化和生命周期行为控制\n\nBean 实例化可以通过构造器、静态工厂、实例工厂三种方式进行实例化。\n\n有三种方式可以控制 Bean 生命周期行为：\n\n-   InitializingBean & DisposableBean\n\n-   init() & destroy()\n\n-   @PostConstruct & @PreDestroy\n\n### BeanPostProcessor\n\n如果我们需要在 Spring 容器完成 Bean 的实例化、配置和其他的初始化前后添加一些自己的逻辑处理，我们就可以定义一个或者多个 BeanPostProcessor 接口的实现，然后注册到容器中。\n\n在 BeanPostProcessor 中，我们可以通过实现\n\n-   public Object postProcessAfterInitialization(Object bean, String arg) throws BeansException\n\n和\n\n-   public Object postProcessBeforeInitialization(Object bean, String arg1) throws BeansException\n\n来执行 Bean 创建前后的动作\n","source":"_posts/2017-06-28-AboutBeanLifecycle.md","raw":"---\ntitle: Bean的生命周期\ndate: 2017-06-28 12:00:00\ncategories:\n    - guide\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n> 记录有关Spring Bean生命周期的过程\n\n## 生命周期过程描述\n\n大致的 Bean 生命周期可以描述为如下过程：\n\n#### 创建\n\n1. 实例化\n\n2. 设置属性值\n\n3. 调用 BeanPostProcessor 的预初始化方法\n\n4. 调用 InitializingBean 的 afterPropertiesSet()方法\n\n5. 调用定制的初始化方法\n\n6. 调用 BeanPostProcessor 的后初始化方法\n\n7. 完成实例化，Bean 可以使用\n\n#### 关闭\n\n8. 调用 DisposableBean 的 destroy()方法\n\n9. 调用定制的销毁方法\n\n## 相关内容\n\n### Bean 实例化和生命周期行为控制\n\nBean 实例化可以通过构造器、静态工厂、实例工厂三种方式进行实例化。\n\n有三种方式可以控制 Bean 生命周期行为：\n\n-   InitializingBean & DisposableBean\n\n-   init() & destroy()\n\n-   @PostConstruct & @PreDestroy\n\n### BeanPostProcessor\n\n如果我们需要在 Spring 容器完成 Bean 的实例化、配置和其他的初始化前后添加一些自己的逻辑处理，我们就可以定义一个或者多个 BeanPostProcessor 接口的实现，然后注册到容器中。\n\n在 BeanPostProcessor 中，我们可以通过实现\n\n-   public Object postProcessAfterInitialization(Object bean, String arg) throws BeansException\n\n和\n\n-   public Object postProcessBeforeInitialization(Object bean, String arg1) throws BeansException\n\n来执行 Bean 创建前后的动作\n","slug":"2017-06-28-AboutBeanLifecycle","published":1,"updated":"2022-03-31T04:21:12.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9g000bvripbqio2tl3","content":"<blockquote>\n<p>记录有关Spring Bean生命周期的过程</p>\n</blockquote>\n<h2 id=\"生命周期过程描述\"><a href=\"#生命周期过程描述\" class=\"headerlink\" title=\"生命周期过程描述\"></a>生命周期过程描述</h2><p>大致的 Bean 生命周期可以描述为如下过程：</p>\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><ol>\n<li><p>实例化</p>\n</li>\n<li><p>设置属性值</p>\n</li>\n<li><p>调用 BeanPostProcessor 的预初始化方法</p>\n</li>\n<li><p>调用 InitializingBean 的 afterPropertiesSet()方法</p>\n</li>\n<li><p>调用定制的初始化方法</p>\n</li>\n<li><p>调用 BeanPostProcessor 的后初始化方法</p>\n</li>\n<li><p>完成实例化，Bean 可以使用</p>\n</li>\n</ol>\n<h4 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h4><ol start=\"8\">\n<li><p>调用 DisposableBean 的 destroy()方法</p>\n</li>\n<li><p>调用定制的销毁方法</p>\n</li>\n</ol>\n<h2 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h2><h3 id=\"Bean-实例化和生命周期行为控制\"><a href=\"#Bean-实例化和生命周期行为控制\" class=\"headerlink\" title=\"Bean 实例化和生命周期行为控制\"></a>Bean 实例化和生命周期行为控制</h3><p>Bean 实例化可以通过构造器、静态工厂、实例工厂三种方式进行实例化。</p>\n<p>有三种方式可以控制 Bean 生命周期行为：</p>\n<ul>\n<li><p>InitializingBean &amp; DisposableBean</p>\n</li>\n<li><p>init() &amp; destroy()</p>\n</li>\n<li><p>@PostConstruct &amp; @PreDestroy</p>\n</li>\n</ul>\n<h3 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a>BeanPostProcessor</h3><p>如果我们需要在 Spring 容器完成 Bean 的实例化、配置和其他的初始化前后添加一些自己的逻辑处理，我们就可以定义一个或者多个 BeanPostProcessor 接口的实现，然后注册到容器中。</p>\n<p>在 BeanPostProcessor 中，我们可以通过实现</p>\n<ul>\n<li>public Object postProcessAfterInitialization(Object bean, String arg) throws BeansException</li>\n</ul>\n<p>和</p>\n<ul>\n<li>public Object postProcessBeforeInitialization(Object bean, String arg1) throws BeansException</li>\n</ul>\n<p>来执行 Bean 创建前后的动作</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录有关Spring Bean生命周期的过程</p>\n</blockquote>\n<h2 id=\"生命周期过程描述\"><a href=\"#生命周期过程描述\" class=\"headerlink\" title=\"生命周期过程描述\"></a>生命周期过程描述</h2><p>大致的 Bean 生命周期可以描述为如下过程：</p>\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><ol>\n<li><p>实例化</p>\n</li>\n<li><p>设置属性值</p>\n</li>\n<li><p>调用 BeanPostProcessor 的预初始化方法</p>\n</li>\n<li><p>调用 InitializingBean 的 afterPropertiesSet()方法</p>\n</li>\n<li><p>调用定制的初始化方法</p>\n</li>\n<li><p>调用 BeanPostProcessor 的后初始化方法</p>\n</li>\n<li><p>完成实例化，Bean 可以使用</p>\n</li>\n</ol>\n<h4 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h4><ol start=\"8\">\n<li><p>调用 DisposableBean 的 destroy()方法</p>\n</li>\n<li><p>调用定制的销毁方法</p>\n</li>\n</ol>\n<h2 id=\"相关内容\"><a href=\"#相关内容\" class=\"headerlink\" title=\"相关内容\"></a>相关内容</h2><h3 id=\"Bean-实例化和生命周期行为控制\"><a href=\"#Bean-实例化和生命周期行为控制\" class=\"headerlink\" title=\"Bean 实例化和生命周期行为控制\"></a>Bean 实例化和生命周期行为控制</h3><p>Bean 实例化可以通过构造器、静态工厂、实例工厂三种方式进行实例化。</p>\n<p>有三种方式可以控制 Bean 生命周期行为：</p>\n<ul>\n<li><p>InitializingBean &amp; DisposableBean</p>\n</li>\n<li><p>init() &amp; destroy()</p>\n</li>\n<li><p>@PostConstruct &amp; @PreDestroy</p>\n</li>\n</ul>\n<h3 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a>BeanPostProcessor</h3><p>如果我们需要在 Spring 容器完成 Bean 的实例化、配置和其他的初始化前后添加一些自己的逻辑处理，我们就可以定义一个或者多个 BeanPostProcessor 接口的实现，然后注册到容器中。</p>\n<p>在 BeanPostProcessor 中，我们可以通过实现</p>\n<ul>\n<li>public Object postProcessAfterInitialization(Object bean, String arg) throws BeansException</li>\n</ul>\n<p>和</p>\n<ul>\n<li>public Object postProcessBeforeInitialization(Object bean, String arg1) throws BeansException</li>\n</ul>\n<p>来执行 Bean 创建前后的动作</p>\n"},{"title":"Red-bot function mlborder","date":"2017-09-14T05:00:00.000Z","mp3":null,"cover":null,"_content":"\n# Code\n\n```python\n@commands.command()\nasync def mlborder(self, event_code: int = None):\n    # Catch current ranking points. Need event code.\n    if event_code is not None:\n        url = \"http://mlborder.com/events/{}/\".format(event_code)\n        document = pq(url)\n        title = document('title').text()\n        body = document('body')\n        border_div = pq(body('.tab-pane')[0])('div')\n        data_react_props = border_div.html()\n\n        original_data = data_react_props[data_react_props.index('{'):data_react_props.rindex('}') + 1]\n        prepare_json = original_data.replace('&quot;', '\"')\n        json_data = json.loads(prepare_json)\n\n        event_name = title[title.index('『') + 1:title.rindex('』')]\n        event_info = document('.list-group-item').text()\n\n        ending_time = event_info[event_info.index('〜') + 1:event_info.rindex(',')]\n        ending_timestamp = time.mktime(time.strptime(ending_time, '%Y/%m/%d %H:%M'))\n        current_timestamp = time.time()\n        left_or_passed_time = ''\n        if current_timestamp < ending_timestamp:\n            left_timestamp = ending_timestamp - current_timestamp\n            left_or_passed_time += 'あと　'\n            left_or_passed_time += time.strftime('%d', time.localtime(left_timestamp))\n            left_or_passed_time += '日'\n            left_or_passed_time += time.strftime('%H:%M:%S', time.localtime(left_timestamp))\n        else:\n            pass_timestamp = current_timestamp - ending_timestamp\n            left_or_passed_time += time.strftime('%d', time.localtime(pass_timestamp))\n            left_or_passed_time += '日'\n            left_or_passed_time += time.strftime('%H:%M:%S', time.localtime(pass_timestamp))\n            left_or_passed_time += '　過ごしだ'\n        border_summary = json_data['border_summary']\n        now = (datetime.datetime.fromtimestamp(current_timestamp) + datetime.timedelta(hours=1)).strftime('%Y/%m/%d %H:%M:%S')\n        borders = border_summary['borders']\n\n        msg = '\\n'.join([f'{event_name}\\n{event_info}\\n{left_or_passed_time}\\n\\n{now}',\n                         f\"1位：\\t\\t{borders['1']:,}\",\n                         f\"10位：\\t\\t{borders['10']:,}\",\n                         f\"100位：\\t\\t{borders['100']:,}\",\n                         f\"500位：\\t\\t{borders['500']:,}\",\n                         f\"1200位：\\t\\t{borders['1200']:,}\",\n                         f\"1300位：\\t\\t{borders['1300']:,}\"])\n\n        await self.bot.say(msg)\n    else:\n        await self.bot.say(\"mlborder need an event code.\")\n```\n","source":"_posts/2017-09-14-MlBorderFunction.md","raw":"---\ntitle: Red-bot function mlborder\ndate: 2017-09-14 13:00:00\ncategories:\n    - guide\ntags:\n    - Python\n    - Discord\n    - Discord Bot\nmp3:\ncover:\n---\n\n# Code\n\n```python\n@commands.command()\nasync def mlborder(self, event_code: int = None):\n    # Catch current ranking points. Need event code.\n    if event_code is not None:\n        url = \"http://mlborder.com/events/{}/\".format(event_code)\n        document = pq(url)\n        title = document('title').text()\n        body = document('body')\n        border_div = pq(body('.tab-pane')[0])('div')\n        data_react_props = border_div.html()\n\n        original_data = data_react_props[data_react_props.index('{'):data_react_props.rindex('}') + 1]\n        prepare_json = original_data.replace('&quot;', '\"')\n        json_data = json.loads(prepare_json)\n\n        event_name = title[title.index('『') + 1:title.rindex('』')]\n        event_info = document('.list-group-item').text()\n\n        ending_time = event_info[event_info.index('〜') + 1:event_info.rindex(',')]\n        ending_timestamp = time.mktime(time.strptime(ending_time, '%Y/%m/%d %H:%M'))\n        current_timestamp = time.time()\n        left_or_passed_time = ''\n        if current_timestamp < ending_timestamp:\n            left_timestamp = ending_timestamp - current_timestamp\n            left_or_passed_time += 'あと　'\n            left_or_passed_time += time.strftime('%d', time.localtime(left_timestamp))\n            left_or_passed_time += '日'\n            left_or_passed_time += time.strftime('%H:%M:%S', time.localtime(left_timestamp))\n        else:\n            pass_timestamp = current_timestamp - ending_timestamp\n            left_or_passed_time += time.strftime('%d', time.localtime(pass_timestamp))\n            left_or_passed_time += '日'\n            left_or_passed_time += time.strftime('%H:%M:%S', time.localtime(pass_timestamp))\n            left_or_passed_time += '　過ごしだ'\n        border_summary = json_data['border_summary']\n        now = (datetime.datetime.fromtimestamp(current_timestamp) + datetime.timedelta(hours=1)).strftime('%Y/%m/%d %H:%M:%S')\n        borders = border_summary['borders']\n\n        msg = '\\n'.join([f'{event_name}\\n{event_info}\\n{left_or_passed_time}\\n\\n{now}',\n                         f\"1位：\\t\\t{borders['1']:,}\",\n                         f\"10位：\\t\\t{borders['10']:,}\",\n                         f\"100位：\\t\\t{borders['100']:,}\",\n                         f\"500位：\\t\\t{borders['500']:,}\",\n                         f\"1200位：\\t\\t{borders['1200']:,}\",\n                         f\"1300位：\\t\\t{borders['1300']:,}\"])\n\n        await self.bot.say(msg)\n    else:\n        await self.bot.say(\"mlborder need an event code.\")\n```\n","slug":"2017-09-14-MlBorderFunction","published":1,"updated":"2022-03-31T04:36:31.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9h000fvripc9lyeg5k","content":"<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@commands.command()</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">mlborder</span>(<span class=\"params\">self, event_code: <span class=\"built_in\">int</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># Catch current ranking points. Need event code.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event_code <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://mlborder.com/events/&#123;&#125;/&quot;</span>.<span class=\"built_in\">format</span>(event_code)</span><br><span class=\"line\">        document = pq(url)</span><br><span class=\"line\">        title = document(<span class=\"string\">&#x27;title&#x27;</span>).text()</span><br><span class=\"line\">        body = document(<span class=\"string\">&#x27;body&#x27;</span>)</span><br><span class=\"line\">        border_div = pq(body(<span class=\"string\">&#x27;.tab-pane&#x27;</span>)[<span class=\"number\">0</span>])(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">        data_react_props = border_div.html()</span><br><span class=\"line\"></span><br><span class=\"line\">        original_data = data_react_props[data_react_props.index(<span class=\"string\">&#x27;&#123;&#x27;</span>):data_react_props.rindex(<span class=\"string\">&#x27;&#125;&#x27;</span>) + <span class=\"number\">1</span>]</span><br><span class=\"line\">        prepare_json = original_data.replace(<span class=\"string\">&#x27;&amp;quot;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>)</span><br><span class=\"line\">        json_data = json.loads(prepare_json)</span><br><span class=\"line\"></span><br><span class=\"line\">        event_name = title[title.index(<span class=\"string\">&#x27;『&#x27;</span>) + <span class=\"number\">1</span>:title.rindex(<span class=\"string\">&#x27;』&#x27;</span>)]</span><br><span class=\"line\">        event_info = document(<span class=\"string\">&#x27;.list-group-item&#x27;</span>).text()</span><br><span class=\"line\"></span><br><span class=\"line\">        ending_time = event_info[event_info.index(<span class=\"string\">&#x27;〜&#x27;</span>) + <span class=\"number\">1</span>:event_info.rindex(<span class=\"string\">&#x27;,&#x27;</span>)]</span><br><span class=\"line\">        ending_timestamp = time.mktime(time.strptime(ending_time, <span class=\"string\">&#x27;%Y/%m/%d %H:%M&#x27;</span>))</span><br><span class=\"line\">        current_timestamp = time.time()</span><br><span class=\"line\">        left_or_passed_time = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> current_timestamp &lt; ending_timestamp:</span><br><span class=\"line\">            left_timestamp = ending_timestamp - current_timestamp</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;あと　&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%d&#x27;</span>, time.localtime(left_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;日&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime(left_timestamp))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            pass_timestamp = current_timestamp - ending_timestamp</span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%d&#x27;</span>, time.localtime(pass_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;日&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime(pass_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;　過ごしだ&#x27;</span></span><br><span class=\"line\">        border_summary = json_data[<span class=\"string\">&#x27;border_summary&#x27;</span>]</span><br><span class=\"line\">        now = (datetime.datetime.fromtimestamp(current_timestamp) + datetime.timedelta(hours=<span class=\"number\">1</span>)).strftime(<span class=\"string\">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">        borders = border_summary[<span class=\"string\">&#x27;borders&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        msg = <span class=\"string\">&#x27;\\n&#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;event_name&#125;</span>\\n<span class=\"subst\">&#123;event_info&#125;</span>\\n<span class=\"subst\">&#123;left_or_passed_time&#125;</span>\\n\\n<span class=\"subst\">&#123;now&#125;</span>&#x27;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;10位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;10&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;100位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;100&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;500位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;500&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1200位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1200&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1300位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1300&#x27;</span>]:,&#125;</span>&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> self.bot.say(msg)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> self.bot.say(<span class=\"string\">&quot;mlborder need an event code.&quot;</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@commands.command()</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">mlborder</span>(<span class=\"params\">self, event_code: <span class=\"built_in\">int</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># Catch current ranking points. Need event code.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> event_code <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://mlborder.com/events/&#123;&#125;/&quot;</span>.<span class=\"built_in\">format</span>(event_code)</span><br><span class=\"line\">        document = pq(url)</span><br><span class=\"line\">        title = document(<span class=\"string\">&#x27;title&#x27;</span>).text()</span><br><span class=\"line\">        body = document(<span class=\"string\">&#x27;body&#x27;</span>)</span><br><span class=\"line\">        border_div = pq(body(<span class=\"string\">&#x27;.tab-pane&#x27;</span>)[<span class=\"number\">0</span>])(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">        data_react_props = border_div.html()</span><br><span class=\"line\"></span><br><span class=\"line\">        original_data = data_react_props[data_react_props.index(<span class=\"string\">&#x27;&#123;&#x27;</span>):data_react_props.rindex(<span class=\"string\">&#x27;&#125;&#x27;</span>) + <span class=\"number\">1</span>]</span><br><span class=\"line\">        prepare_json = original_data.replace(<span class=\"string\">&#x27;&amp;quot;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>)</span><br><span class=\"line\">        json_data = json.loads(prepare_json)</span><br><span class=\"line\"></span><br><span class=\"line\">        event_name = title[title.index(<span class=\"string\">&#x27;『&#x27;</span>) + <span class=\"number\">1</span>:title.rindex(<span class=\"string\">&#x27;』&#x27;</span>)]</span><br><span class=\"line\">        event_info = document(<span class=\"string\">&#x27;.list-group-item&#x27;</span>).text()</span><br><span class=\"line\"></span><br><span class=\"line\">        ending_time = event_info[event_info.index(<span class=\"string\">&#x27;〜&#x27;</span>) + <span class=\"number\">1</span>:event_info.rindex(<span class=\"string\">&#x27;,&#x27;</span>)]</span><br><span class=\"line\">        ending_timestamp = time.mktime(time.strptime(ending_time, <span class=\"string\">&#x27;%Y/%m/%d %H:%M&#x27;</span>))</span><br><span class=\"line\">        current_timestamp = time.time()</span><br><span class=\"line\">        left_or_passed_time = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> current_timestamp &lt; ending_timestamp:</span><br><span class=\"line\">            left_timestamp = ending_timestamp - current_timestamp</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;あと　&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%d&#x27;</span>, time.localtime(left_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;日&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime(left_timestamp))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            pass_timestamp = current_timestamp - ending_timestamp</span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%d&#x27;</span>, time.localtime(pass_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;日&#x27;</span></span><br><span class=\"line\">            left_or_passed_time += time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>, time.localtime(pass_timestamp))</span><br><span class=\"line\">            left_or_passed_time += <span class=\"string\">&#x27;　過ごしだ&#x27;</span></span><br><span class=\"line\">        border_summary = json_data[<span class=\"string\">&#x27;border_summary&#x27;</span>]</span><br><span class=\"line\">        now = (datetime.datetime.fromtimestamp(current_timestamp) + datetime.timedelta(hours=<span class=\"number\">1</span>)).strftime(<span class=\"string\">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br><span class=\"line\">        borders = border_summary[<span class=\"string\">&#x27;borders&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        msg = <span class=\"string\">&#x27;\\n&#x27;</span>.join([<span class=\"string\">f&#x27;<span class=\"subst\">&#123;event_name&#125;</span>\\n<span class=\"subst\">&#123;event_info&#125;</span>\\n<span class=\"subst\">&#123;left_or_passed_time&#125;</span>\\n\\n<span class=\"subst\">&#123;now&#125;</span>&#x27;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;10位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;10&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;100位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;100&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;500位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;500&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1200位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1200&#x27;</span>]:,&#125;</span>&quot;</span>,</span><br><span class=\"line\">                         <span class=\"string\">f&quot;1300位：\\t\\t<span class=\"subst\">&#123;borders[<span class=\"string\">&#x27;1300&#x27;</span>]:,&#125;</span>&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> self.bot.say(msg)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> self.bot.say(<span class=\"string\">&quot;mlborder need an event code.&quot;</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"CodErator开发笔记","date":"2017-06-03T05:00:00.000Z","mp3":null,"cover":null,"_content":"\n> CodErator 取自 Code Generator，这么一结合，既有代码生成器的含义，又有代码操作者的意味，亦或是更多的含义。既然定位在轻量级代码生成工具，只要能完成任务，就是最好的了。\n\n## 关于项目的启发\n\n这个项目在建立之前，我有一段时间用过 CodeSmith 试用版，也写了两个使用 CodeSmith 生成 JavaEE 主流框架代码的模板（参见[SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator)，另一个尚未发布）。但众所周知，CodeSmith 可不是个亲近的家伙，收费，且新版（ver.7.1）不能使用 Visual Studio 编写模板（它自建了一个 Template Editor），所以 CodeSmith 使用成本就这么摆在这里了。\n\n既然我想完成一个简单的代码生成工作，又不想专门为你出这个钱，而且你又把部分 DLL 的代码公布了，那我不如自己写一个轻便的生成工具，只要能完成工作就好了呗。就是这样的想法，促成了这个项目的产生。\n\n## 开发设计\n\n老实说，这个项目因为还有另一个目的，就是课程设计，花在这个项目初始版本上的时间就显得比较紧，所以并没有什么设计。\n\n稍微对我过去开发的情况做了个估计，这个项目姑且算是利用 Build and Fix Model 完成开发，仅有一个思想驱使项目进程的发展：\n\n> 我需要读到元数据，然后利用元数据封装成对象，通过模板引擎传送到模板文件最后生成目标代码。\n\n### 然而。。。\n\n最后却转变成了，通过对生成代码的操作流程去编写功能，而在此基础上对每一个流程可能会出现的误操作做出相应的限制动作，使得流程变得线性化，间接体现出易用性。\n\n### 所以！\n\n通过对流程的分析，可以知道使用者需要做的事情能够拆分成如下的动作：\n\n1. 连接到数据库，获取库下的 table 列表\n\n2. 使用者可以点击单个 table 列表项查看该表将要被生成的字段内容，此举是为了解决 CodeSmith 的某些“缺陷”，即你能看到 schemas 和 tables，但你看不到 columns\n\n3. 使用者在 table 列表中选择想要生成的一或多张表\n\n4. 使用者选择生成目标代码的语言和想要生成的层面\n\n5. 选择输出位置，开始生成\n\n## 设计中出现的需求\n\n既然提取出了“生成代码”用例的概要动作，那么就要对这些动作需要哪些技术、功能等进行分析：\n\n1. 连接到任意的数据库，收集连接数据（但不允许持久化这些连接数据）\n\n2. 获取 tables 和相应 table 的 columns\n\n3. 收集生成选项\n\n4. 封装查找到的 Table 和 Columns\n\n5. 使用模板文件去生成代码而不是硬编码到源代码中去生成\n\n## 对于上述设计和需求，我采用了以下支持\n\n-   既然是连接到数据库，那么我就加入 MySQL 和 SQL Server 的支持吧，反正使用 Oracle 的程序猿不一定会用轻量级代码生成器的吧\n\n-   模板，就你了，Razor Engine\n\n-   界面？WinForm 咯，今后再移植 WPF 吧\n\n-   其他的？那还真没有什么技术可言了，就只是普通 C#而已\n\n单独拿模板出来说一下事。我在考虑模板使用的时候，考虑过以下四种模板：\n\n1. CodeSmith 的 cst\n\n2. T4 文本模板（Text Template Transformation Toolkit）\n\n3. NVelocity（Velocity 的.Net 版）\n\n4. Razor Engine\n\ncst 自然不用说，结合 CodeSmith 的 SchemaExplorer，可以省略复杂的客户端操作，直接在模板内声明几个参数然后在客户端给参数赋值，就可以完成生成。问题来了，CodeSmith 本身是收费软件，调用他们的 DLL 很容易，可是会给你跳出个他们家的产品注册窗口，这就很哭笑不得了。\n\nT4 文本模板，是微软自家的代码生成文本模板，原本在我看来是个比较好的模板，而且写起来跟写 cst 没什么差别，但问题是，T4 文本模板本身就是一个可运行的“class”，这就显得代码不可控了，用户侧可能就会出现各种各样的问题。\n\nNVelocity，其实就是 Velocity，只不过有人把它.Net 化了。不过这个扩展据我查找的资料，大多文章的发布年是在 2011 年和 2013 年，而该项目本身停留在了 0.4.2 版，发布日期还是 2003 年 10 月。想想现在 Velocity 都什么版本了，天差地别了吧。\n\nRazor Engine，直到 2016 年还在维护的.Net 模板引擎。它的工作方式更像我所熟知的 Java Controller 传递对象到 jsp 等模板的方式，而且它是非侵入式的模板引擎，想用即可，几乎不需要任何配置，而且测试方便。\n\nRazor Engine 的基本工作方式可以描述为如下的流程。首先，程序从文本读取到 cshtml 模板文件的内容，将这些内容保存到 string 类型的变量中，然后只需要通过：\n\n```groovy\nEngine.Razor.RunCompile(template, unique_name, [modelType], model)\n```\n\n这个方法，让引擎获取模板内容和 model 数据，自动替换模板内容内占位符对应的 model 信息，最后返回结果字符串。\n\n## 程序使用过程中可能会出现的搞事操作与处理办法\n\n1. 没有连接数据库就执行生成：检测到连接数据不完善，立即终止操作并弹出提示。\n\n2. 没有选择表：很少会出现的错误吧，真的出现的话就终止操作并提醒一下。\n\n3. 没有选择语言就选择层面，或者反过来没有选择层面只选择语言：一样终止操作，并提示缺少了什么没有选。\n\n4. 没有选择输出目录：终止操作，弹出消息框提醒。\n\n5. 数据库连接异常：故意输入错误的连接信息对吧？吃我个连接时异常信息提醒！（当然是友好的消息框啦）\n\n6. 模板文件异常：很遗憾的是，我没办法检测你的模板到底出了什么错，至少现在是没办法的，只能给你丢一个友善的提醒了。\n\n## 对于数据的处理\n\n上面提到了“获取 tables 和相应 table 的 columns”，加之 Razor 需要提供一个 model 来传递参数（当然，RunCompile 还能接受更多对象），那么肯定会想到封装了。然而我稍微了解了一下 System.Data 下的类，事情好像并不是那么容易，比如我需要一个 DataTable 去读取一个 table 下的字段元数据，但我却拿不到表名（不能更方便地拿到表名，需要写一长串调用关系，而事实上是可以的）。\n\n于是，为了使封装后的数据调用起来更懒人化，我创建了两个 Model：\n\n1. Table\n\n2. Column\n\n这就显得比较“粗暴”了，获取了表名交给 Table，获取了这个表的所有字段元数据，分别封装成 Column 交给 Table 里的 list。\n\n这样一来，最后在模板内的调用就可以直接用属性去拿到信息了。\n","source":"_posts/2017-06-03-CodEratorDevelopNote.md","raw":"---\ntitle: CodErator开发笔记\ndate: 2017-06-03 13:00:00\ncategories:\n    - project\ntags:\n    - C#\n    - generator\nmp3:\ncover:\n---\n\n> CodErator 取自 Code Generator，这么一结合，既有代码生成器的含义，又有代码操作者的意味，亦或是更多的含义。既然定位在轻量级代码生成工具，只要能完成任务，就是最好的了。\n\n## 关于项目的启发\n\n这个项目在建立之前，我有一段时间用过 CodeSmith 试用版，也写了两个使用 CodeSmith 生成 JavaEE 主流框架代码的模板（参见[SSMGenerator](https://github.com/AyakuraYuki/SSMGenerator)，另一个尚未发布）。但众所周知，CodeSmith 可不是个亲近的家伙，收费，且新版（ver.7.1）不能使用 Visual Studio 编写模板（它自建了一个 Template Editor），所以 CodeSmith 使用成本就这么摆在这里了。\n\n既然我想完成一个简单的代码生成工作，又不想专门为你出这个钱，而且你又把部分 DLL 的代码公布了，那我不如自己写一个轻便的生成工具，只要能完成工作就好了呗。就是这样的想法，促成了这个项目的产生。\n\n## 开发设计\n\n老实说，这个项目因为还有另一个目的，就是课程设计，花在这个项目初始版本上的时间就显得比较紧，所以并没有什么设计。\n\n稍微对我过去开发的情况做了个估计，这个项目姑且算是利用 Build and Fix Model 完成开发，仅有一个思想驱使项目进程的发展：\n\n> 我需要读到元数据，然后利用元数据封装成对象，通过模板引擎传送到模板文件最后生成目标代码。\n\n### 然而。。。\n\n最后却转变成了，通过对生成代码的操作流程去编写功能，而在此基础上对每一个流程可能会出现的误操作做出相应的限制动作，使得流程变得线性化，间接体现出易用性。\n\n### 所以！\n\n通过对流程的分析，可以知道使用者需要做的事情能够拆分成如下的动作：\n\n1. 连接到数据库，获取库下的 table 列表\n\n2. 使用者可以点击单个 table 列表项查看该表将要被生成的字段内容，此举是为了解决 CodeSmith 的某些“缺陷”，即你能看到 schemas 和 tables，但你看不到 columns\n\n3. 使用者在 table 列表中选择想要生成的一或多张表\n\n4. 使用者选择生成目标代码的语言和想要生成的层面\n\n5. 选择输出位置，开始生成\n\n## 设计中出现的需求\n\n既然提取出了“生成代码”用例的概要动作，那么就要对这些动作需要哪些技术、功能等进行分析：\n\n1. 连接到任意的数据库，收集连接数据（但不允许持久化这些连接数据）\n\n2. 获取 tables 和相应 table 的 columns\n\n3. 收集生成选项\n\n4. 封装查找到的 Table 和 Columns\n\n5. 使用模板文件去生成代码而不是硬编码到源代码中去生成\n\n## 对于上述设计和需求，我采用了以下支持\n\n-   既然是连接到数据库，那么我就加入 MySQL 和 SQL Server 的支持吧，反正使用 Oracle 的程序猿不一定会用轻量级代码生成器的吧\n\n-   模板，就你了，Razor Engine\n\n-   界面？WinForm 咯，今后再移植 WPF 吧\n\n-   其他的？那还真没有什么技术可言了，就只是普通 C#而已\n\n单独拿模板出来说一下事。我在考虑模板使用的时候，考虑过以下四种模板：\n\n1. CodeSmith 的 cst\n\n2. T4 文本模板（Text Template Transformation Toolkit）\n\n3. NVelocity（Velocity 的.Net 版）\n\n4. Razor Engine\n\ncst 自然不用说，结合 CodeSmith 的 SchemaExplorer，可以省略复杂的客户端操作，直接在模板内声明几个参数然后在客户端给参数赋值，就可以完成生成。问题来了，CodeSmith 本身是收费软件，调用他们的 DLL 很容易，可是会给你跳出个他们家的产品注册窗口，这就很哭笑不得了。\n\nT4 文本模板，是微软自家的代码生成文本模板，原本在我看来是个比较好的模板，而且写起来跟写 cst 没什么差别，但问题是，T4 文本模板本身就是一个可运行的“class”，这就显得代码不可控了，用户侧可能就会出现各种各样的问题。\n\nNVelocity，其实就是 Velocity，只不过有人把它.Net 化了。不过这个扩展据我查找的资料，大多文章的发布年是在 2011 年和 2013 年，而该项目本身停留在了 0.4.2 版，发布日期还是 2003 年 10 月。想想现在 Velocity 都什么版本了，天差地别了吧。\n\nRazor Engine，直到 2016 年还在维护的.Net 模板引擎。它的工作方式更像我所熟知的 Java Controller 传递对象到 jsp 等模板的方式，而且它是非侵入式的模板引擎，想用即可，几乎不需要任何配置，而且测试方便。\n\nRazor Engine 的基本工作方式可以描述为如下的流程。首先，程序从文本读取到 cshtml 模板文件的内容，将这些内容保存到 string 类型的变量中，然后只需要通过：\n\n```groovy\nEngine.Razor.RunCompile(template, unique_name, [modelType], model)\n```\n\n这个方法，让引擎获取模板内容和 model 数据，自动替换模板内容内占位符对应的 model 信息，最后返回结果字符串。\n\n## 程序使用过程中可能会出现的搞事操作与处理办法\n\n1. 没有连接数据库就执行生成：检测到连接数据不完善，立即终止操作并弹出提示。\n\n2. 没有选择表：很少会出现的错误吧，真的出现的话就终止操作并提醒一下。\n\n3. 没有选择语言就选择层面，或者反过来没有选择层面只选择语言：一样终止操作，并提示缺少了什么没有选。\n\n4. 没有选择输出目录：终止操作，弹出消息框提醒。\n\n5. 数据库连接异常：故意输入错误的连接信息对吧？吃我个连接时异常信息提醒！（当然是友好的消息框啦）\n\n6. 模板文件异常：很遗憾的是，我没办法检测你的模板到底出了什么错，至少现在是没办法的，只能给你丢一个友善的提醒了。\n\n## 对于数据的处理\n\n上面提到了“获取 tables 和相应 table 的 columns”，加之 Razor 需要提供一个 model 来传递参数（当然，RunCompile 还能接受更多对象），那么肯定会想到封装了。然而我稍微了解了一下 System.Data 下的类，事情好像并不是那么容易，比如我需要一个 DataTable 去读取一个 table 下的字段元数据，但我却拿不到表名（不能更方便地拿到表名，需要写一长串调用关系，而事实上是可以的）。\n\n于是，为了使封装后的数据调用起来更懒人化，我创建了两个 Model：\n\n1. Table\n\n2. Column\n\n这就显得比较“粗暴”了，获取了表名交给 Table，获取了这个表的所有字段元数据，分别封装成 Column 交给 Table 里的 list。\n\n这样一来，最后在模板内的调用就可以直接用属性去拿到信息了。\n","slug":"2017-06-03-CodEratorDevelopNote","published":1,"updated":"2022-03-31T04:19:33.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9h000ivrip4gmf7lsv","content":"<blockquote>\n<p>CodErator 取自 Code Generator，这么一结合，既有代码生成器的含义，又有代码操作者的意味，亦或是更多的含义。既然定位在轻量级代码生成工具，只要能完成任务，就是最好的了。</p>\n</blockquote>\n<h2 id=\"关于项目的启发\"><a href=\"#关于项目的启发\" class=\"headerlink\" title=\"关于项目的启发\"></a>关于项目的启发</h2><p>这个项目在建立之前，我有一段时间用过 CodeSmith 试用版，也写了两个使用 CodeSmith 生成 JavaEE 主流框架代码的模板（参见<a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a>，另一个尚未发布）。但众所周知，CodeSmith 可不是个亲近的家伙，收费，且新版（ver.7.1）不能使用 Visual Studio 编写模板（它自建了一个 Template Editor），所以 CodeSmith 使用成本就这么摆在这里了。</p>\n<p>既然我想完成一个简单的代码生成工作，又不想专门为你出这个钱，而且你又把部分 DLL 的代码公布了，那我不如自己写一个轻便的生成工具，只要能完成工作就好了呗。就是这样的想法，促成了这个项目的产生。</p>\n<h2 id=\"开发设计\"><a href=\"#开发设计\" class=\"headerlink\" title=\"开发设计\"></a>开发设计</h2><p>老实说，这个项目因为还有另一个目的，就是课程设计，花在这个项目初始版本上的时间就显得比较紧，所以并没有什么设计。</p>\n<p>稍微对我过去开发的情况做了个估计，这个项目姑且算是利用 Build and Fix Model 完成开发，仅有一个思想驱使项目进程的发展：</p>\n<blockquote>\n<p>我需要读到元数据，然后利用元数据封装成对象，通过模板引擎传送到模板文件最后生成目标代码。</p>\n</blockquote>\n<h3 id=\"然而。。。\"><a href=\"#然而。。。\" class=\"headerlink\" title=\"然而。。。\"></a>然而。。。</h3><p>最后却转变成了，通过对生成代码的操作流程去编写功能，而在此基础上对每一个流程可能会出现的误操作做出相应的限制动作，使得流程变得线性化，间接体现出易用性。</p>\n<h3 id=\"所以！\"><a href=\"#所以！\" class=\"headerlink\" title=\"所以！\"></a>所以！</h3><p>通过对流程的分析，可以知道使用者需要做的事情能够拆分成如下的动作：</p>\n<ol>\n<li><p>连接到数据库，获取库下的 table 列表</p>\n</li>\n<li><p>使用者可以点击单个 table 列表项查看该表将要被生成的字段内容，此举是为了解决 CodeSmith 的某些“缺陷”，即你能看到 schemas 和 tables，但你看不到 columns</p>\n</li>\n<li><p>使用者在 table 列表中选择想要生成的一或多张表</p>\n</li>\n<li><p>使用者选择生成目标代码的语言和想要生成的层面</p>\n</li>\n<li><p>选择输出位置，开始生成</p>\n</li>\n</ol>\n<h2 id=\"设计中出现的需求\"><a href=\"#设计中出现的需求\" class=\"headerlink\" title=\"设计中出现的需求\"></a>设计中出现的需求</h2><p>既然提取出了“生成代码”用例的概要动作，那么就要对这些动作需要哪些技术、功能等进行分析：</p>\n<ol>\n<li><p>连接到任意的数据库，收集连接数据（但不允许持久化这些连接数据）</p>\n</li>\n<li><p>获取 tables 和相应 table 的 columns</p>\n</li>\n<li><p>收集生成选项</p>\n</li>\n<li><p>封装查找到的 Table 和 Columns</p>\n</li>\n<li><p>使用模板文件去生成代码而不是硬编码到源代码中去生成</p>\n</li>\n</ol>\n<h2 id=\"对于上述设计和需求，我采用了以下支持\"><a href=\"#对于上述设计和需求，我采用了以下支持\" class=\"headerlink\" title=\"对于上述设计和需求，我采用了以下支持\"></a>对于上述设计和需求，我采用了以下支持</h2><ul>\n<li><p>既然是连接到数据库，那么我就加入 MySQL 和 SQL Server 的支持吧，反正使用 Oracle 的程序猿不一定会用轻量级代码生成器的吧</p>\n</li>\n<li><p>模板，就你了，Razor Engine</p>\n</li>\n<li><p>界面？WinForm 咯，今后再移植 WPF 吧</p>\n</li>\n<li><p>其他的？那还真没有什么技术可言了，就只是普通 C#而已</p>\n</li>\n</ul>\n<p>单独拿模板出来说一下事。我在考虑模板使用的时候，考虑过以下四种模板：</p>\n<ol>\n<li><p>CodeSmith 的 cst</p>\n</li>\n<li><p>T4 文本模板（Text Template Transformation Toolkit）</p>\n</li>\n<li><p>NVelocity（Velocity 的.Net 版）</p>\n</li>\n<li><p>Razor Engine</p>\n</li>\n</ol>\n<p>cst 自然不用说，结合 CodeSmith 的 SchemaExplorer，可以省略复杂的客户端操作，直接在模板内声明几个参数然后在客户端给参数赋值，就可以完成生成。问题来了，CodeSmith 本身是收费软件，调用他们的 DLL 很容易，可是会给你跳出个他们家的产品注册窗口，这就很哭笑不得了。</p>\n<p>T4 文本模板，是微软自家的代码生成文本模板，原本在我看来是个比较好的模板，而且写起来跟写 cst 没什么差别，但问题是，T4 文本模板本身就是一个可运行的“class”，这就显得代码不可控了，用户侧可能就会出现各种各样的问题。</p>\n<p>NVelocity，其实就是 Velocity，只不过有人把它.Net 化了。不过这个扩展据我查找的资料，大多文章的发布年是在 2011 年和 2013 年，而该项目本身停留在了 0.4.2 版，发布日期还是 2003 年 10 月。想想现在 Velocity 都什么版本了，天差地别了吧。</p>\n<p>Razor Engine，直到 2016 年还在维护的.Net 模板引擎。它的工作方式更像我所熟知的 Java Controller 传递对象到 jsp 等模板的方式，而且它是非侵入式的模板引擎，想用即可，几乎不需要任何配置，而且测试方便。</p>\n<p>Razor Engine 的基本工作方式可以描述为如下的流程。首先，程序从文本读取到 cshtml 模板文件的内容，将这些内容保存到 string 类型的变量中，然后只需要通过：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Engine.Razor.RunCompile(template, unique_name, [modelType], model)</span><br></pre></td></tr></table></figure>\n\n<p>这个方法，让引擎获取模板内容和 model 数据，自动替换模板内容内占位符对应的 model 信息，最后返回结果字符串。</p>\n<h2 id=\"程序使用过程中可能会出现的搞事操作与处理办法\"><a href=\"#程序使用过程中可能会出现的搞事操作与处理办法\" class=\"headerlink\" title=\"程序使用过程中可能会出现的搞事操作与处理办法\"></a>程序使用过程中可能会出现的搞事操作与处理办法</h2><ol>\n<li><p>没有连接数据库就执行生成：检测到连接数据不完善，立即终止操作并弹出提示。</p>\n</li>\n<li><p>没有选择表：很少会出现的错误吧，真的出现的话就终止操作并提醒一下。</p>\n</li>\n<li><p>没有选择语言就选择层面，或者反过来没有选择层面只选择语言：一样终止操作，并提示缺少了什么没有选。</p>\n</li>\n<li><p>没有选择输出目录：终止操作，弹出消息框提醒。</p>\n</li>\n<li><p>数据库连接异常：故意输入错误的连接信息对吧？吃我个连接时异常信息提醒！（当然是友好的消息框啦）</p>\n</li>\n<li><p>模板文件异常：很遗憾的是，我没办法检测你的模板到底出了什么错，至少现在是没办法的，只能给你丢一个友善的提醒了。</p>\n</li>\n</ol>\n<h2 id=\"对于数据的处理\"><a href=\"#对于数据的处理\" class=\"headerlink\" title=\"对于数据的处理\"></a>对于数据的处理</h2><p>上面提到了“获取 tables 和相应 table 的 columns”，加之 Razor 需要提供一个 model 来传递参数（当然，RunCompile 还能接受更多对象），那么肯定会想到封装了。然而我稍微了解了一下 System.Data 下的类，事情好像并不是那么容易，比如我需要一个 DataTable 去读取一个 table 下的字段元数据，但我却拿不到表名（不能更方便地拿到表名，需要写一长串调用关系，而事实上是可以的）。</p>\n<p>于是，为了使封装后的数据调用起来更懒人化，我创建了两个 Model：</p>\n<ol>\n<li><p>Table</p>\n</li>\n<li><p>Column</p>\n</li>\n</ol>\n<p>这就显得比较“粗暴”了，获取了表名交给 Table，获取了这个表的所有字段元数据，分别封装成 Column 交给 Table 里的 list。</p>\n<p>这样一来，最后在模板内的调用就可以直接用属性去拿到信息了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>CodErator 取自 Code Generator，这么一结合，既有代码生成器的含义，又有代码操作者的意味，亦或是更多的含义。既然定位在轻量级代码生成工具，只要能完成任务，就是最好的了。</p>\n</blockquote>\n<h2 id=\"关于项目的启发\"><a href=\"#关于项目的启发\" class=\"headerlink\" title=\"关于项目的启发\"></a>关于项目的启发</h2><p>这个项目在建立之前，我有一段时间用过 CodeSmith 试用版，也写了两个使用 CodeSmith 生成 JavaEE 主流框架代码的模板（参见<a href=\"https://github.com/AyakuraYuki/SSMGenerator\">SSMGenerator</a>，另一个尚未发布）。但众所周知，CodeSmith 可不是个亲近的家伙，收费，且新版（ver.7.1）不能使用 Visual Studio 编写模板（它自建了一个 Template Editor），所以 CodeSmith 使用成本就这么摆在这里了。</p>\n<p>既然我想完成一个简单的代码生成工作，又不想专门为你出这个钱，而且你又把部分 DLL 的代码公布了，那我不如自己写一个轻便的生成工具，只要能完成工作就好了呗。就是这样的想法，促成了这个项目的产生。</p>\n<h2 id=\"开发设计\"><a href=\"#开发设计\" class=\"headerlink\" title=\"开发设计\"></a>开发设计</h2><p>老实说，这个项目因为还有另一个目的，就是课程设计，花在这个项目初始版本上的时间就显得比较紧，所以并没有什么设计。</p>\n<p>稍微对我过去开发的情况做了个估计，这个项目姑且算是利用 Build and Fix Model 完成开发，仅有一个思想驱使项目进程的发展：</p>\n<blockquote>\n<p>我需要读到元数据，然后利用元数据封装成对象，通过模板引擎传送到模板文件最后生成目标代码。</p>\n</blockquote>\n<h3 id=\"然而。。。\"><a href=\"#然而。。。\" class=\"headerlink\" title=\"然而。。。\"></a>然而。。。</h3><p>最后却转变成了，通过对生成代码的操作流程去编写功能，而在此基础上对每一个流程可能会出现的误操作做出相应的限制动作，使得流程变得线性化，间接体现出易用性。</p>\n<h3 id=\"所以！\"><a href=\"#所以！\" class=\"headerlink\" title=\"所以！\"></a>所以！</h3><p>通过对流程的分析，可以知道使用者需要做的事情能够拆分成如下的动作：</p>\n<ol>\n<li><p>连接到数据库，获取库下的 table 列表</p>\n</li>\n<li><p>使用者可以点击单个 table 列表项查看该表将要被生成的字段内容，此举是为了解决 CodeSmith 的某些“缺陷”，即你能看到 schemas 和 tables，但你看不到 columns</p>\n</li>\n<li><p>使用者在 table 列表中选择想要生成的一或多张表</p>\n</li>\n<li><p>使用者选择生成目标代码的语言和想要生成的层面</p>\n</li>\n<li><p>选择输出位置，开始生成</p>\n</li>\n</ol>\n<h2 id=\"设计中出现的需求\"><a href=\"#设计中出现的需求\" class=\"headerlink\" title=\"设计中出现的需求\"></a>设计中出现的需求</h2><p>既然提取出了“生成代码”用例的概要动作，那么就要对这些动作需要哪些技术、功能等进行分析：</p>\n<ol>\n<li><p>连接到任意的数据库，收集连接数据（但不允许持久化这些连接数据）</p>\n</li>\n<li><p>获取 tables 和相应 table 的 columns</p>\n</li>\n<li><p>收集生成选项</p>\n</li>\n<li><p>封装查找到的 Table 和 Columns</p>\n</li>\n<li><p>使用模板文件去生成代码而不是硬编码到源代码中去生成</p>\n</li>\n</ol>\n<h2 id=\"对于上述设计和需求，我采用了以下支持\"><a href=\"#对于上述设计和需求，我采用了以下支持\" class=\"headerlink\" title=\"对于上述设计和需求，我采用了以下支持\"></a>对于上述设计和需求，我采用了以下支持</h2><ul>\n<li><p>既然是连接到数据库，那么我就加入 MySQL 和 SQL Server 的支持吧，反正使用 Oracle 的程序猿不一定会用轻量级代码生成器的吧</p>\n</li>\n<li><p>模板，就你了，Razor Engine</p>\n</li>\n<li><p>界面？WinForm 咯，今后再移植 WPF 吧</p>\n</li>\n<li><p>其他的？那还真没有什么技术可言了，就只是普通 C#而已</p>\n</li>\n</ul>\n<p>单独拿模板出来说一下事。我在考虑模板使用的时候，考虑过以下四种模板：</p>\n<ol>\n<li><p>CodeSmith 的 cst</p>\n</li>\n<li><p>T4 文本模板（Text Template Transformation Toolkit）</p>\n</li>\n<li><p>NVelocity（Velocity 的.Net 版）</p>\n</li>\n<li><p>Razor Engine</p>\n</li>\n</ol>\n<p>cst 自然不用说，结合 CodeSmith 的 SchemaExplorer，可以省略复杂的客户端操作，直接在模板内声明几个参数然后在客户端给参数赋值，就可以完成生成。问题来了，CodeSmith 本身是收费软件，调用他们的 DLL 很容易，可是会给你跳出个他们家的产品注册窗口，这就很哭笑不得了。</p>\n<p>T4 文本模板，是微软自家的代码生成文本模板，原本在我看来是个比较好的模板，而且写起来跟写 cst 没什么差别，但问题是，T4 文本模板本身就是一个可运行的“class”，这就显得代码不可控了，用户侧可能就会出现各种各样的问题。</p>\n<p>NVelocity，其实就是 Velocity，只不过有人把它.Net 化了。不过这个扩展据我查找的资料，大多文章的发布年是在 2011 年和 2013 年，而该项目本身停留在了 0.4.2 版，发布日期还是 2003 年 10 月。想想现在 Velocity 都什么版本了，天差地别了吧。</p>\n<p>Razor Engine，直到 2016 年还在维护的.Net 模板引擎。它的工作方式更像我所熟知的 Java Controller 传递对象到 jsp 等模板的方式，而且它是非侵入式的模板引擎，想用即可，几乎不需要任何配置，而且测试方便。</p>\n<p>Razor Engine 的基本工作方式可以描述为如下的流程。首先，程序从文本读取到 cshtml 模板文件的内容，将这些内容保存到 string 类型的变量中，然后只需要通过：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Engine.Razor.RunCompile(template, unique_name, [modelType], model)</span><br></pre></td></tr></table></figure>\n\n<p>这个方法，让引擎获取模板内容和 model 数据，自动替换模板内容内占位符对应的 model 信息，最后返回结果字符串。</p>\n<h2 id=\"程序使用过程中可能会出现的搞事操作与处理办法\"><a href=\"#程序使用过程中可能会出现的搞事操作与处理办法\" class=\"headerlink\" title=\"程序使用过程中可能会出现的搞事操作与处理办法\"></a>程序使用过程中可能会出现的搞事操作与处理办法</h2><ol>\n<li><p>没有连接数据库就执行生成：检测到连接数据不完善，立即终止操作并弹出提示。</p>\n</li>\n<li><p>没有选择表：很少会出现的错误吧，真的出现的话就终止操作并提醒一下。</p>\n</li>\n<li><p>没有选择语言就选择层面，或者反过来没有选择层面只选择语言：一样终止操作，并提示缺少了什么没有选。</p>\n</li>\n<li><p>没有选择输出目录：终止操作，弹出消息框提醒。</p>\n</li>\n<li><p>数据库连接异常：故意输入错误的连接信息对吧？吃我个连接时异常信息提醒！（当然是友好的消息框啦）</p>\n</li>\n<li><p>模板文件异常：很遗憾的是，我没办法检测你的模板到底出了什么错，至少现在是没办法的，只能给你丢一个友善的提醒了。</p>\n</li>\n</ol>\n<h2 id=\"对于数据的处理\"><a href=\"#对于数据的处理\" class=\"headerlink\" title=\"对于数据的处理\"></a>对于数据的处理</h2><p>上面提到了“获取 tables 和相应 table 的 columns”，加之 Razor 需要提供一个 model 来传递参数（当然，RunCompile 还能接受更多对象），那么肯定会想到封装了。然而我稍微了解了一下 System.Data 下的类，事情好像并不是那么容易，比如我需要一个 DataTable 去读取一个 table 下的字段元数据，但我却拿不到表名（不能更方便地拿到表名，需要写一长串调用关系，而事实上是可以的）。</p>\n<p>于是，为了使封装后的数据调用起来更懒人化，我创建了两个 Model：</p>\n<ol>\n<li><p>Table</p>\n</li>\n<li><p>Column</p>\n</li>\n</ol>\n<p>这就显得比较“粗暴”了，获取了表名交给 Table，获取了这个表的所有字段元数据，分别封装成 Column 交给 Table 里的 list。</p>\n<p>这样一来，最后在模板内的调用就可以直接用属性去拿到信息了。</p>\n"},{"title":"小记Apache端口转发——万网解析初步","date":"2017-08-17T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 记录自己对万网解析和Apache端口转发的理解\n\n最近在做部署平台的事情，第一次从域名到 ECS 到解析，这么一走流程，倒是了解了些许有关解析配置的事情。\n\n## 域名配置浅记\n\n阿里云的域名解析，主要使用的是 A 记录、CNAME 两种，前者直接解析到 IP 地址，后者则可以使域名直接解析到另一个域名（关于解析到另一个域名的授权方面的合法性在这里暂且不提）。\n\n值得注意的是，A 记录一般情况下不携带端口号，而是从@记录或 www 记录的地址，访问时携带端口号进行对应端口访问。\n\n## 端口转发\n\n万网域名解析配置由于不建议携带端口号配置 A 记录，可以视为所有二级域名配置均被指向同一个 IP 的 80 端口。对于这样的应用情况，我们可以配置 Apache 的 VirtualHost 来将指定的二级域名地址从 80 端转发到本地其他端口上的服务器。\n\n在我的应用环境中，包含如下两个配置：\n\n-   8080 端 Tomcat 应用服务器\n\n-   8180 端 Apache 图片服务器\n\n### 前期工作\n\n首先需要配置的是 Apache 的端口监听，以 Apache2.4 为例，需要找到 httpd.conf 的如下位置\n\n```yaml\n#\n# Listen: Allows you to bind Apache to specific IP addresses and/or\n# ports, instead of the default. See also the <VirtualHost>\n# directive.\n#\n# Change this to Listen on specific IP addresses as shown below to\n# prevent Apache from glomming onto all bound IP addresses.\n#\n#Listen 12.34.56.78:80\n```\n\n并在此后添加：\n\n```yaml\nListen 80\nListen 8180\n```\n\n为了打开端口转发，我们需要找到配置文件中的如下两行，取消它们的注释：\n\n```yaml\n#LoadModule proxy_module modules/mod_proxy.so\n\n#LoadModule proxy_http_module modules/mod_proxy_http.so\n```\n\n如果 Apache 处于运行状态，重新启动 Apache 服务器即可使新配置生效。\n\n### 配置虚拟服务器转发前的准备\n\n在配置虚拟服务器之前，我们需要关注几个指令\n\n#### ServerName\n\nServerName 是一个比较关键的指令，它指定了每个<VirtualHost>对应的主域名或二级域名，该指令的值需要与万网解析配置的 A 记录完全一致，否则会出现 Apache 无法获取访问请求的问题。\n\n#### ProxyPass 与 ProxyPassReverse\n\n```yaml\n# 语法\nProxyPass [path] !|url\nProxyPassReverse [url] url\n```\n\nProxyPass：它主要是用作 URL 前缀匹配，配置的 path 是一个虚拟的路径，在反向代理到后端的 url 后，path 是不会带过去的。该指令可以设置某些 path 不被转发。\n\nProxyPassReverse：它一般和 ProxyPass 配合使用，该指令使 Apache 调整 HTTP 重定向应答中 Location、Content-Location、URI 头里的 URL，这样可以避免在 Apache 作为反向代理使用时，后端服务器的 HTTP 重定向造成的绕过反向代理的问题。\n\n#### DocumentRoot\n\n该指令配置了访问本地的根路径\n\n#### Directory\n\n```yaml\n# 语法\n<Directory path>\n[options]\n</Directory>\n```\n\n这是一个 XML 标签形式的指令，紧跟 DocumentRoot，配置该本地路径相关的访问选项，其中可以包含：\n\n-   Options\n-   AllowOverride\n-   Order\n-   Allow\n-   Deny\n\n具体则不在本文详细解释。\n\n### 配置转发\n\n这里就直接把相关的配置放在下面了\n\n#### 将 Apache 本身配置为图片服务器的场景\n\n```yaml\n# Apache物理服务器配置的DocumentRoot与Directory指令\nDocumentRoot [Your image path]\n<Directory [same as DocumentRoot]>\n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n\n# Tomcat\n<VirtualHost *.80>\nServerName www.yourdomain.com\nProxyPass / http://yourdomain.com:8080/\nProxyPassReverse / http://yourdomain.com:8080/\n</VirtualHost>\n\n# Picture Server\n<VirtualHost *.80>\nServerName pic.yourdomain.com\nProxyPass / http://yourdomain.com:8180/\nProxyPassReverse / http://yourdomain.com:8180/\n</VirtualHost>\n```\n\n#### 另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证\n\n```yaml\n# Tomcat\n<VirtualHost *.80>\nServerName www.yourdomain.com\nProxyPass / http://yourdomain.com:8080/\nProxyPassReverse / http://yourdomain.com:8080/\n</VirtualHost>\n\n# Picture Server\n<VirtualHost *.80>\nServerName pic.yourdomain.com\nProxyPass / http://yourdomain.com:8180/\nProxyPassReverse / http://yourdomain.com:8180/\n</VirtualHost>\n\n<VirtualHost *.8180>\nServerName yourdomain.com\nDocumentRoot [Your image path]\n<Directory [same as DocumentRoot]>\n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n</VirtualHost>\n```\n","source":"_posts/2017-08-17-ApacheRedirect.md","raw":"---\ntitle: 小记Apache端口转发——万网解析初步\ndate: 2017-08-17 12:00:00\ncategories:\n    - guide\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n> 记录自己对万网解析和Apache端口转发的理解\n\n最近在做部署平台的事情，第一次从域名到 ECS 到解析，这么一走流程，倒是了解了些许有关解析配置的事情。\n\n## 域名配置浅记\n\n阿里云的域名解析，主要使用的是 A 记录、CNAME 两种，前者直接解析到 IP 地址，后者则可以使域名直接解析到另一个域名（关于解析到另一个域名的授权方面的合法性在这里暂且不提）。\n\n值得注意的是，A 记录一般情况下不携带端口号，而是从@记录或 www 记录的地址，访问时携带端口号进行对应端口访问。\n\n## 端口转发\n\n万网域名解析配置由于不建议携带端口号配置 A 记录，可以视为所有二级域名配置均被指向同一个 IP 的 80 端口。对于这样的应用情况，我们可以配置 Apache 的 VirtualHost 来将指定的二级域名地址从 80 端转发到本地其他端口上的服务器。\n\n在我的应用环境中，包含如下两个配置：\n\n-   8080 端 Tomcat 应用服务器\n\n-   8180 端 Apache 图片服务器\n\n### 前期工作\n\n首先需要配置的是 Apache 的端口监听，以 Apache2.4 为例，需要找到 httpd.conf 的如下位置\n\n```yaml\n#\n# Listen: Allows you to bind Apache to specific IP addresses and/or\n# ports, instead of the default. See also the <VirtualHost>\n# directive.\n#\n# Change this to Listen on specific IP addresses as shown below to\n# prevent Apache from glomming onto all bound IP addresses.\n#\n#Listen 12.34.56.78:80\n```\n\n并在此后添加：\n\n```yaml\nListen 80\nListen 8180\n```\n\n为了打开端口转发，我们需要找到配置文件中的如下两行，取消它们的注释：\n\n```yaml\n#LoadModule proxy_module modules/mod_proxy.so\n\n#LoadModule proxy_http_module modules/mod_proxy_http.so\n```\n\n如果 Apache 处于运行状态，重新启动 Apache 服务器即可使新配置生效。\n\n### 配置虚拟服务器转发前的准备\n\n在配置虚拟服务器之前，我们需要关注几个指令\n\n#### ServerName\n\nServerName 是一个比较关键的指令，它指定了每个<VirtualHost>对应的主域名或二级域名，该指令的值需要与万网解析配置的 A 记录完全一致，否则会出现 Apache 无法获取访问请求的问题。\n\n#### ProxyPass 与 ProxyPassReverse\n\n```yaml\n# 语法\nProxyPass [path] !|url\nProxyPassReverse [url] url\n```\n\nProxyPass：它主要是用作 URL 前缀匹配，配置的 path 是一个虚拟的路径，在反向代理到后端的 url 后，path 是不会带过去的。该指令可以设置某些 path 不被转发。\n\nProxyPassReverse：它一般和 ProxyPass 配合使用，该指令使 Apache 调整 HTTP 重定向应答中 Location、Content-Location、URI 头里的 URL，这样可以避免在 Apache 作为反向代理使用时，后端服务器的 HTTP 重定向造成的绕过反向代理的问题。\n\n#### DocumentRoot\n\n该指令配置了访问本地的根路径\n\n#### Directory\n\n```yaml\n# 语法\n<Directory path>\n[options]\n</Directory>\n```\n\n这是一个 XML 标签形式的指令，紧跟 DocumentRoot，配置该本地路径相关的访问选项，其中可以包含：\n\n-   Options\n-   AllowOverride\n-   Order\n-   Allow\n-   Deny\n\n具体则不在本文详细解释。\n\n### 配置转发\n\n这里就直接把相关的配置放在下面了\n\n#### 将 Apache 本身配置为图片服务器的场景\n\n```yaml\n# Apache物理服务器配置的DocumentRoot与Directory指令\nDocumentRoot [Your image path]\n<Directory [same as DocumentRoot]>\n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n\n# Tomcat\n<VirtualHost *.80>\nServerName www.yourdomain.com\nProxyPass / http://yourdomain.com:8080/\nProxyPassReverse / http://yourdomain.com:8080/\n</VirtualHost>\n\n# Picture Server\n<VirtualHost *.80>\nServerName pic.yourdomain.com\nProxyPass / http://yourdomain.com:8180/\nProxyPassReverse / http://yourdomain.com:8180/\n</VirtualHost>\n```\n\n#### 另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证\n\n```yaml\n# Tomcat\n<VirtualHost *.80>\nServerName www.yourdomain.com\nProxyPass / http://yourdomain.com:8080/\nProxyPassReverse / http://yourdomain.com:8080/\n</VirtualHost>\n\n# Picture Server\n<VirtualHost *.80>\nServerName pic.yourdomain.com\nProxyPass / http://yourdomain.com:8180/\nProxyPassReverse / http://yourdomain.com:8180/\n</VirtualHost>\n\n<VirtualHost *.8180>\nServerName yourdomain.com\nDocumentRoot [Your image path]\n<Directory [same as DocumentRoot]>\n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n</Directory>\n</VirtualHost>\n```\n","slug":"2017-08-17-ApacheRedirect","published":1,"updated":"2022-03-31T04:21:18.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9h000mvrip12cm8jx9","content":"<blockquote>\n<p>记录自己对万网解析和Apache端口转发的理解</p>\n</blockquote>\n<p>最近在做部署平台的事情，第一次从域名到 ECS 到解析，这么一走流程，倒是了解了些许有关解析配置的事情。</p>\n<h2 id=\"域名配置浅记\"><a href=\"#域名配置浅记\" class=\"headerlink\" title=\"域名配置浅记\"></a>域名配置浅记</h2><p>阿里云的域名解析，主要使用的是 A 记录、CNAME 两种，前者直接解析到 IP 地址，后者则可以使域名直接解析到另一个域名（关于解析到另一个域名的授权方面的合法性在这里暂且不提）。</p>\n<p>值得注意的是，A 记录一般情况下不携带端口号，而是从@记录或 www 记录的地址，访问时携带端口号进行对应端口访问。</p>\n<h2 id=\"端口转发\"><a href=\"#端口转发\" class=\"headerlink\" title=\"端口转发\"></a>端口转发</h2><p>万网域名解析配置由于不建议携带端口号配置 A 记录，可以视为所有二级域名配置均被指向同一个 IP 的 80 端口。对于这样的应用情况，我们可以配置 Apache 的 VirtualHost 来将指定的二级域名地址从 80 端转发到本地其他端口上的服务器。</p>\n<p>在我的应用环境中，包含如下两个配置：</p>\n<ul>\n<li><p>8080 端 Tomcat 应用服务器</p>\n</li>\n<li><p>8180 端 Apache 图片服务器</p>\n</li>\n</ul>\n<h3 id=\"前期工作\"><a href=\"#前期工作\" class=\"headerlink\" title=\"前期工作\"></a>前期工作</h3><p>首先需要配置的是 Apache 的端口监听，以 Apache2.4 为例，需要找到 httpd.conf 的如下位置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Listen: Allows you to bind Apache to specific IP addresses and/or</span></span><br><span class=\"line\"><span class=\"comment\"># ports, instead of the default. See also the &lt;VirtualHost&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># directive.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Change this to Listen on specific IP addresses as shown below to</span></span><br><span class=\"line\"><span class=\"comment\"># prevent Apache from glomming onto all bound IP addresses.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#Listen 12.34.56.78:80</span></span><br></pre></td></tr></table></figure>\n\n<p>并在此后添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Listen</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"string\">Listen</span> <span class=\"number\">8180</span></span><br></pre></td></tr></table></figure>\n\n<p>为了打开端口转发，我们需要找到配置文件中的如下两行，取消它们的注释：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule proxy_module modules/mod_proxy.so</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#LoadModule proxy_http_module modules/mod_proxy_http.so</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 Apache 处于运行状态，重新启动 Apache 服务器即可使新配置生效。</p>\n<h3 id=\"配置虚拟服务器转发前的准备\"><a href=\"#配置虚拟服务器转发前的准备\" class=\"headerlink\" title=\"配置虚拟服务器转发前的准备\"></a>配置虚拟服务器转发前的准备</h3><p>在配置虚拟服务器之前，我们需要关注几个指令</p>\n<h4 id=\"ServerName\"><a href=\"#ServerName\" class=\"headerlink\" title=\"ServerName\"></a>ServerName</h4><p>ServerName 是一个比较关键的指令，它指定了每个<VirtualHost>对应的主域名或二级域名，该指令的值需要与万网解析配置的 A 记录完全一致，否则会出现 Apache 无法获取访问请求的问题。</p>\n<h4 id=\"ProxyPass-与-ProxyPassReverse\"><a href=\"#ProxyPass-与-ProxyPassReverse\" class=\"headerlink\" title=\"ProxyPass 与 ProxyPassReverse\"></a>ProxyPass 与 ProxyPassReverse</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> [<span class=\"string\">path</span>] <span class=\"string\">!|url</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> [<span class=\"string\">url</span>] <span class=\"string\">url</span></span><br></pre></td></tr></table></figure>\n\n<p>ProxyPass：它主要是用作 URL 前缀匹配，配置的 path 是一个虚拟的路径，在反向代理到后端的 url 后，path 是不会带过去的。该指令可以设置某些 path 不被转发。</p>\n<p>ProxyPassReverse：它一般和 ProxyPass 配合使用，该指令使 Apache 调整 HTTP 重定向应答中 Location、Content-Location、URI 头里的 URL，这样可以避免在 Apache 作为反向代理使用时，后端服务器的 HTTP 重定向造成的绕过反向代理的问题。</p>\n<h4 id=\"DocumentRoot\"><a href=\"#DocumentRoot\" class=\"headerlink\" title=\"DocumentRoot\"></a>DocumentRoot</h4><p>该指令配置了访问本地的根路径</p>\n<h4 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> <span class=\"string\">path&gt;</span></span><br><span class=\"line\">[<span class=\"string\">options</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个 XML 标签形式的指令，紧跟 DocumentRoot，配置该本地路径相关的访问选项，其中可以包含：</p>\n<ul>\n<li>Options</li>\n<li>AllowOverride</li>\n<li>Order</li>\n<li>Allow</li>\n<li>Deny</li>\n</ul>\n<p>具体则不在本文详细解释。</p>\n<h3 id=\"配置转发\"><a href=\"#配置转发\" class=\"headerlink\" title=\"配置转发\"></a>配置转发</h3><p>这里就直接把相关的配置放在下面了</p>\n<h4 id=\"将-Apache-本身配置为图片服务器的场景\"><a href=\"#将-Apache-本身配置为图片服务器的场景\" class=\"headerlink\" title=\"将 Apache 本身配置为图片服务器的场景\"></a>将 Apache 本身配置为图片服务器的场景</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Apache物理服务器配置的DocumentRoot与Directory指令</span></span><br><span class=\"line\"><span class=\"string\">DocumentRoot</span> [<span class=\"string\">Your</span> <span class=\"string\">image</span> <span class=\"string\">path</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> [<span class=\"string\">same</span> <span class=\"string\">as</span> <span class=\"string\">DocumentRoot</span>]<span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Options FollowSymLinks</span></span><br><span class=\"line\"><span class=\"string\">    AllowOverride None</span></span><br><span class=\"line\"><span class=\"string\">    Require all granted</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"string\">&lt;/Directory&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tomcat</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">www.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Picture Server</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">pic.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"另一种配置，Apache-本身也作为图片服务器，但多做了一层转发，尚待查证\"><a href=\"#另一种配置，Apache-本身也作为图片服务器，但多做了一层转发，尚待查证\" class=\"headerlink\" title=\"另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证\"></a>另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tomcat</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">www.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Picture Server</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">pic.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.8180&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">DocumentRoot</span> [<span class=\"string\">Your</span> <span class=\"string\">image</span> <span class=\"string\">path</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> [<span class=\"string\">same</span> <span class=\"string\">as</span> <span class=\"string\">DocumentRoot</span>]<span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Options FollowSymLinks</span></span><br><span class=\"line\"><span class=\"string\">    AllowOverride None</span></span><br><span class=\"line\"><span class=\"string\">    Require all granted</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"string\">&lt;/Directory&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录自己对万网解析和Apache端口转发的理解</p>\n</blockquote>\n<p>最近在做部署平台的事情，第一次从域名到 ECS 到解析，这么一走流程，倒是了解了些许有关解析配置的事情。</p>\n<h2 id=\"域名配置浅记\"><a href=\"#域名配置浅记\" class=\"headerlink\" title=\"域名配置浅记\"></a>域名配置浅记</h2><p>阿里云的域名解析，主要使用的是 A 记录、CNAME 两种，前者直接解析到 IP 地址，后者则可以使域名直接解析到另一个域名（关于解析到另一个域名的授权方面的合法性在这里暂且不提）。</p>\n<p>值得注意的是，A 记录一般情况下不携带端口号，而是从@记录或 www 记录的地址，访问时携带端口号进行对应端口访问。</p>\n<h2 id=\"端口转发\"><a href=\"#端口转发\" class=\"headerlink\" title=\"端口转发\"></a>端口转发</h2><p>万网域名解析配置由于不建议携带端口号配置 A 记录，可以视为所有二级域名配置均被指向同一个 IP 的 80 端口。对于这样的应用情况，我们可以配置 Apache 的 VirtualHost 来将指定的二级域名地址从 80 端转发到本地其他端口上的服务器。</p>\n<p>在我的应用环境中，包含如下两个配置：</p>\n<ul>\n<li><p>8080 端 Tomcat 应用服务器</p>\n</li>\n<li><p>8180 端 Apache 图片服务器</p>\n</li>\n</ul>\n<h3 id=\"前期工作\"><a href=\"#前期工作\" class=\"headerlink\" title=\"前期工作\"></a>前期工作</h3><p>首先需要配置的是 Apache 的端口监听，以 Apache2.4 为例，需要找到 httpd.conf 的如下位置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Listen: Allows you to bind Apache to specific IP addresses and/or</span></span><br><span class=\"line\"><span class=\"comment\"># ports, instead of the default. See also the &lt;VirtualHost&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># directive.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Change this to Listen on specific IP addresses as shown below to</span></span><br><span class=\"line\"><span class=\"comment\"># prevent Apache from glomming onto all bound IP addresses.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#Listen 12.34.56.78:80</span></span><br></pre></td></tr></table></figure>\n\n<p>并在此后添加：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Listen</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"string\">Listen</span> <span class=\"number\">8180</span></span><br></pre></td></tr></table></figure>\n\n<p>为了打开端口转发，我们需要找到配置文件中的如下两行，取消它们的注释：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule proxy_module modules/mod_proxy.so</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#LoadModule proxy_http_module modules/mod_proxy_http.so</span></span><br></pre></td></tr></table></figure>\n\n<p>如果 Apache 处于运行状态，重新启动 Apache 服务器即可使新配置生效。</p>\n<h3 id=\"配置虚拟服务器转发前的准备\"><a href=\"#配置虚拟服务器转发前的准备\" class=\"headerlink\" title=\"配置虚拟服务器转发前的准备\"></a>配置虚拟服务器转发前的准备</h3><p>在配置虚拟服务器之前，我们需要关注几个指令</p>\n<h4 id=\"ServerName\"><a href=\"#ServerName\" class=\"headerlink\" title=\"ServerName\"></a>ServerName</h4><p>ServerName 是一个比较关键的指令，它指定了每个<VirtualHost>对应的主域名或二级域名，该指令的值需要与万网解析配置的 A 记录完全一致，否则会出现 Apache 无法获取访问请求的问题。</p>\n<h4 id=\"ProxyPass-与-ProxyPassReverse\"><a href=\"#ProxyPass-与-ProxyPassReverse\" class=\"headerlink\" title=\"ProxyPass 与 ProxyPassReverse\"></a>ProxyPass 与 ProxyPassReverse</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> [<span class=\"string\">path</span>] <span class=\"string\">!|url</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> [<span class=\"string\">url</span>] <span class=\"string\">url</span></span><br></pre></td></tr></table></figure>\n\n<p>ProxyPass：它主要是用作 URL 前缀匹配，配置的 path 是一个虚拟的路径，在反向代理到后端的 url 后，path 是不会带过去的。该指令可以设置某些 path 不被转发。</p>\n<p>ProxyPassReverse：它一般和 ProxyPass 配合使用，该指令使 Apache 调整 HTTP 重定向应答中 Location、Content-Location、URI 头里的 URL，这样可以避免在 Apache 作为反向代理使用时，后端服务器的 HTTP 重定向造成的绕过反向代理的问题。</p>\n<h4 id=\"DocumentRoot\"><a href=\"#DocumentRoot\" class=\"headerlink\" title=\"DocumentRoot\"></a>DocumentRoot</h4><p>该指令配置了访问本地的根路径</p>\n<h4 id=\"Directory\"><a href=\"#Directory\" class=\"headerlink\" title=\"Directory\"></a>Directory</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> <span class=\"string\">path&gt;</span></span><br><span class=\"line\">[<span class=\"string\">options</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是一个 XML 标签形式的指令，紧跟 DocumentRoot，配置该本地路径相关的访问选项，其中可以包含：</p>\n<ul>\n<li>Options</li>\n<li>AllowOverride</li>\n<li>Order</li>\n<li>Allow</li>\n<li>Deny</li>\n</ul>\n<p>具体则不在本文详细解释。</p>\n<h3 id=\"配置转发\"><a href=\"#配置转发\" class=\"headerlink\" title=\"配置转发\"></a>配置转发</h3><p>这里就直接把相关的配置放在下面了</p>\n<h4 id=\"将-Apache-本身配置为图片服务器的场景\"><a href=\"#将-Apache-本身配置为图片服务器的场景\" class=\"headerlink\" title=\"将 Apache 本身配置为图片服务器的场景\"></a>将 Apache 本身配置为图片服务器的场景</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Apache物理服务器配置的DocumentRoot与Directory指令</span></span><br><span class=\"line\"><span class=\"string\">DocumentRoot</span> [<span class=\"string\">Your</span> <span class=\"string\">image</span> <span class=\"string\">path</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> [<span class=\"string\">same</span> <span class=\"string\">as</span> <span class=\"string\">DocumentRoot</span>]<span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Options FollowSymLinks</span></span><br><span class=\"line\"><span class=\"string\">    AllowOverride None</span></span><br><span class=\"line\"><span class=\"string\">    Require all granted</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"string\">&lt;/Directory&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tomcat</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">www.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Picture Server</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">pic.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"另一种配置，Apache-本身也作为图片服务器，但多做了一层转发，尚待查证\"><a href=\"#另一种配置，Apache-本身也作为图片服务器，但多做了一层转发，尚待查证\" class=\"headerlink\" title=\"另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证\"></a>另一种配置，Apache 本身也作为图片服务器，但多做了一层转发，尚待查证</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tomcat</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">www.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8080/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Picture Server</span></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.80&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">pic.yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">ProxyPass</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">ProxyPassReverse</span> <span class=\"string\">/</span> <span class=\"string\">http://yourdomain.com:8180/</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&lt;VirtualHost</span> <span class=\"string\">*.8180&gt;</span></span><br><span class=\"line\"><span class=\"string\">ServerName</span> <span class=\"string\">yourdomain.com</span></span><br><span class=\"line\"><span class=\"string\">DocumentRoot</span> [<span class=\"string\">Your</span> <span class=\"string\">image</span> <span class=\"string\">path</span>]</span><br><span class=\"line\"><span class=\"string\">&lt;Directory</span> [<span class=\"string\">same</span> <span class=\"string\">as</span> <span class=\"string\">DocumentRoot</span>]<span class=\"string\">&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Options FollowSymLinks</span></span><br><span class=\"line\"><span class=\"string\">    AllowOverride None</span></span><br><span class=\"line\"><span class=\"string\">    Require all granted</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"string\">&lt;/Directory&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Create a full deck of cards in Swift","date":"2018-01-22T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 使用Swift Playground创建的一个程序，可以创建一套含52张的扑克牌，并按照花色和牌号排序。\n\n最近开始学习 Swift 编程，学到枚举和结构体，看到最后一个 Experiment 要实现创建一套扑克，结合了一下以前写过的\"双条件\"排序和官方 GuidedTour，弄了下面的代码实现。\n\n```swift\n// Base card rank\nenum Rank: Int {\n    case ace = 1\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n    func simpleDescription() -> String {\n        switch self {\n        case .ace:\n            return \"ace\"\n        case .jack:\n            return \"jack\"\n        case .queen:\n            return \"queen\"\n        case .king:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n    func equals(compare: Rank) -> Bool {\n        return self.rawValue == compare.rawValue\n    }\n}\n\n// Card suit\nenum Suit {\n    case spades, hearts, diamonds, clubs\n\n    func simpleDescription() -> String {\n        switch self {\n        case .spades:\n            return \"spades\"\n        case .hearts:\n            return \"hearts\"\n        case .diamonds:\n            return \"diamonds\"\n        case .clubs:\n            return \"clubs\"\n        }\n    }\n\n    func color() -> String {\n        switch self {\n        case .hearts, .diamonds:\n            return \"red\"\n        case .spades, .clubs:\n            return \"black\"\n        }\n    }\n}\n\n// Poker struct with rank and suit.\nstruct Poker {\n    var rank: Rank\n    var suit: Suit\n    func description() -> String {\n        return \"This card is a \\(suit.color()) \\(suit.simpleDescription()) \\(rank.simpleDescription()).\"\n    }\n}\n\nvar poker = [Poker]()\n// Add cards\nfor i in 1...13 {\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.spades))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.hearts))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.diamonds))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.clubs))\n}\n// Order by suit, then rank\npoker.sort(by: {l, r -> Bool in\n    if l.suit.simpleDescription() < r.suit.simpleDescription() {\n        return false\n    } else if l.suit.simpleDescription().elementsEqual(r.suit.simpleDescription()) {\n        return l.rank.rawValue < r.rank.rawValue\n    } else {\n        return true\n    }\n})\n// Display\npoker.forEach { (item) in\n    print(item.description())\n}\n```\n","source":"_posts/2018-01-22-PokerBySwift.md","raw":"---\ntitle: Create a full deck of cards in Swift\ndate: 2018-01-22 10:00:00\ncategories:\n    - guide\ntags:\n    - Swift\nmp3:\ncover:\n---\n\n> 使用Swift Playground创建的一个程序，可以创建一套含52张的扑克牌，并按照花色和牌号排序。\n\n最近开始学习 Swift 编程，学到枚举和结构体，看到最后一个 Experiment 要实现创建一套扑克，结合了一下以前写过的\"双条件\"排序和官方 GuidedTour，弄了下面的代码实现。\n\n```swift\n// Base card rank\nenum Rank: Int {\n    case ace = 1\n    case two, three, four, five, six, seven, eight, nine, ten\n    case jack, queen, king\n    func simpleDescription() -> String {\n        switch self {\n        case .ace:\n            return \"ace\"\n        case .jack:\n            return \"jack\"\n        case .queen:\n            return \"queen\"\n        case .king:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        }\n    }\n    func equals(compare: Rank) -> Bool {\n        return self.rawValue == compare.rawValue\n    }\n}\n\n// Card suit\nenum Suit {\n    case spades, hearts, diamonds, clubs\n\n    func simpleDescription() -> String {\n        switch self {\n        case .spades:\n            return \"spades\"\n        case .hearts:\n            return \"hearts\"\n        case .diamonds:\n            return \"diamonds\"\n        case .clubs:\n            return \"clubs\"\n        }\n    }\n\n    func color() -> String {\n        switch self {\n        case .hearts, .diamonds:\n            return \"red\"\n        case .spades, .clubs:\n            return \"black\"\n        }\n    }\n}\n\n// Poker struct with rank and suit.\nstruct Poker {\n    var rank: Rank\n    var suit: Suit\n    func description() -> String {\n        return \"This card is a \\(suit.color()) \\(suit.simpleDescription()) \\(rank.simpleDescription()).\"\n    }\n}\n\nvar poker = [Poker]()\n// Add cards\nfor i in 1...13 {\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.spades))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.hearts))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.diamonds))\n    poker.append(Poker(rank: Rank(rawValue: i)!, suit: Suit.clubs))\n}\n// Order by suit, then rank\npoker.sort(by: {l, r -> Bool in\n    if l.suit.simpleDescription() < r.suit.simpleDescription() {\n        return false\n    } else if l.suit.simpleDescription().elementsEqual(r.suit.simpleDescription()) {\n        return l.rank.rawValue < r.rank.rawValue\n    } else {\n        return true\n    }\n})\n// Display\npoker.forEach { (item) in\n    print(item.description())\n}\n```\n","slug":"2018-01-22-PokerBySwift","published":1,"updated":"2022-03-31T04:29:54.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9l001jvrip7f7q8pfk","content":"<blockquote>\n<p>使用Swift Playground创建的一个程序，可以创建一套含52张的扑克牌，并按照花色和牌号排序。</p>\n</blockquote>\n<p>最近开始学习 Swift 编程，学到枚举和结构体，看到最后一个 Experiment 要实现创建一套扑克，结合了一下以前写过的”双条件”排序和官方 GuidedTour，弄了下面的代码实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Base card rank</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Rank</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ace <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> two, three, four, five, six, seven, eight, nine, ten</span><br><span class=\"line\">    <span class=\"keyword\">case</span> jack, queen, king</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .ace:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ace&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .jack:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .queen:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;queen&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .king:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;king&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">equals</span>(<span class=\"params\">compare</span>: <span class=\"type\">Rank</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.rawValue <span class=\"operator\">==</span> compare.rawValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Card suit</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Suit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> spades, hearts, diamonds, clubs</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .spades:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;spades&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .hearts:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;hearts&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .diamonds:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;diamonds&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .clubs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;clubs&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">color</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .hearts, .diamonds:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .spades, .clubs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Poker struct with rank and suit.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Poker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rank: <span class=\"type\">Rank</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> suit: <span class=\"type\">Suit</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">description</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;This card is a <span class=\"subst\">\\(suit.color())</span> <span class=\"subst\">\\(suit.simpleDescription())</span> <span class=\"subst\">\\(rank.simpleDescription())</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> poker <span class=\"operator\">=</span> [<span class=\"type\">Poker</span>]()</span><br><span class=\"line\"><span class=\"comment\">// Add cards</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">13</span> &#123;</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.spades))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.hearts))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.diamonds))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.clubs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Order by suit, then rank</span></span><br><span class=\"line\">poker.sort(by: &#123;l, r -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> l.suit.simpleDescription() <span class=\"operator\">&lt;</span> r.suit.simpleDescription() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> l.suit.simpleDescription().elementsEqual(r.suit.simpleDescription()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l.rank.rawValue <span class=\"operator\">&lt;</span> r.rank.rawValue</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// Display</span></span><br><span class=\"line\">poker.forEach &#123; (item) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item.description())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用Swift Playground创建的一个程序，可以创建一套含52张的扑克牌，并按照花色和牌号排序。</p>\n</blockquote>\n<p>最近开始学习 Swift 编程，学到枚举和结构体，看到最后一个 Experiment 要实现创建一套扑克，结合了一下以前写过的”双条件”排序和官方 GuidedTour，弄了下面的代码实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Base card rank</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Rank</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ace <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> two, three, four, five, six, seven, eight, nine, ten</span><br><span class=\"line\">    <span class=\"keyword\">case</span> jack, queen, king</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .ace:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ace&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .jack:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;jack&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .queen:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;queen&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .king:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;king&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>.rawValue)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">equals</span>(<span class=\"params\">compare</span>: <span class=\"type\">Rank</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.rawValue <span class=\"operator\">==</span> compare.rawValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Card suit</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Suit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> spades, hearts, diamonds, clubs</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">simpleDescription</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .spades:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;spades&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .hearts:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;hearts&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .diamonds:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;diamonds&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .clubs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;clubs&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">color</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .hearts, .diamonds:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> .spades, .clubs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Poker struct with rank and suit.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Poker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rank: <span class=\"type\">Rank</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> suit: <span class=\"type\">Suit</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">description</span>() -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;This card is a <span class=\"subst\">\\(suit.color())</span> <span class=\"subst\">\\(suit.simpleDescription())</span> <span class=\"subst\">\\(rank.simpleDescription())</span>.&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> poker <span class=\"operator\">=</span> [<span class=\"type\">Poker</span>]()</span><br><span class=\"line\"><span class=\"comment\">// Add cards</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">13</span> &#123;</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.spades))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.hearts))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.diamonds))</span><br><span class=\"line\">    poker.append(<span class=\"type\">Poker</span>(rank: <span class=\"type\">Rank</span>(rawValue: i)<span class=\"operator\">!</span>, suit: <span class=\"type\">Suit</span>.clubs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Order by suit, then rank</span></span><br><span class=\"line\">poker.sort(by: &#123;l, r -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> l.suit.simpleDescription() <span class=\"operator\">&lt;</span> r.suit.simpleDescription() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> l.suit.simpleDescription().elementsEqual(r.suit.simpleDescription()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l.rank.rawValue <span class=\"operator\">&lt;</span> r.rank.rawValue</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// Display</span></span><br><span class=\"line\">poker.forEach &#123; (item) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(item.description())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"CG5th SSA in Hong Kong","date":"2017-11-02T02:00:00.000Z","mp3":null,"cover":"/static/images/2017-11-02-CG5thSSAinHK/6.png","_content":"\n> THE IDOLM@STER CINDERELLA GIRLS 5thLIVE TOUR Serendipity Parade!!! Live viewing in Hong Kong\n\n![A店收获之-1](/static/images/2017-11-02-CG5thSSAinHK/1.png)\n\n![A店收获-2](/static/images/2017-11-02-CG5thSSAinHK/2.png)\n\n![入场券](/static/images/2017-11-02-CG5thSSAinHK/3.png)\n\n![港P派送的物品](/static/images/2017-11-02-CG5thSSAinHK/4.png)\n\n![自制call本部分内容——出演名单](/static/images/2017-11-02-CG5thSSAinHK/5.png)\n\n![开场留影，地藏位](/static/images/2017-11-02-CG5thSSAinHK/6.png)\n\n![过期了的抽选券](/static/images/2017-11-02-CG5thSSAinHK/7.png)\n","source":"_posts/2017-11-02-CG5thSSAinHK.md","raw":"---\ntitle: CG5th SSA in Hong Kong\ndate: 2017-11-02 10:00:00\ncategories:\n    - life\ntags:\n    - IM@S\n    - CinderellaGirls\nmp3:\ncover: /static/images/2017-11-02-CG5thSSAinHK/6.png\n---\n\n> THE IDOLM@STER CINDERELLA GIRLS 5thLIVE TOUR Serendipity Parade!!! Live viewing in Hong Kong\n\n![A店收获之-1](/static/images/2017-11-02-CG5thSSAinHK/1.png)\n\n![A店收获-2](/static/images/2017-11-02-CG5thSSAinHK/2.png)\n\n![入场券](/static/images/2017-11-02-CG5thSSAinHK/3.png)\n\n![港P派送的物品](/static/images/2017-11-02-CG5thSSAinHK/4.png)\n\n![自制call本部分内容——出演名单](/static/images/2017-11-02-CG5thSSAinHK/5.png)\n\n![开场留影，地藏位](/static/images/2017-11-02-CG5thSSAinHK/6.png)\n\n![过期了的抽选券](/static/images/2017-11-02-CG5thSSAinHK/7.png)\n","slug":"2017-11-02-CG5thSSAinHK","published":1,"updated":"2022-03-31T04:28:19.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9l001kvripdzh15lga","content":"<blockquote>\n<p>THE IDOLM@STER CINDERELLA GIRLS 5thLIVE TOUR Serendipity Parade!!! Live viewing in Hong Kong</p>\n</blockquote>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/1.png\" alt=\"A店收获之-1\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/2.png\" alt=\"A店收获-2\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/3.png\" alt=\"入场券\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/4.png\" alt=\"港P派送的物品\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/5.png\" alt=\"自制call本部分内容——出演名单\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/6.png\" alt=\"开场留影，地藏位\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/7.png\" alt=\"过期了的抽选券\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>THE IDOLM@STER CINDERELLA GIRLS 5thLIVE TOUR Serendipity Parade!!! Live viewing in Hong Kong</p>\n</blockquote>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/1.png\" alt=\"A店收获之-1\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/2.png\" alt=\"A店收获-2\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/3.png\" alt=\"入场券\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/4.png\" alt=\"港P派送的物品\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/5.png\" alt=\"自制call本部分内容——出演名单\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/6.png\" alt=\"开场留影，地藏位\"></p>\n<p><img src=\"/static/images/2017-11-02-CG5thSSAinHK/7.png\" alt=\"过期了的抽选券\"></p>\n"},{"title":"RegEx","date":"2018-02-26T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 这篇博文，旨在记录一些我个人开发时使用过的一些正则表达式  \n> 我会给出几种格式来方便各位使用\n\n> 更新时间：2018-02-26\n\n## 手机号码\n\n### 第一种\n\n-   Javascript\n\n```javascript\nvar regex = /^(([+])?(86)(-)?)?1[3|4|5|7|8]\\d{9}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /(([+])?(86)(-)?)?1[3|4|5|7|8]\\d{9}/\n```\n\n-   Java\n\n```java\nString regex = \"(([+])?(86)(-)?)?1[3|4|5|7|8]\\\\d{9}\";\n```\n\n![](/static/images/2018-02-26-RegEx/1.png)\n\n### 第二种\n\n-   Javascript\n\n```javascript\nvar regex = /^((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d{9}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d{9}/\n```\n\n-   Java\n\n```java\nString regex = \"((86)|(\\\\+86))?(\\\\-)?1[3|4|5|7|8]\\\\d{9}\";\n```\n\n![](/static/images/2018-02-26-RegEx/2.png)\n\n## MAC 地址\n\n-   Javascript\n\n```javascript\nvar regex = /^([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}/\n```\n\n-   Java\n\n```java\nString regex = \"([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}\";\n```\n\n![](/static/images/2018-02-26-RegEx/3.png)\n\n## URL 的域名解析\n\n```regexp\n^(http[s]?):\\/\\/([a-zA-Z0-9][-a-zA-Z0-9]{0,62}\\.)?(([a-zA-z0-9][-a-zA-z0-9]{0,62})((\\.[a-zA-Z]{2,3})+))(:[0-9]{1,5})?[-a-zA-Z0-9()@:%_\\\\\\+\\.~#?&\\/=]*$\n```\n\n## 媒体文件后缀判断\n\n允许添加任意想要支持的格式在该正则判断中\n\n-   Javascript\n\n```javascript\nvar regex = /^[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)/\n```\n\n-   Java\n\n```java\nString regex = \"[\\\\s\\\\S]*\\\\.(png|jpg|bmp|gif|mp4|flv|mkv)\";\n```\n\n![](/static/images/2018-02-26-RegEx/4.png)\n\n## Python logging in Ideolog plugin\n\n这里假定有如下的 logging 输出格式\n\n```yaml\nformatters:\n    default_format:\n        format: \"%(asctime)s [%(name)s] [%(levelname)s] %(message)s\"\n        datefmt: \"%Y-%m-%d %H:%M:%S\"\n```\n\n用来匹配这个格式的日志的正则\n\n```regexp\n^(\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s\\[(.*)]\\s\\[(.*)]\\s(.*)$\n```\n\n日志开头的正则\n\n```regexp\n^\\d\n```\n\n时间格式\n\n```text\nyyyy-MM-dd HH:mm:ss\n```\n\n其他配置\n\n```yaml\nTime capture group: 1\nSeverity capture group: 3\nCategory capture group: 2\n```\n","source":"_posts/2018-02-26-RegEx.md","raw":"---\ntitle: RegEx\ndate: 2018-02-26 10:00:00\ncategories:\n    - guide\ntags:\n    - regex\nmp3:\ncover:\n---\n\n> 这篇博文，旨在记录一些我个人开发时使用过的一些正则表达式  \n> 我会给出几种格式来方便各位使用\n\n> 更新时间：2018-02-26\n\n## 手机号码\n\n### 第一种\n\n-   Javascript\n\n```javascript\nvar regex = /^(([+])?(86)(-)?)?1[3|4|5|7|8]\\d{9}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /(([+])?(86)(-)?)?1[3|4|5|7|8]\\d{9}/\n```\n\n-   Java\n\n```java\nString regex = \"(([+])?(86)(-)?)?1[3|4|5|7|8]\\\\d{9}\";\n```\n\n![](/static/images/2018-02-26-RegEx/1.png)\n\n### 第二种\n\n-   Javascript\n\n```javascript\nvar regex = /^((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d{9}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d{9}/\n```\n\n-   Java\n\n```java\nString regex = \"((86)|(\\\\+86))?(\\\\-)?1[3|4|5|7|8]\\\\d{9}\";\n```\n\n![](/static/images/2018-02-26-RegEx/2.png)\n\n## MAC 地址\n\n-   Javascript\n\n```javascript\nvar regex = /^([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}/\n```\n\n-   Java\n\n```java\nString regex = \"([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}\";\n```\n\n![](/static/images/2018-02-26-RegEx/3.png)\n\n## URL 的域名解析\n\n```regexp\n^(http[s]?):\\/\\/([a-zA-Z0-9][-a-zA-Z0-9]{0,62}\\.)?(([a-zA-z0-9][-a-zA-z0-9]{0,62})((\\.[a-zA-Z]{2,3})+))(:[0-9]{1,5})?[-a-zA-Z0-9()@:%_\\\\\\+\\.~#?&\\/=]*$\n```\n\n## 媒体文件后缀判断\n\n允许添加任意想要支持的格式在该正则判断中\n\n-   Javascript\n\n```javascript\nvar regex = /^[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)$/\n```\n\n-   Groovy\n\n```groovy\ndef regex = /[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)/\n```\n\n-   Java\n\n```java\nString regex = \"[\\\\s\\\\S]*\\\\.(png|jpg|bmp|gif|mp4|flv|mkv)\";\n```\n\n![](/static/images/2018-02-26-RegEx/4.png)\n\n## Python logging in Ideolog plugin\n\n这里假定有如下的 logging 输出格式\n\n```yaml\nformatters:\n    default_format:\n        format: \"%(asctime)s [%(name)s] [%(levelname)s] %(message)s\"\n        datefmt: \"%Y-%m-%d %H:%M:%S\"\n```\n\n用来匹配这个格式的日志的正则\n\n```regexp\n^(\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s\\[(.*)]\\s\\[(.*)]\\s(.*)$\n```\n\n日志开头的正则\n\n```regexp\n^\\d\n```\n\n时间格式\n\n```text\nyyyy-MM-dd HH:mm:ss\n```\n\n其他配置\n\n```yaml\nTime capture group: 1\nSeverity capture group: 3\nCategory capture group: 2\n```\n","slug":"2018-02-26-RegEx","published":1,"updated":"2022-03-31T04:31:18.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9l001mvrip09zi2o0w","content":"<blockquote>\n<p>这篇博文，旨在记录一些我个人开发时使用过的一些正则表达式<br>我会给出几种格式来方便各位使用</p>\n</blockquote>\n<blockquote>\n<p>更新时间：2018-02-26</p>\n</blockquote>\n<h2 id=\"手机号码\"><a href=\"#手机号码\" class=\"headerlink\" title=\"手机号码\"></a>手机号码</h2><h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^(([+])?(86)(-)?)?1[3|4|5|7|8]\\d&#123;9&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/(([+])?(86)(-)?)?1[3|4|5|7|8]\\d&#123;9&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(([+])?(86)(-)?)?1[3|4|5|7|8]\\\\d&#123;9&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/1.png\"></p>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d&#123;9&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d&#123;9&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;((86)|(\\\\+86))?(\\\\-)?1[3|4|5|7|8]\\\\d&#123;9&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/2.png\"></p>\n<h2 id=\"MAC-地址\"><a href=\"#MAC-地址\" class=\"headerlink\" title=\"MAC 地址\"></a>MAC 地址</h2><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/3.png\"></p>\n<h2 id=\"URL-的域名解析\"><a href=\"#URL-的域名解析\" class=\"headerlink\" title=\"URL 的域名解析\"></a>URL 的域名解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(http[s]?):\\/\\/([a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;\\.)?(([a-zA-z0-9][-a-zA-z0-9]&#123;0,62&#125;)((\\.[a-zA-Z]&#123;2,3&#125;)+))(:[0-9]&#123;1,5&#125;)?[-a-zA-Z0-9()@:%_\\\\\\+\\.~#?&amp;\\/=]*$</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"媒体文件后缀判断\"><a href=\"#媒体文件后缀判断\" class=\"headerlink\" title=\"媒体文件后缀判断\"></a>媒体文件后缀判断</h2><p>允许添加任意想要支持的格式在该正则判断中</p>\n<ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;[\\\\s\\\\S]*\\\\.(png|jpg|bmp|gif|mp4|flv|mkv)&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/4.png\"></p>\n<h2 id=\"Python-logging-in-Ideolog-plugin\"><a href=\"#Python-logging-in-Ideolog-plugin\" class=\"headerlink\" title=\"Python logging in Ideolog plugin\"></a>Python logging in Ideolog plugin</h2><p>这里假定有如下的 logging 输出格式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">formatters:</span></span><br><span class=\"line\">    <span class=\"attr\">default_format:</span></span><br><span class=\"line\">        <span class=\"attr\">format:</span> <span class=\"string\">&quot;%(asctime)s [%(name)s] [%(levelname)s] %(message)s&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">datefmt:</span> <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>用来匹配这个格式的日志的正则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;\\s\\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;)\\s\\[(.*)]\\s\\[(.*)]\\s(.*)$</span><br></pre></td></tr></table></figure>\n\n<p>日志开头的正则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d</span><br></pre></td></tr></table></figure>\n\n<p>时间格式</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yyyy-MM-dd HH:mm:ss</span><br></pre></td></tr></table></figure>\n\n<p>其他配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Time capture group:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Severity capture group:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">Category capture group:</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这篇博文，旨在记录一些我个人开发时使用过的一些正则表达式<br>我会给出几种格式来方便各位使用</p>\n</blockquote>\n<blockquote>\n<p>更新时间：2018-02-26</p>\n</blockquote>\n<h2 id=\"手机号码\"><a href=\"#手机号码\" class=\"headerlink\" title=\"手机号码\"></a>手机号码</h2><h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^(([+])?(86)(-)?)?1[3|4|5|7|8]\\d&#123;9&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/(([+])?(86)(-)?)?1[3|4|5|7|8]\\d&#123;9&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(([+])?(86)(-)?)?1[3|4|5|7|8]\\\\d&#123;9&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/1.png\"></p>\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d&#123;9&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/((86)|(\\+86))?(\\-)?1[3|4|5|7|8]\\d&#123;9&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;((86)|(\\\\+86))?(\\\\-)?1[3|4|5|7|8]\\\\d&#123;9&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/2.png\"></p>\n<h2 id=\"MAC-地址\"><a href=\"#MAC-地址\" class=\"headerlink\" title=\"MAC 地址\"></a>MAC 地址</h2><ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;([A-Fa-f0-9]&#123;2&#125;[:-])&#123;5&#125;[A-Fa-f0-9]&#123;2&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/3.png\"></p>\n<h2 id=\"URL-的域名解析\"><a href=\"#URL-的域名解析\" class=\"headerlink\" title=\"URL 的域名解析\"></a>URL 的域名解析</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(http[s]?):\\/\\/([a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;\\.)?(([a-zA-z0-9][-a-zA-z0-9]&#123;0,62&#125;)((\\.[a-zA-Z]&#123;2,3&#125;)+))(:[0-9]&#123;1,5&#125;)?[-a-zA-Z0-9()@:%_\\\\\\+\\.~#?&amp;\\/=]*$</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"媒体文件后缀判断\"><a href=\"#媒体文件后缀判断\" class=\"headerlink\" title=\"媒体文件后缀判断\"></a>媒体文件后缀判断</h2><p>允许添加任意想要支持的格式在该正则判断中</p>\n<ul>\n<li>Javascript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)$/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Groovy</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> regex = <span class=\"regexp\">/[\\s\\S]*\\.(png|jpg|bmp|gif|mp4|flv|mkv)/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;[\\\\s\\\\S]*\\\\.(png|jpg|bmp|gif|mp4|flv|mkv)&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/static/images/2018-02-26-RegEx/4.png\"></p>\n<h2 id=\"Python-logging-in-Ideolog-plugin\"><a href=\"#Python-logging-in-Ideolog-plugin\" class=\"headerlink\" title=\"Python logging in Ideolog plugin\"></a>Python logging in Ideolog plugin</h2><p>这里假定有如下的 logging 输出格式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">formatters:</span></span><br><span class=\"line\">    <span class=\"attr\">default_format:</span></span><br><span class=\"line\">        <span class=\"attr\">format:</span> <span class=\"string\">&quot;%(asctime)s [%(name)s] [%(levelname)s] %(message)s&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">datefmt:</span> <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>用来匹配这个格式的日志的正则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;\\s\\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;)\\s\\[(.*)]\\s\\[(.*)]\\s(.*)$</span><br></pre></td></tr></table></figure>\n\n<p>日志开头的正则</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d</span><br></pre></td></tr></table></figure>\n\n<p>时间格式</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yyyy-MM-dd HH:mm:ss</span><br></pre></td></tr></table></figure>\n\n<p>其他配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Time capture group:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Severity capture group:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">Category capture group:</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JSON in Swift4","date":"2018-01-31T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 记录使用SwiftyJSON和HandyJSON在Swift 4中处理JSON文件的过程\n\n最近接了一个项目，这个项目用到了[中央天气预报 API](https://github.com/jokermonn/-Api/blob/master/CenterWeather.md)的接口，这个接口提供了其所用城市码的数据文件，我采用了 JSON 文件来处理数据信息。\n\n## 引\n\n在进行 Swift 的 JSON 文件处理时，我查阅了大量资料，大多数的博客均采用了以下的类来读取 JSON 文件并转换为`Array`\n\n-   `NSBundle`\n-   `NSData`\n-   `NSJSONSerialization`\n\n## 存在了问题\n\n参考他人博客的处理方式，我在自己的平台上测试时，发现会出现以下的\"神秘\"异常\n\n![](/static/images/2018-01-31-JSONinSwift/1.png)\n\n嗯，嗯？`NSBundle`呢？？上下翻看发现`NSBundle`并没有出现在匹配列表中。\n\n这个情况我不考虑引入问题，而是考虑 Swift 3 到 Swift 4 的差异，于是我查找了 Xcode 中的 Develop Documentation\n\n![](/static/images/2018-01-31-JSONinSwift/2.png)\n\n哈！果然没有第一个出现，说明这个类现在已经被改成别的名称了（顺势吐槽不是说好的 NS 公司的产物吗居然改名？？）\n\n然后把 NS 去掉，看看结果……\n\n![](/static/images/2018-01-31-JSONinSwift/3.png)\n\nFoundation？？`Bundle`？？右边有个链接查看 Objective-C 的，点一下\n\n![](/static/images/2018-01-31-JSONinSwift/4.gif)\n\n绝了，还真是 Swift 和 Objective-C 两个版本不同名的\n\n## 找到问题，出个解法\n\n既然改名叫了`Bundle`，那其他的两个应该也没差了吧，果断写出下面的代码来试试\n\n```swift\n// JSON文件名: CityCode.json\nlet path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\nlet nsData: NSData! = NSData(contentsOfFile: path)\nlet data: Data! = Data(referencing: nsData!)\nlet json = try? JSON(data: data)\n```\n\n这里为什么不直接用`Data(contentsOf: URL)`，别问为什么，有一个更容易看懂的`NSData(contentsOfFile: String)`和一个`Data(referencing: NSData)`，懒得用`NSURL`了\n\n好吧好吧还是给一个 URL 版的\n\n```swift\nlet path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\nlet url: URL! = NSURL.fileURL(withPath: path)\nlet data: Data! = try? Data(contentsOf: url)\nlet json = try? JSON(data: data)\n```\n\n## SwiftyJSON 和 HandyJSON\n\n细心的话你会注意到其中的`JSON(data: data)`和`class City: HandyJSON`\n\n#### `JSON(data: data)`\n\n这是 SwiftyJSON 创建 JSON 对象的方法，使用由`Data`类解析 JSON 文件获得的数据\n\n#### `class City: HandyJSON`\n\n这是使`City`类能够支持 JSON to Model 的方式，通过使用 HandyJSON 框架，为`City`类提供反序列化能力，并通过下面的代码将 JSON 文件转化成`Array`\n\n```swift\ncityArray.append(JSONDeserializer<City>.deserializeFrom(json: value.rawString())!)\n```\n\n## 应用范例\n\n这里给出中央天气接口城市数据的 JSON 部分内容，以及我个人封装的城市对象 Model，和完整的 CityUtils 代码\n\n#### CityCode.json\n\n```json\n[\n    {\n        \"ID\": \"1\",\n        \"cityName\": \"北京\",\n        \"cityEN\": \"Beijing\",\n        \"townID\": \"CHBJ000000\",\n        \"townName\": \"北京\",\n        \"townEN\": \"Beijing\"\n    },\n    {\n        \"ID\": \"2\",\n        \"cityName\": \"北京\",\n        \"cityEN\": \"Beijing\",\n        \"townID\": \"CHBJ000100\",\n        \"townName\": \"海淀\",\n        \"townEN\": \"Haidian\"\n    }\n]\n```\n\n#### Weather.swift\n\n```swift\n/// 天气API的基础类, 继承HandyJSON\nclass City: HandyJSON {\n\n    var ID: String\n    var cityName: String\n    var cityEN: String\n    var townID: String\n    var townName: String\n    var townEN: String\n\n    required convenience init() {\n        self.init(ID: \"\", cityName: \"\", cityEN: \"\", townID: \"\", townName: \"\", townEN: \"\")\n    }\n\n    init(ID: String, cityName: String, cityEN: String, townID: String, townName: String, townEN: String) {\n        self.ID = ID\n        self.cityName = cityName\n        self.cityEN = cityEN\n        self.townID = townID\n        self.townName = townName\n        self.townEN = townEN\n    }\n\n    var description: String {\n        return self.toJSONString() ?? \"[]\"\n    }\n\n}\n\n/// 城市工具类\n///\n/// 城市信息通过CityCode.json获取\nclass CityUtils {\n\n    /// 城市工具的单例\n    static let instance = CityUtils()\n\n    /// 从JSON数据库文件获取的城市列表\n    private var cityArray: [City]\n\n    /// 访问城市列表\n    var cities: [City] {\n        return cityArray\n    }\n\n    /// 私有的初始化方法\n    private init() {\n        cityArray = []\n        // NSData style\n        // let path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\n        // let nsData: NSData! = NSData(contentsOfFile: path)\n        // let data: Data! = Data(referencing: nsData!)\n        // let json = try? JSON(data: data)\n\n        // URL style\n        let path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\n        let url: URL! = NSURL.fileURL(withPath: path)\n        let data: Data! = try? Data(contentsOf: url)\n        let json = try? JSON(data: data)\n        for (_, value) in json! {\n            cityArray.append(JSONDeserializer<City>.deserializeFrom(json: value.rawString())!)\n        }\n    }\n\n    /// 通过ID取得单个城市对象\n    func get(byID id: String) -> City? {\n        for city in cityArray {\n            if city.ID == id {\n                return city\n            }\n        }\n        return nil\n    }\n\n    /// 通过区域ID获取单个城市对象, 另外区域ID可以直接用于请求API\n    func get(byTownID townID: String) -> City? {\n        for city in cityArray {\n            if city.townID == townID {\n                return city\n            }\n        }\n        return nil\n    }\n\n    /// 通过城市名称获取该城市下的区域列表\n    func list(byCityName cityName: String) -> [City] {\n        var list: [City] = []\n        for city in cityArray {\n            if city.cityName == cityName {\n                list.append(city)\n            }\n        }\n        return list\n    }\n\n    /// 通过城市英文名称获取该城市下的区域列表\n    func list(byCityEN cityEN: String) -> [City] {\n        var list: [City] = []\n        for city in cityArray {\n            if city.cityEN == cityEN {\n                list.append(city)\n            }\n        }\n        return list\n    }\n\n}\n```\n","source":"_posts/2018-01-31-JSONinSwift.md","raw":"---\ntitle: JSON in Swift4\ndate: 2018-01-31 10:00:00\ncategories:\n    - guide\ntags:\n    - Swift\nmp3:\ncover:\n---\n\n> 记录使用SwiftyJSON和HandyJSON在Swift 4中处理JSON文件的过程\n\n最近接了一个项目，这个项目用到了[中央天气预报 API](https://github.com/jokermonn/-Api/blob/master/CenterWeather.md)的接口，这个接口提供了其所用城市码的数据文件，我采用了 JSON 文件来处理数据信息。\n\n## 引\n\n在进行 Swift 的 JSON 文件处理时，我查阅了大量资料，大多数的博客均采用了以下的类来读取 JSON 文件并转换为`Array`\n\n-   `NSBundle`\n-   `NSData`\n-   `NSJSONSerialization`\n\n## 存在了问题\n\n参考他人博客的处理方式，我在自己的平台上测试时，发现会出现以下的\"神秘\"异常\n\n![](/static/images/2018-01-31-JSONinSwift/1.png)\n\n嗯，嗯？`NSBundle`呢？？上下翻看发现`NSBundle`并没有出现在匹配列表中。\n\n这个情况我不考虑引入问题，而是考虑 Swift 3 到 Swift 4 的差异，于是我查找了 Xcode 中的 Develop Documentation\n\n![](/static/images/2018-01-31-JSONinSwift/2.png)\n\n哈！果然没有第一个出现，说明这个类现在已经被改成别的名称了（顺势吐槽不是说好的 NS 公司的产物吗居然改名？？）\n\n然后把 NS 去掉，看看结果……\n\n![](/static/images/2018-01-31-JSONinSwift/3.png)\n\nFoundation？？`Bundle`？？右边有个链接查看 Objective-C 的，点一下\n\n![](/static/images/2018-01-31-JSONinSwift/4.gif)\n\n绝了，还真是 Swift 和 Objective-C 两个版本不同名的\n\n## 找到问题，出个解法\n\n既然改名叫了`Bundle`，那其他的两个应该也没差了吧，果断写出下面的代码来试试\n\n```swift\n// JSON文件名: CityCode.json\nlet path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\nlet nsData: NSData! = NSData(contentsOfFile: path)\nlet data: Data! = Data(referencing: nsData!)\nlet json = try? JSON(data: data)\n```\n\n这里为什么不直接用`Data(contentsOf: URL)`，别问为什么，有一个更容易看懂的`NSData(contentsOfFile: String)`和一个`Data(referencing: NSData)`，懒得用`NSURL`了\n\n好吧好吧还是给一个 URL 版的\n\n```swift\nlet path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\nlet url: URL! = NSURL.fileURL(withPath: path)\nlet data: Data! = try? Data(contentsOf: url)\nlet json = try? JSON(data: data)\n```\n\n## SwiftyJSON 和 HandyJSON\n\n细心的话你会注意到其中的`JSON(data: data)`和`class City: HandyJSON`\n\n#### `JSON(data: data)`\n\n这是 SwiftyJSON 创建 JSON 对象的方法，使用由`Data`类解析 JSON 文件获得的数据\n\n#### `class City: HandyJSON`\n\n这是使`City`类能够支持 JSON to Model 的方式，通过使用 HandyJSON 框架，为`City`类提供反序列化能力，并通过下面的代码将 JSON 文件转化成`Array`\n\n```swift\ncityArray.append(JSONDeserializer<City>.deserializeFrom(json: value.rawString())!)\n```\n\n## 应用范例\n\n这里给出中央天气接口城市数据的 JSON 部分内容，以及我个人封装的城市对象 Model，和完整的 CityUtils 代码\n\n#### CityCode.json\n\n```json\n[\n    {\n        \"ID\": \"1\",\n        \"cityName\": \"北京\",\n        \"cityEN\": \"Beijing\",\n        \"townID\": \"CHBJ000000\",\n        \"townName\": \"北京\",\n        \"townEN\": \"Beijing\"\n    },\n    {\n        \"ID\": \"2\",\n        \"cityName\": \"北京\",\n        \"cityEN\": \"Beijing\",\n        \"townID\": \"CHBJ000100\",\n        \"townName\": \"海淀\",\n        \"townEN\": \"Haidian\"\n    }\n]\n```\n\n#### Weather.swift\n\n```swift\n/// 天气API的基础类, 继承HandyJSON\nclass City: HandyJSON {\n\n    var ID: String\n    var cityName: String\n    var cityEN: String\n    var townID: String\n    var townName: String\n    var townEN: String\n\n    required convenience init() {\n        self.init(ID: \"\", cityName: \"\", cityEN: \"\", townID: \"\", townName: \"\", townEN: \"\")\n    }\n\n    init(ID: String, cityName: String, cityEN: String, townID: String, townName: String, townEN: String) {\n        self.ID = ID\n        self.cityName = cityName\n        self.cityEN = cityEN\n        self.townID = townID\n        self.townName = townName\n        self.townEN = townEN\n    }\n\n    var description: String {\n        return self.toJSONString() ?? \"[]\"\n    }\n\n}\n\n/// 城市工具类\n///\n/// 城市信息通过CityCode.json获取\nclass CityUtils {\n\n    /// 城市工具的单例\n    static let instance = CityUtils()\n\n    /// 从JSON数据库文件获取的城市列表\n    private var cityArray: [City]\n\n    /// 访问城市列表\n    var cities: [City] {\n        return cityArray\n    }\n\n    /// 私有的初始化方法\n    private init() {\n        cityArray = []\n        // NSData style\n        // let path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\n        // let nsData: NSData! = NSData(contentsOfFile: path)\n        // let data: Data! = Data(referencing: nsData!)\n        // let json = try? JSON(data: data)\n\n        // URL style\n        let path: String! = Bundle.main.path(forResource: \"CityCode\", ofType: \"json\")\n        let url: URL! = NSURL.fileURL(withPath: path)\n        let data: Data! = try? Data(contentsOf: url)\n        let json = try? JSON(data: data)\n        for (_, value) in json! {\n            cityArray.append(JSONDeserializer<City>.deserializeFrom(json: value.rawString())!)\n        }\n    }\n\n    /// 通过ID取得单个城市对象\n    func get(byID id: String) -> City? {\n        for city in cityArray {\n            if city.ID == id {\n                return city\n            }\n        }\n        return nil\n    }\n\n    /// 通过区域ID获取单个城市对象, 另外区域ID可以直接用于请求API\n    func get(byTownID townID: String) -> City? {\n        for city in cityArray {\n            if city.townID == townID {\n                return city\n            }\n        }\n        return nil\n    }\n\n    /// 通过城市名称获取该城市下的区域列表\n    func list(byCityName cityName: String) -> [City] {\n        var list: [City] = []\n        for city in cityArray {\n            if city.cityName == cityName {\n                list.append(city)\n            }\n        }\n        return list\n    }\n\n    /// 通过城市英文名称获取该城市下的区域列表\n    func list(byCityEN cityEN: String) -> [City] {\n        var list: [City] = []\n        for city in cityArray {\n            if city.cityEN == cityEN {\n                list.append(city)\n            }\n        }\n        return list\n    }\n\n}\n```\n","slug":"2018-01-31-JSONinSwift","published":1,"updated":"2022-03-31T04:30:53.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9l001nvrip15omff7y","content":"<blockquote>\n<p>记录使用SwiftyJSON和HandyJSON在Swift 4中处理JSON文件的过程</p>\n</blockquote>\n<p>最近接了一个项目，这个项目用到了<a href=\"https://github.com/jokermonn/-Api/blob/master/CenterWeather.md\">中央天气预报 API</a>的接口，这个接口提供了其所用城市码的数据文件，我采用了 JSON 文件来处理数据信息。</p>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>在进行 Swift 的 JSON 文件处理时，我查阅了大量资料，大多数的博客均采用了以下的类来读取 JSON 文件并转换为<code>Array</code></p>\n<ul>\n<li><code>NSBundle</code></li>\n<li><code>NSData</code></li>\n<li><code>NSJSONSerialization</code></li>\n</ul>\n<h2 id=\"存在了问题\"><a href=\"#存在了问题\" class=\"headerlink\" title=\"存在了问题\"></a>存在了问题</h2><p>参考他人博客的处理方式，我在自己的平台上测试时，发现会出现以下的”神秘”异常</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/1.png\"></p>\n<p>嗯，嗯？<code>NSBundle</code>呢？？上下翻看发现<code>NSBundle</code>并没有出现在匹配列表中。</p>\n<p>这个情况我不考虑引入问题，而是考虑 Swift 3 到 Swift 4 的差异，于是我查找了 Xcode 中的 Develop Documentation</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/2.png\"></p>\n<p>哈！果然没有第一个出现，说明这个类现在已经被改成别的名称了（顺势吐槽不是说好的 NS 公司的产物吗居然改名？？）</p>\n<p>然后把 NS 去掉，看看结果……</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/3.png\"></p>\n<p>Foundation？？<code>Bundle</code>？？右边有个链接查看 Objective-C 的，点一下</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/4.gif\"></p>\n<p>绝了，还真是 Swift 和 Objective-C 两个版本不同名的</p>\n<h2 id=\"找到问题，出个解法\"><a href=\"#找到问题，出个解法\" class=\"headerlink\" title=\"找到问题，出个解法\"></a>找到问题，出个解法</h2><p>既然改名叫了<code>Bundle</code>，那其他的两个应该也没差了吧，果断写出下面的代码来试试</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSON文件名: CityCode.json</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsData: <span class=\"type\">NSData</span>! <span class=\"operator\">=</span> <span class=\"type\">NSData</span>(contentsOfFile: path)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"type\">Data</span>(referencing: nsData<span class=\"operator\">!</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不直接用<code>Data(contentsOf: URL)</code>，别问为什么，有一个更容易看懂的<code>NSData(contentsOfFile: String)</code>和一个<code>Data(referencing: NSData)</code>，懒得用<code>NSURL</code>了</p>\n<p>好吧好吧还是给一个 URL 版的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> url: <span class=\"type\">URL</span>! <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>.fileURL(withPath: path)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SwiftyJSON-和-HandyJSON\"><a href=\"#SwiftyJSON-和-HandyJSON\" class=\"headerlink\" title=\"SwiftyJSON 和 HandyJSON\"></a>SwiftyJSON 和 HandyJSON</h2><p>细心的话你会注意到其中的<code>JSON(data: data)</code>和<code>class City: HandyJSON</code></p>\n<h4 id=\"JSON-data-data\"><a href=\"#JSON-data-data\" class=\"headerlink\" title=\"JSON(data: data)\"></a><code>JSON(data: data)</code></h4><p>这是 SwiftyJSON 创建 JSON 对象的方法，使用由<code>Data</code>类解析 JSON 文件获得的数据</p>\n<h4 id=\"class-City-HandyJSON\"><a href=\"#class-City-HandyJSON\" class=\"headerlink\" title=\"class City: HandyJSON\"></a><code>class City: HandyJSON</code></h4><p>这是使<code>City</code>类能够支持 JSON to Model 的方式，通过使用 HandyJSON 框架，为<code>City</code>类提供反序列化能力，并通过下面的代码将 JSON 文件转化成<code>Array</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityArray.append(<span class=\"type\">JSONDeserializer</span>&lt;<span class=\"type\">City</span>&gt;.deserializeFrom(json: value.rawString())<span class=\"operator\">!</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用范例\"><a href=\"#应用范例\" class=\"headerlink\" title=\"应用范例\"></a>应用范例</h2><p>这里给出中央天气接口城市数据的 JSON 部分内容，以及我个人封装的城市对象 Model，和完整的 CityUtils 代码</p>\n<h4 id=\"CityCode-json\"><a href=\"#CityCode-json\" class=\"headerlink\" title=\"CityCode.json\"></a>CityCode.json</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHBJ000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHBJ000100&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;海淀&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Haidian&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Weather-swift\"><a href=\"#Weather-swift\" class=\"headerlink\" title=\"Weather.swift\"></a>Weather.swift</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 天气API的基础类, 继承HandyJSON</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">City</span>: <span class=\"title class_\">HandyJSON</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">ID</span>: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cityName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cityEN: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townID: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townEN: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(ID: <span class=\"string\">&quot;&quot;</span>, cityName: <span class=\"string\">&quot;&quot;</span>, cityEN: <span class=\"string\">&quot;&quot;</span>, townID: <span class=\"string\">&quot;&quot;</span>, townName: <span class=\"string\">&quot;&quot;</span>, townEN: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">ID</span>: <span class=\"type\">String</span>, <span class=\"params\">cityName</span>: <span class=\"type\">String</span>, <span class=\"params\">cityEN</span>: <span class=\"type\">String</span>, <span class=\"params\">townID</span>: <span class=\"type\">String</span>, <span class=\"params\">townName</span>: <span class=\"type\">String</span>, <span class=\"params\">townEN</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"type\">ID</span> <span class=\"operator\">=</span> <span class=\"type\">ID</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cityName <span class=\"operator\">=</span> cityName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cityEN <span class=\"operator\">=</span> cityEN</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townID <span class=\"operator\">=</span> townID</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townName <span class=\"operator\">=</span> townName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townEN <span class=\"operator\">=</span> townEN</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.toJSONString() <span class=\"operator\">??</span> <span class=\"string\">&quot;[]&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 城市工具类</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// 城市信息通过CityCode.json获取</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CityUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 城市工具的单例</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> instance <span class=\"operator\">=</span> <span class=\"type\">CityUtils</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 从JSON数据库文件获取的城市列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cityArray: [<span class=\"type\">City</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 访问城市列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cities: [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cityArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 私有的初始化方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        cityArray <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"comment\">// NSData style</span></span><br><span class=\"line\">        <span class=\"comment\">// let path: String! = Bundle.main.path(forResource: &quot;CityCode&quot;, ofType: &quot;json&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">// let nsData: NSData! = NSData(contentsOfFile: path)</span></span><br><span class=\"line\">        <span class=\"comment\">// let data: Data! = Data(referencing: nsData!)</span></span><br><span class=\"line\">        <span class=\"comment\">// let json = try? JSON(data: data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// URL style</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url: <span class=\"type\">URL</span>! <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>.fileURL(withPath: path)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: url)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">_</span>, value) <span class=\"keyword\">in</span> json<span class=\"operator\">!</span> &#123;</span><br><span class=\"line\">            cityArray.append(<span class=\"type\">JSONDeserializer</span>&lt;<span class=\"type\">City</span>&gt;.deserializeFrom(json: value.rawString())<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过ID取得单个城市对象</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"params\">byID</span> <span class=\"params\">id</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">City</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.<span class=\"type\">ID</span> <span class=\"operator\">==</span> id &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> city</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过区域ID获取单个城市对象, 另外区域ID可以直接用于请求API</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"params\">byTownID</span> <span class=\"params\">townID</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">City</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.townID <span class=\"operator\">==</span> townID &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> city</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过城市名称获取该城市下的区域列表</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">list</span>(<span class=\"params\">byCityName</span> <span class=\"params\">cityName</span>: <span class=\"type\">String</span>) -&gt; [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list: [<span class=\"type\">City</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.cityName <span class=\"operator\">==</span> cityName &#123;</span><br><span class=\"line\">                list.append(city)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过城市英文名称获取该城市下的区域列表</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">list</span>(<span class=\"params\">byCityEN</span> <span class=\"params\">cityEN</span>: <span class=\"type\">String</span>) -&gt; [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list: [<span class=\"type\">City</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.cityEN <span class=\"operator\">==</span> cityEN &#123;</span><br><span class=\"line\">                list.append(city)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录使用SwiftyJSON和HandyJSON在Swift 4中处理JSON文件的过程</p>\n</blockquote>\n<p>最近接了一个项目，这个项目用到了<a href=\"https://github.com/jokermonn/-Api/blob/master/CenterWeather.md\">中央天气预报 API</a>的接口，这个接口提供了其所用城市码的数据文件，我采用了 JSON 文件来处理数据信息。</p>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>在进行 Swift 的 JSON 文件处理时，我查阅了大量资料，大多数的博客均采用了以下的类来读取 JSON 文件并转换为<code>Array</code></p>\n<ul>\n<li><code>NSBundle</code></li>\n<li><code>NSData</code></li>\n<li><code>NSJSONSerialization</code></li>\n</ul>\n<h2 id=\"存在了问题\"><a href=\"#存在了问题\" class=\"headerlink\" title=\"存在了问题\"></a>存在了问题</h2><p>参考他人博客的处理方式，我在自己的平台上测试时，发现会出现以下的”神秘”异常</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/1.png\"></p>\n<p>嗯，嗯？<code>NSBundle</code>呢？？上下翻看发现<code>NSBundle</code>并没有出现在匹配列表中。</p>\n<p>这个情况我不考虑引入问题，而是考虑 Swift 3 到 Swift 4 的差异，于是我查找了 Xcode 中的 Develop Documentation</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/2.png\"></p>\n<p>哈！果然没有第一个出现，说明这个类现在已经被改成别的名称了（顺势吐槽不是说好的 NS 公司的产物吗居然改名？？）</p>\n<p>然后把 NS 去掉，看看结果……</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/3.png\"></p>\n<p>Foundation？？<code>Bundle</code>？？右边有个链接查看 Objective-C 的，点一下</p>\n<p><img src=\"/static/images/2018-01-31-JSONinSwift/4.gif\"></p>\n<p>绝了，还真是 Swift 和 Objective-C 两个版本不同名的</p>\n<h2 id=\"找到问题，出个解法\"><a href=\"#找到问题，出个解法\" class=\"headerlink\" title=\"找到问题，出个解法\"></a>找到问题，出个解法</h2><p>既然改名叫了<code>Bundle</code>，那其他的两个应该也没差了吧，果断写出下面的代码来试试</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSON文件名: CityCode.json</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> nsData: <span class=\"type\">NSData</span>! <span class=\"operator\">=</span> <span class=\"type\">NSData</span>(contentsOfFile: path)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"type\">Data</span>(referencing: nsData<span class=\"operator\">!</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br></pre></td></tr></table></figure>\n\n<p>这里为什么不直接用<code>Data(contentsOf: URL)</code>，别问为什么，有一个更容易看懂的<code>NSData(contentsOfFile: String)</code>和一个<code>Data(referencing: NSData)</code>，懒得用<code>NSURL</code>了</p>\n<p>好吧好吧还是给一个 URL 版的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> url: <span class=\"type\">URL</span>! <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>.fileURL(withPath: path)</span><br><span class=\"line\"><span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: url)</span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SwiftyJSON-和-HandyJSON\"><a href=\"#SwiftyJSON-和-HandyJSON\" class=\"headerlink\" title=\"SwiftyJSON 和 HandyJSON\"></a>SwiftyJSON 和 HandyJSON</h2><p>细心的话你会注意到其中的<code>JSON(data: data)</code>和<code>class City: HandyJSON</code></p>\n<h4 id=\"JSON-data-data\"><a href=\"#JSON-data-data\" class=\"headerlink\" title=\"JSON(data: data)\"></a><code>JSON(data: data)</code></h4><p>这是 SwiftyJSON 创建 JSON 对象的方法，使用由<code>Data</code>类解析 JSON 文件获得的数据</p>\n<h4 id=\"class-City-HandyJSON\"><a href=\"#class-City-HandyJSON\" class=\"headerlink\" title=\"class City: HandyJSON\"></a><code>class City: HandyJSON</code></h4><p>这是使<code>City</code>类能够支持 JSON to Model 的方式，通过使用 HandyJSON 框架，为<code>City</code>类提供反序列化能力，并通过下面的代码将 JSON 文件转化成<code>Array</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityArray.append(<span class=\"type\">JSONDeserializer</span>&lt;<span class=\"type\">City</span>&gt;.deserializeFrom(json: value.rawString())<span class=\"operator\">!</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用范例\"><a href=\"#应用范例\" class=\"headerlink\" title=\"应用范例\"></a>应用范例</h2><p>这里给出中央天气接口城市数据的 JSON 部分内容，以及我个人封装的城市对象 Model，和完整的 CityUtils 代码</p>\n<h4 id=\"CityCode-json\"><a href=\"#CityCode-json\" class=\"headerlink\" title=\"CityCode.json\"></a>CityCode.json</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHBJ000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;北京&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cityEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Beijing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHBJ000100&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;海淀&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;townEN&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Haidian&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Weather-swift\"><a href=\"#Weather-swift\" class=\"headerlink\" title=\"Weather.swift\"></a>Weather.swift</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 天气API的基础类, 继承HandyJSON</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">City</span>: <span class=\"title class_\">HandyJSON</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"type\">ID</span>: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cityName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cityEN: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townID: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> townEN: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(ID: <span class=\"string\">&quot;&quot;</span>, cityName: <span class=\"string\">&quot;&quot;</span>, cityEN: <span class=\"string\">&quot;&quot;</span>, townID: <span class=\"string\">&quot;&quot;</span>, townName: <span class=\"string\">&quot;&quot;</span>, townEN: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">ID</span>: <span class=\"type\">String</span>, <span class=\"params\">cityName</span>: <span class=\"type\">String</span>, <span class=\"params\">cityEN</span>: <span class=\"type\">String</span>, <span class=\"params\">townID</span>: <span class=\"type\">String</span>, <span class=\"params\">townName</span>: <span class=\"type\">String</span>, <span class=\"params\">townEN</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"type\">ID</span> <span class=\"operator\">=</span> <span class=\"type\">ID</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cityName <span class=\"operator\">=</span> cityName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cityEN <span class=\"operator\">=</span> cityEN</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townID <span class=\"operator\">=</span> townID</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townName <span class=\"operator\">=</span> townName</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.townEN <span class=\"operator\">=</span> townEN</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.toJSONString() <span class=\"operator\">??</span> <span class=\"string\">&quot;[]&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 城市工具类</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// 城市信息通过CityCode.json获取</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CityUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 城市工具的单例</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> instance <span class=\"operator\">=</span> <span class=\"type\">CityUtils</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 从JSON数据库文件获取的城市列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> cityArray: [<span class=\"type\">City</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 访问城市列表</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cities: [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cityArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 私有的初始化方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        cityArray <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"comment\">// NSData style</span></span><br><span class=\"line\">        <span class=\"comment\">// let path: String! = Bundle.main.path(forResource: &quot;CityCode&quot;, ofType: &quot;json&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">// let nsData: NSData! = NSData(contentsOfFile: path)</span></span><br><span class=\"line\">        <span class=\"comment\">// let data: Data! = Data(referencing: nsData!)</span></span><br><span class=\"line\">        <span class=\"comment\">// let json = try? JSON(data: data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// URL style</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> path: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">&quot;CityCode&quot;</span>, ofType: <span class=\"string\">&quot;json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url: <span class=\"type\">URL</span>! <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>.fileURL(withPath: path)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data: <span class=\"type\">Data</span>! <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">Data</span>(contentsOf: url)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">_</span>, value) <span class=\"keyword\">in</span> json<span class=\"operator\">!</span> &#123;</span><br><span class=\"line\">            cityArray.append(<span class=\"type\">JSONDeserializer</span>&lt;<span class=\"type\">City</span>&gt;.deserializeFrom(json: value.rawString())<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过ID取得单个城市对象</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"params\">byID</span> <span class=\"params\">id</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">City</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.<span class=\"type\">ID</span> <span class=\"operator\">==</span> id &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> city</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过区域ID获取单个城市对象, 另外区域ID可以直接用于请求API</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">get</span>(<span class=\"params\">byTownID</span> <span class=\"params\">townID</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">City</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.townID <span class=\"operator\">==</span> townID &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> city</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过城市名称获取该城市下的区域列表</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">list</span>(<span class=\"params\">byCityName</span> <span class=\"params\">cityName</span>: <span class=\"type\">String</span>) -&gt; [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list: [<span class=\"type\">City</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.cityName <span class=\"operator\">==</span> cityName &#123;</span><br><span class=\"line\">                list.append(city)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 通过城市英文名称获取该城市下的区域列表</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">list</span>(<span class=\"params\">byCityEN</span> <span class=\"params\">cityEN</span>: <span class=\"type\">String</span>) -&gt; [<span class=\"type\">City</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list: [<span class=\"type\">City</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> city <span class=\"keyword\">in</span> cityArray &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> city.cityEN <span class=\"operator\">==</span> cityEN &#123;</span><br><span class=\"line\">                list.append(city)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"在新版的macOS上切换不同版本的JDK","date":"2018-05-31T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 新版macOS的JDK切换似乎有些，不那么直接？这就仁者见仁了。\n\n## 引\n\n为了开发（或者说玩耍）的需要，我们或多或少都会在本机上安装多个版本的 JDK。在 Windows 上，我们可以很自然的，通过定义`JAVA_HOME`的路径，来修改我们要使用的 JDK 版本。在 Linux 系统中，我们也可以通过直接定义 JDK 的路径，去配置要使用的 JDK 版本。\n\n对于 Windows 和 Linux 开发者来说，修改 JDK 使用的版本可以说是非常舒适了，简单配置一下路径，就能实现目标。然而反观 macOS，它在 JDK 版本切换上，有些人会说它方便，有些人则会说它恼人，从 macOS 10.5+版本开始，Apple 为 macOS 加的一个新东西，可以说是让那些习惯了配置路径修改 JDK 版本的开发者感到很不习惯。\n\n## 背景\n\n让我们先来看看来自`Apple Developer - Guides and Sample Code`中[Technical Q&A QA1170 Important Java Directories on Mac OS X](https://developer.apple.com/library/content/qa/qa1170/_index.html)的文档说明。\n\n---\n\n#### Java Home\n\nMany Java applications need to know the location of a `$JAVA_HOME` directory. The `$JAVA_HOME` on Mac OS X should be found using the `/usr/libexec/java_home` command line tool on Mac OS X 10.5 or later. On older Mac OS X versions where the tool does not exist, use the fixed path \"`/Library/Java/Home`\". The `/usr/libexec/java_home` tool dynamically finds the top Java version specified in Java Preferences for the current user. This path allows access to the `bin` subdirectory where command line tools such as `java`, `javac`, etc. exist as on other platforms. The tool `/usr/libexec/java_home` allows you to specify a particular CPU architecture and Java platform version when locating a `$JAVA_HOME`.\n\nAnother advantage of dynamically finding this path, as opposed to hardcoding the fixed endpoint, is that it is updated when a new version of Java is downloaded via Software Update or installed with a newer version of Mac OS X. For this reason, it is important that developers do not install files in the JDKs inside of `/System`, since the changes will be lost with subsequent updates by newer versions of Java.\n\nTo obtain the path to the currently executing `$JAVA_HOME`, use the `java.home` System property.\n\n---\n\n可以看到，在使用 macOS 10.5 或更新版本的系统时，Apple 已经推荐开发者使用`/usr/libexec/java_home`去设置 JDK 的版本了，并且由于`java_home`会动态查找到最新的 JDK 版本，并且支持通过发行版通称，即 JDK1.7、JDK1.8、JDK11 等来获取路径，所以很适合用来切换不同版本的 JDK。\n\n让我们再来看一下接下来会用到的脚本。我们可以利用如`/usr/libexec/java_home -v 1.8`来查找当前本机存在的 Java 1.8 版本路径，在 Terminal 中执行该脚本会得到以下的返回值：\n\n```bash\n*****-Pro:~ *****$ /usr/libexec/java_home -v 1.8\n/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home\n```\n\n而输入参数为`-v 10`时，则会有下面的返回：\n\n```bash\n*****-Pro:~ *****$ /usr/libexec/java_home -v 10\n/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home\n```\n\n## 怎么做\n\n根据官方文档的说明，在新版本 macOS 中，我们只需要将以往的\n\n`export JAVA_HOME=<JAVA_HOME_PATH>`\n\n改写成形如\n\n`export JAVA_<MAIN_VERSION>_HOME=$(/usr/libexec/lava_home -v<MAIN_VERSION_NUMBER>)`\n\n即可完成对某个版本的配置，最后再以下面的配置完成 JDK 版本选择：\n\n`export JAVA_HOME=${JAVA_<MAIN_VERSION>_HOME}`\n\n而为了快速切换版本，我们可以使用 alias 来绑定别名执行相应的`export`操作。完整的脚本配置如下脚本所示：\n\n```bash\n# .bash_profile\n\n# Java\nexport JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)\nexport JAVA_X_HOME=$(/usr/libexec/java_home -v10)\nalias jdk8='export JAVA_HOME=${JAVA_8_HOME}'\nalias jdkX='export JAVA_HOME=${JAVA_X_HOME}'\nexport JAVA_HOME=${JAVA_8_HOME}\n```\n\n执行结果直接上 Bash 输出吧\n\n```shell\n*****-Pro:~ *****$ java -version\njava version \"1.8.0_161\"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n*****-Pro:~ *****$ jdkX\n*****-Pro:~ *****$ java -version\njava version \"10.0.1\" 2018-04-17\nJava(TM) SE Runtime Environment 18.3 (build 10.0.1+10)\nJava HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)\n*****-Pro:~ *****$ jdk8\n*****-Pro:~ *****$ java -version\njava version \"1.8.0_161\"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n```\n","source":"_posts/2018-05-31-SwitchDifferentJDK.md","raw":"---\ntitle: 在新版的macOS上切换不同版本的JDK\ndate: 2018-05-31 10:00:00\ncategories:\n    - guide\ntags:\n    - macOS\n    - Java\n    - JDK\nmp3:\ncover:\n---\n\n> 新版macOS的JDK切换似乎有些，不那么直接？这就仁者见仁了。\n\n## 引\n\n为了开发（或者说玩耍）的需要，我们或多或少都会在本机上安装多个版本的 JDK。在 Windows 上，我们可以很自然的，通过定义`JAVA_HOME`的路径，来修改我们要使用的 JDK 版本。在 Linux 系统中，我们也可以通过直接定义 JDK 的路径，去配置要使用的 JDK 版本。\n\n对于 Windows 和 Linux 开发者来说，修改 JDK 使用的版本可以说是非常舒适了，简单配置一下路径，就能实现目标。然而反观 macOS，它在 JDK 版本切换上，有些人会说它方便，有些人则会说它恼人，从 macOS 10.5+版本开始，Apple 为 macOS 加的一个新东西，可以说是让那些习惯了配置路径修改 JDK 版本的开发者感到很不习惯。\n\n## 背景\n\n让我们先来看看来自`Apple Developer - Guides and Sample Code`中[Technical Q&A QA1170 Important Java Directories on Mac OS X](https://developer.apple.com/library/content/qa/qa1170/_index.html)的文档说明。\n\n---\n\n#### Java Home\n\nMany Java applications need to know the location of a `$JAVA_HOME` directory. The `$JAVA_HOME` on Mac OS X should be found using the `/usr/libexec/java_home` command line tool on Mac OS X 10.5 or later. On older Mac OS X versions where the tool does not exist, use the fixed path \"`/Library/Java/Home`\". The `/usr/libexec/java_home` tool dynamically finds the top Java version specified in Java Preferences for the current user. This path allows access to the `bin` subdirectory where command line tools such as `java`, `javac`, etc. exist as on other platforms. The tool `/usr/libexec/java_home` allows you to specify a particular CPU architecture and Java platform version when locating a `$JAVA_HOME`.\n\nAnother advantage of dynamically finding this path, as opposed to hardcoding the fixed endpoint, is that it is updated when a new version of Java is downloaded via Software Update or installed with a newer version of Mac OS X. For this reason, it is important that developers do not install files in the JDKs inside of `/System`, since the changes will be lost with subsequent updates by newer versions of Java.\n\nTo obtain the path to the currently executing `$JAVA_HOME`, use the `java.home` System property.\n\n---\n\n可以看到，在使用 macOS 10.5 或更新版本的系统时，Apple 已经推荐开发者使用`/usr/libexec/java_home`去设置 JDK 的版本了，并且由于`java_home`会动态查找到最新的 JDK 版本，并且支持通过发行版通称，即 JDK1.7、JDK1.8、JDK11 等来获取路径，所以很适合用来切换不同版本的 JDK。\n\n让我们再来看一下接下来会用到的脚本。我们可以利用如`/usr/libexec/java_home -v 1.8`来查找当前本机存在的 Java 1.8 版本路径，在 Terminal 中执行该脚本会得到以下的返回值：\n\n```bash\n*****-Pro:~ *****$ /usr/libexec/java_home -v 1.8\n/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home\n```\n\n而输入参数为`-v 10`时，则会有下面的返回：\n\n```bash\n*****-Pro:~ *****$ /usr/libexec/java_home -v 10\n/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home\n```\n\n## 怎么做\n\n根据官方文档的说明，在新版本 macOS 中，我们只需要将以往的\n\n`export JAVA_HOME=<JAVA_HOME_PATH>`\n\n改写成形如\n\n`export JAVA_<MAIN_VERSION>_HOME=$(/usr/libexec/lava_home -v<MAIN_VERSION_NUMBER>)`\n\n即可完成对某个版本的配置，最后再以下面的配置完成 JDK 版本选择：\n\n`export JAVA_HOME=${JAVA_<MAIN_VERSION>_HOME}`\n\n而为了快速切换版本，我们可以使用 alias 来绑定别名执行相应的`export`操作。完整的脚本配置如下脚本所示：\n\n```bash\n# .bash_profile\n\n# Java\nexport JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)\nexport JAVA_X_HOME=$(/usr/libexec/java_home -v10)\nalias jdk8='export JAVA_HOME=${JAVA_8_HOME}'\nalias jdkX='export JAVA_HOME=${JAVA_X_HOME}'\nexport JAVA_HOME=${JAVA_8_HOME}\n```\n\n执行结果直接上 Bash 输出吧\n\n```shell\n*****-Pro:~ *****$ java -version\njava version \"1.8.0_161\"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n*****-Pro:~ *****$ jdkX\n*****-Pro:~ *****$ java -version\njava version \"10.0.1\" 2018-04-17\nJava(TM) SE Runtime Environment 18.3 (build 10.0.1+10)\nJava HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)\n*****-Pro:~ *****$ jdk8\n*****-Pro:~ *****$ java -version\njava version \"1.8.0_161\"\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\n```\n","slug":"2018-05-31-SwitchDifferentJDK","published":1,"updated":"2022-03-31T04:32:33.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9m001pvrip5p70cdop","content":"<blockquote>\n<p>新版macOS的JDK切换似乎有些，不那么直接？这就仁者见仁了。</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>为了开发（或者说玩耍）的需要，我们或多或少都会在本机上安装多个版本的 JDK。在 Windows 上，我们可以很自然的，通过定义<code>JAVA_HOME</code>的路径，来修改我们要使用的 JDK 版本。在 Linux 系统中，我们也可以通过直接定义 JDK 的路径，去配置要使用的 JDK 版本。</p>\n<p>对于 Windows 和 Linux 开发者来说，修改 JDK 使用的版本可以说是非常舒适了，简单配置一下路径，就能实现目标。然而反观 macOS，它在 JDK 版本切换上，有些人会说它方便，有些人则会说它恼人，从 macOS 10.5+版本开始，Apple 为 macOS 加的一个新东西，可以说是让那些习惯了配置路径修改 JDK 版本的开发者感到很不习惯。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>让我们先来看看来自<code>Apple Developer - Guides and Sample Code</code>中<a href=\"https://developer.apple.com/library/content/qa/qa1170/_index.html\">Technical Q&amp;A QA1170 Important Java Directories on Mac OS X</a>的文档说明。</p>\n<hr>\n<h4 id=\"Java-Home\"><a href=\"#Java-Home\" class=\"headerlink\" title=\"Java Home\"></a>Java Home</h4><p>Many Java applications need to know the location of a <code>$JAVA_HOME</code> directory. The <code>$JAVA_HOME</code> on Mac OS X should be found using the <code>/usr/libexec/java_home</code> command line tool on Mac OS X 10.5 or later. On older Mac OS X versions where the tool does not exist, use the fixed path “<code>/Library/Java/Home</code>“. The <code>/usr/libexec/java_home</code> tool dynamically finds the top Java version specified in Java Preferences for the current user. This path allows access to the <code>bin</code> subdirectory where command line tools such as <code>java</code>, <code>javac</code>, etc. exist as on other platforms. The tool <code>/usr/libexec/java_home</code> allows you to specify a particular CPU architecture and Java platform version when locating a <code>$JAVA_HOME</code>.</p>\n<p>Another advantage of dynamically finding this path, as opposed to hardcoding the fixed endpoint, is that it is updated when a new version of Java is downloaded via Software Update or installed with a newer version of Mac OS X. For this reason, it is important that developers do not install files in the JDKs inside of <code>/System</code>, since the changes will be lost with subsequent updates by newer versions of Java.</p>\n<p>To obtain the path to the currently executing <code>$JAVA_HOME</code>, use the <code>java.home</code> System property.</p>\n<hr>\n<p>可以看到，在使用 macOS 10.5 或更新版本的系统时，Apple 已经推荐开发者使用<code>/usr/libexec/java_home</code>去设置 JDK 的版本了，并且由于<code>java_home</code>会动态查找到最新的 JDK 版本，并且支持通过发行版通称，即 JDK1.7、JDK1.8、JDK11 等来获取路径，所以很适合用来切换不同版本的 JDK。</p>\n<p>让我们再来看一下接下来会用到的脚本。我们可以利用如<code>/usr/libexec/java_home -v 1.8</code>来查找当前本机存在的 Java 1.8 版本路径，在 Terminal 中执行该脚本会得到以下的返回值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ /usr/libexec/java_home -v 1.8</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n\n<p>而输入参数为<code>-v 10</code>时，则会有下面的返回：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ /usr/libexec/java_home -v 10</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>根据官方文档的说明，在新版本 macOS 中，我们只需要将以往的</p>\n<p><code>export JAVA_HOME=&lt;JAVA_HOME_PATH&gt;</code></p>\n<p>改写成形如</p>\n<p><code>export JAVA_&lt;MAIN_VERSION&gt;_HOME=$(/usr/libexec/lava_home -v&lt;MAIN_VERSION_NUMBER&gt;)</code></p>\n<p>即可完成对某个版本的配置，最后再以下面的配置完成 JDK 版本选择：</p>\n<p><code>export JAVA_HOME=$&#123;JAVA_&lt;MAIN_VERSION&gt;_HOME&#125;</code></p>\n<p>而为了快速切换版本，我们可以使用 alias 来绑定别名执行相应的<code>export</code>操作。完整的脚本配置如下脚本所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Java</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_X_HOME=$(/usr/libexec/java_home -v10)</span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdk8=<span class=\"string\">&#x27;export JAVA_HOME=$&#123;JAVA_8_HOME&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdkX=<span class=\"string\">&#x27;export JAVA_HOME=$&#123;JAVA_X_HOME&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$&#123;JAVA_8_HOME&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果直接上 Bash 输出吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;1.8.0_161&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br><span class=\"line\">*****-Pro:~ *****$ jdkX</span><br><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;10.0.1&quot; 2018-04-17</span><br><span class=\"line\">Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)</span><br><span class=\"line\">*****-Pro:~ *****$ jdk8</span><br><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;1.8.0_161&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>新版macOS的JDK切换似乎有些，不那么直接？这就仁者见仁了。</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>为了开发（或者说玩耍）的需要，我们或多或少都会在本机上安装多个版本的 JDK。在 Windows 上，我们可以很自然的，通过定义<code>JAVA_HOME</code>的路径，来修改我们要使用的 JDK 版本。在 Linux 系统中，我们也可以通过直接定义 JDK 的路径，去配置要使用的 JDK 版本。</p>\n<p>对于 Windows 和 Linux 开发者来说，修改 JDK 使用的版本可以说是非常舒适了，简单配置一下路径，就能实现目标。然而反观 macOS，它在 JDK 版本切换上，有些人会说它方便，有些人则会说它恼人，从 macOS 10.5+版本开始，Apple 为 macOS 加的一个新东西，可以说是让那些习惯了配置路径修改 JDK 版本的开发者感到很不习惯。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>让我们先来看看来自<code>Apple Developer - Guides and Sample Code</code>中<a href=\"https://developer.apple.com/library/content/qa/qa1170/_index.html\">Technical Q&amp;A QA1170 Important Java Directories on Mac OS X</a>的文档说明。</p>\n<hr>\n<h4 id=\"Java-Home\"><a href=\"#Java-Home\" class=\"headerlink\" title=\"Java Home\"></a>Java Home</h4><p>Many Java applications need to know the location of a <code>$JAVA_HOME</code> directory. The <code>$JAVA_HOME</code> on Mac OS X should be found using the <code>/usr/libexec/java_home</code> command line tool on Mac OS X 10.5 or later. On older Mac OS X versions where the tool does not exist, use the fixed path “<code>/Library/Java/Home</code>“. The <code>/usr/libexec/java_home</code> tool dynamically finds the top Java version specified in Java Preferences for the current user. This path allows access to the <code>bin</code> subdirectory where command line tools such as <code>java</code>, <code>javac</code>, etc. exist as on other platforms. The tool <code>/usr/libexec/java_home</code> allows you to specify a particular CPU architecture and Java platform version when locating a <code>$JAVA_HOME</code>.</p>\n<p>Another advantage of dynamically finding this path, as opposed to hardcoding the fixed endpoint, is that it is updated when a new version of Java is downloaded via Software Update or installed with a newer version of Mac OS X. For this reason, it is important that developers do not install files in the JDKs inside of <code>/System</code>, since the changes will be lost with subsequent updates by newer versions of Java.</p>\n<p>To obtain the path to the currently executing <code>$JAVA_HOME</code>, use the <code>java.home</code> System property.</p>\n<hr>\n<p>可以看到，在使用 macOS 10.5 或更新版本的系统时，Apple 已经推荐开发者使用<code>/usr/libexec/java_home</code>去设置 JDK 的版本了，并且由于<code>java_home</code>会动态查找到最新的 JDK 版本，并且支持通过发行版通称，即 JDK1.7、JDK1.8、JDK11 等来获取路径，所以很适合用来切换不同版本的 JDK。</p>\n<p>让我们再来看一下接下来会用到的脚本。我们可以利用如<code>/usr/libexec/java_home -v 1.8</code>来查找当前本机存在的 Java 1.8 版本路径，在 Terminal 中执行该脚本会得到以下的返回值：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ /usr/libexec/java_home -v 1.8</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n\n<p>而输入参数为<code>-v 10</code>时，则会有下面的返回：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ /usr/libexec/java_home -v 10</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>根据官方文档的说明，在新版本 macOS 中，我们只需要将以往的</p>\n<p><code>export JAVA_HOME=&lt;JAVA_HOME_PATH&gt;</code></p>\n<p>改写成形如</p>\n<p><code>export JAVA_&lt;MAIN_VERSION&gt;_HOME=$(/usr/libexec/lava_home -v&lt;MAIN_VERSION_NUMBER&gt;)</code></p>\n<p>即可完成对某个版本的配置，最后再以下面的配置完成 JDK 版本选择：</p>\n<p><code>export JAVA_HOME=$&#123;JAVA_&lt;MAIN_VERSION&gt;_HOME&#125;</code></p>\n<p>而为了快速切换版本，我们可以使用 alias 来绑定别名执行相应的<code>export</code>操作。完整的脚本配置如下脚本所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Java</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_X_HOME=$(/usr/libexec/java_home -v10)</span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdk8=<span class=\"string\">&#x27;export JAVA_HOME=$&#123;JAVA_8_HOME&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> jdkX=<span class=\"string\">&#x27;export JAVA_HOME=$&#123;JAVA_X_HOME&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$&#123;JAVA_8_HOME&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果直接上 Bash 输出吧</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;1.8.0_161&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br><span class=\"line\">*****-Pro:~ *****$ jdkX</span><br><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;10.0.1&quot; 2018-04-17</span><br><span class=\"line\">Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)</span><br><span class=\"line\">*****-Pro:~ *****$ jdk8</span><br><span class=\"line\">*****-Pro:~ *****$ java -version</span><br><span class=\"line\">java version &quot;1.8.0_161&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure>\n"},{"title":"小记一个菜鸟程序员设计的邀请码功能中的一个bug引发的思考","date":"2018-05-25T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 偶然查库检查用户邀请码使用情况的时候，发现居然有重复的邀请码。。。\n\n## 引\n\n2018/05/25，这是个很正常的一天，除了京东白条出账催债这个很恼人的事情，大体也就没什么大事缠身的样子。\n\n同事在检查用户邀请码使用情况的时候，突然叫道我，说了句很严重很致命的话：\"怎么邀请码有重复的？\"\n\n咩话？！点解？！我记得邀请码设计是讨论之后敲定的方案，怎么会有重复的邀请码出现？？？\n\n问题来了，当然还得确认确认是个什么毛病才行。。。\n\n## 述\n\n在本文进行下去之前，让我来说明一下当时的设计是个什么样的方案。\n\n首先在邀请码的需求上，我们采用的是`6`位字符串，邀请码生成组合中有`4`位是字母，另外`2`位是数字。而在字母组合上，我们去除了邀请码中可能输入错误的字母`O`和`L`，并将剩余的 24 个字母打乱组合成四个基础字母组。\n\n随后遍历四组基础字母和数字，生成无重复的邀请码生成组合。\n\n文字说明比较生硬，但经过上述处理后，产生的邀请码生成组合没有重复，可以看下面给出的范例：（注意观察，结合后面的内容思考这里埋的坑）\n\n```json\n[\n  \"huax54\",\n  \"huax56\",\n  \"huax57\",\n  \"huax58\",\n  ...\n  \"huac54\",\n  \"huac56\",\n  \"huac57\",\n  \"huac58\",\n  ...\n]\n```\n\n这只是第一步，因为全部组合的可能性只有 1118 个，完全不可能当作邀请码来使用（根本不够嘛），所以我们更激进的，直接用每个组合进行遍历生成一批邀请码。\n\n## 验\n\n明眼人应该还没看到这里就能想到上面的设计方案存在什么问题了，我先走个过程，来验证一下代码中是否存在问题。\n\n在判断重复的时候，我们采用 Redis Set 的特性来排除重复。Redis Set 这一数据结构内部不允许出现重复，并且是无序的，所以能满足下面两点需求：\n\n1. 添加到 Set 内的数据不会有重复\n2. 随机取出邀请码并移出 Set\n\n在实现的时候，我将上面产生的邀请码生成组合落库，通过状态字段过滤已用组合，实际产生的邀请码存入 Redis Set 中，每当 Set 的集合个数少于 10000 条，就生成新的邀请码丢入 Set。（埋坑）\n\n在取邀请码的时候，用到 spop 取出，表示这个邀请码已用过，不再可用。（埋了个大坑！）\n\n那么看到这里，我就来说一下上面的实现存在了什么问题：\n\n首先，组合中有相互存在的字母，你有`h`我也有`h`，你有`5`我也有`5`，并没有保证生成组合两两间的完全去重。\n\n其次，生成的条件只有一个，只要满足 6 位字符就是个合理的邀请码，这样一来就有可能出现多组都是`hahhhh`，或者`555e55`之类的邀请码。\n\n## 研\n\n上面提到的三个埋坑点，其实很大的原因是`Redis Set内部元素一定唯一`这一特性，使得我在开发过程中过度依赖了 Redis 特性，忽视了邀请码 pop 后的场景会产生的问题，以及没有注意到邀请码生成组合本身存在的缺陷。\n\n埋坑点 1 虽然不是影响最严重的因素，但由于设置的阈值过低，很有可能已经使用过的邀请码早就被 pop 出 Set 了，没有元素重复判断的参照。\n\n埋坑点 2 则是随机取出邀请码，这里用到了 spop，spop 做的事情是，返回一个随机的元素，并且将这个元素从 Set 中移除。由于元素移除后，Set 中不存在这个元素，从而会导致相同的元素能够成功进入 Set 中。这样的情景其实只是保证了 Redis Set 内的唯一性，但没有保证整个邀请码系统的邀请码唯一性。\n\n然而上面的埋坑点都不是根源，要知道这些邀请码都是由数据库中的邀请码生成组合产生的，追根揭底还是要检查邀请码组合的构成。\n\n最终我发现，如果邀请码生成组合内如果两两间存在相同的字符，在现有的生成方法中必定会出现像上面提到的`hahhhh`的情况。\n\n```java\n// 邀请码生成写入Redis的为代码\nfor (char c1 : chars) {\n  for (char c2 : chars) {\n    for (char c3 : chars) {\n      for (char c4 : chars) {\n        for (char c5 : chars) {\n          for (char c6 : chars) {\n            if (c1 == c2 && c1 == c3 && c1 == c4 && c1 == c5 && c1 == c6) {\n              continue;\n            }\n            redis.sadd(INVITE_CODE_SET, \"\" + c1 + c2 + c3 + c4 + c5 + c6);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n再来看邀请码生成组合的生成方法\n\n```java\nfor (int i = 0; i < letters.length - 3; i++) {\n  for (int j = 1; j < letters.length - 2; j++) {\n    for (int k = 2; k < letters.length - 1; k++) {\n      for (int l = 3; l < letters.length; l++) {\n        for (int x = 0; x < numbers.length - 1; x++) {\n          for (int y = 1; y < numbers.length; y++) {\n            if (letters[i] == letters[j] || letters[i] == letters[k]\n                || letters[i] == letters[l]\n                || letters[j] == letters[k] || letters[j] == letters[l]\n                || letters[k] == letters[l]) {\n              continue;\n            }\n            if (numbers[x] == numbers[y]) {\n              continue;\n            }\n            InviteCodeGenerateGroup group = new InviteCodeGenerateGroup();\n            group.setCharacters(\"\" + letters[i] + letters[j] + letters[k] + letters[l]);\n            group.setNumbers(\"\" + numbers[x] + numbers[y]);\n            group.setStatus(NORMAL);\n            db.insert(group);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n这样的生成方式存在的缺陷已经很明显了，通过遍历数组的方式，仅在最里层遍历做去重，并不能做到有一个组合是`hatc12`，其他组合不能有这个组合中的任何字母的情况。\n","source":"_posts/2018-05-25-InviteCode.md","raw":"---\ntitle: 小记一个菜鸟程序员设计的邀请码功能中的一个bug引发的思考\ndate: 2018-05-25 10:00:00\ncategories:\n    - guide\ntags:\nmp3:\ncover:\n---\n\n> 偶然查库检查用户邀请码使用情况的时候，发现居然有重复的邀请码。。。\n\n## 引\n\n2018/05/25，这是个很正常的一天，除了京东白条出账催债这个很恼人的事情，大体也就没什么大事缠身的样子。\n\n同事在检查用户邀请码使用情况的时候，突然叫道我，说了句很严重很致命的话：\"怎么邀请码有重复的？\"\n\n咩话？！点解？！我记得邀请码设计是讨论之后敲定的方案，怎么会有重复的邀请码出现？？？\n\n问题来了，当然还得确认确认是个什么毛病才行。。。\n\n## 述\n\n在本文进行下去之前，让我来说明一下当时的设计是个什么样的方案。\n\n首先在邀请码的需求上，我们采用的是`6`位字符串，邀请码生成组合中有`4`位是字母，另外`2`位是数字。而在字母组合上，我们去除了邀请码中可能输入错误的字母`O`和`L`，并将剩余的 24 个字母打乱组合成四个基础字母组。\n\n随后遍历四组基础字母和数字，生成无重复的邀请码生成组合。\n\n文字说明比较生硬，但经过上述处理后，产生的邀请码生成组合没有重复，可以看下面给出的范例：（注意观察，结合后面的内容思考这里埋的坑）\n\n```json\n[\n  \"huax54\",\n  \"huax56\",\n  \"huax57\",\n  \"huax58\",\n  ...\n  \"huac54\",\n  \"huac56\",\n  \"huac57\",\n  \"huac58\",\n  ...\n]\n```\n\n这只是第一步，因为全部组合的可能性只有 1118 个，完全不可能当作邀请码来使用（根本不够嘛），所以我们更激进的，直接用每个组合进行遍历生成一批邀请码。\n\n## 验\n\n明眼人应该还没看到这里就能想到上面的设计方案存在什么问题了，我先走个过程，来验证一下代码中是否存在问题。\n\n在判断重复的时候，我们采用 Redis Set 的特性来排除重复。Redis Set 这一数据结构内部不允许出现重复，并且是无序的，所以能满足下面两点需求：\n\n1. 添加到 Set 内的数据不会有重复\n2. 随机取出邀请码并移出 Set\n\n在实现的时候，我将上面产生的邀请码生成组合落库，通过状态字段过滤已用组合，实际产生的邀请码存入 Redis Set 中，每当 Set 的集合个数少于 10000 条，就生成新的邀请码丢入 Set。（埋坑）\n\n在取邀请码的时候，用到 spop 取出，表示这个邀请码已用过，不再可用。（埋了个大坑！）\n\n那么看到这里，我就来说一下上面的实现存在了什么问题：\n\n首先，组合中有相互存在的字母，你有`h`我也有`h`，你有`5`我也有`5`，并没有保证生成组合两两间的完全去重。\n\n其次，生成的条件只有一个，只要满足 6 位字符就是个合理的邀请码，这样一来就有可能出现多组都是`hahhhh`，或者`555e55`之类的邀请码。\n\n## 研\n\n上面提到的三个埋坑点，其实很大的原因是`Redis Set内部元素一定唯一`这一特性，使得我在开发过程中过度依赖了 Redis 特性，忽视了邀请码 pop 后的场景会产生的问题，以及没有注意到邀请码生成组合本身存在的缺陷。\n\n埋坑点 1 虽然不是影响最严重的因素，但由于设置的阈值过低，很有可能已经使用过的邀请码早就被 pop 出 Set 了，没有元素重复判断的参照。\n\n埋坑点 2 则是随机取出邀请码，这里用到了 spop，spop 做的事情是，返回一个随机的元素，并且将这个元素从 Set 中移除。由于元素移除后，Set 中不存在这个元素，从而会导致相同的元素能够成功进入 Set 中。这样的情景其实只是保证了 Redis Set 内的唯一性，但没有保证整个邀请码系统的邀请码唯一性。\n\n然而上面的埋坑点都不是根源，要知道这些邀请码都是由数据库中的邀请码生成组合产生的，追根揭底还是要检查邀请码组合的构成。\n\n最终我发现，如果邀请码生成组合内如果两两间存在相同的字符，在现有的生成方法中必定会出现像上面提到的`hahhhh`的情况。\n\n```java\n// 邀请码生成写入Redis的为代码\nfor (char c1 : chars) {\n  for (char c2 : chars) {\n    for (char c3 : chars) {\n      for (char c4 : chars) {\n        for (char c5 : chars) {\n          for (char c6 : chars) {\n            if (c1 == c2 && c1 == c3 && c1 == c4 && c1 == c5 && c1 == c6) {\n              continue;\n            }\n            redis.sadd(INVITE_CODE_SET, \"\" + c1 + c2 + c3 + c4 + c5 + c6);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n再来看邀请码生成组合的生成方法\n\n```java\nfor (int i = 0; i < letters.length - 3; i++) {\n  for (int j = 1; j < letters.length - 2; j++) {\n    for (int k = 2; k < letters.length - 1; k++) {\n      for (int l = 3; l < letters.length; l++) {\n        for (int x = 0; x < numbers.length - 1; x++) {\n          for (int y = 1; y < numbers.length; y++) {\n            if (letters[i] == letters[j] || letters[i] == letters[k]\n                || letters[i] == letters[l]\n                || letters[j] == letters[k] || letters[j] == letters[l]\n                || letters[k] == letters[l]) {\n              continue;\n            }\n            if (numbers[x] == numbers[y]) {\n              continue;\n            }\n            InviteCodeGenerateGroup group = new InviteCodeGenerateGroup();\n            group.setCharacters(\"\" + letters[i] + letters[j] + letters[k] + letters[l]);\n            group.setNumbers(\"\" + numbers[x] + numbers[y]);\n            group.setStatus(NORMAL);\n            db.insert(group);\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n这样的生成方式存在的缺陷已经很明显了，通过遍历数组的方式，仅在最里层遍历做去重，并不能做到有一个组合是`hatc12`，其他组合不能有这个组合中的任何字母的情况。\n","slug":"2018-05-25-InviteCode","published":1,"updated":"2022-03-31T04:31:52.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9m001tvrip6kx3bm2w","content":"<blockquote>\n<p>偶然查库检查用户邀请码使用情况的时候，发现居然有重复的邀请码。。。</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>2018&#x2F;05&#x2F;25，这是个很正常的一天，除了京东白条出账催债这个很恼人的事情，大体也就没什么大事缠身的样子。</p>\n<p>同事在检查用户邀请码使用情况的时候，突然叫道我，说了句很严重很致命的话：”怎么邀请码有重复的？”</p>\n<p>咩话？！点解？！我记得邀请码设计是讨论之后敲定的方案，怎么会有重复的邀请码出现？？？</p>\n<p>问题来了，当然还得确认确认是个什么毛病才行。。。</p>\n<h2 id=\"述\"><a href=\"#述\" class=\"headerlink\" title=\"述\"></a>述</h2><p>在本文进行下去之前，让我来说明一下当时的设计是个什么样的方案。</p>\n<p>首先在邀请码的需求上，我们采用的是<code>6</code>位字符串，邀请码生成组合中有<code>4</code>位是字母，另外<code>2</code>位是数字。而在字母组合上，我们去除了邀请码中可能输入错误的字母<code>O</code>和<code>L</code>，并将剩余的 24 个字母打乱组合成四个基础字母组。</p>\n<p>随后遍历四组基础字母和数字，生成无重复的邀请码生成组合。</p>\n<p>文字说明比较生硬，但经过上述处理后，产生的邀请码生成组合没有重复，可以看下面给出的范例：（注意观察，结合后面的内容思考这里埋的坑）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax54&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax56&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax57&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax58&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">&quot;huac54&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac56&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac57&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac58&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>这只是第一步，因为全部组合的可能性只有 1118 个，完全不可能当作邀请码来使用（根本不够嘛），所以我们更激进的，直接用每个组合进行遍历生成一批邀请码。</p>\n<h2 id=\"验\"><a href=\"#验\" class=\"headerlink\" title=\"验\"></a>验</h2><p>明眼人应该还没看到这里就能想到上面的设计方案存在什么问题了，我先走个过程，来验证一下代码中是否存在问题。</p>\n<p>在判断重复的时候，我们采用 Redis Set 的特性来排除重复。Redis Set 这一数据结构内部不允许出现重复，并且是无序的，所以能满足下面两点需求：</p>\n<ol>\n<li>添加到 Set 内的数据不会有重复</li>\n<li>随机取出邀请码并移出 Set</li>\n</ol>\n<p>在实现的时候，我将上面产生的邀请码生成组合落库，通过状态字段过滤已用组合，实际产生的邀请码存入 Redis Set 中，每当 Set 的集合个数少于 10000 条，就生成新的邀请码丢入 Set。（埋坑）</p>\n<p>在取邀请码的时候，用到 spop 取出，表示这个邀请码已用过，不再可用。（埋了个大坑！）</p>\n<p>那么看到这里，我就来说一下上面的实现存在了什么问题：</p>\n<p>首先，组合中有相互存在的字母，你有<code>h</code>我也有<code>h</code>，你有<code>5</code>我也有<code>5</code>，并没有保证生成组合两两间的完全去重。</p>\n<p>其次，生成的条件只有一个，只要满足 6 位字符就是个合理的邀请码，这样一来就有可能出现多组都是<code>hahhhh</code>，或者<code>555e55</code>之类的邀请码。</p>\n<h2 id=\"研\"><a href=\"#研\" class=\"headerlink\" title=\"研\"></a>研</h2><p>上面提到的三个埋坑点，其实很大的原因是<code>Redis Set内部元素一定唯一</code>这一特性，使得我在开发过程中过度依赖了 Redis 特性，忽视了邀请码 pop 后的场景会产生的问题，以及没有注意到邀请码生成组合本身存在的缺陷。</p>\n<p>埋坑点 1 虽然不是影响最严重的因素，但由于设置的阈值过低，很有可能已经使用过的邀请码早就被 pop 出 Set 了，没有元素重复判断的参照。</p>\n<p>埋坑点 2 则是随机取出邀请码，这里用到了 spop，spop 做的事情是，返回一个随机的元素，并且将这个元素从 Set 中移除。由于元素移除后，Set 中不存在这个元素，从而会导致相同的元素能够成功进入 Set 中。这样的情景其实只是保证了 Redis Set 内的唯一性，但没有保证整个邀请码系统的邀请码唯一性。</p>\n<p>然而上面的埋坑点都不是根源，要知道这些邀请码都是由数据库中的邀请码生成组合产生的，追根揭底还是要检查邀请码组合的构成。</p>\n<p>最终我发现，如果邀请码生成组合内如果两两间存在相同的字符，在现有的生成方法中必定会出现像上面提到的<code>hahhhh</code>的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 邀请码生成写入Redis的为代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> c1 : chars) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c2 : chars) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c3 : chars) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c4 : chars) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c5 : chars) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c6 : chars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 == c2 &amp;&amp; c1 == c3 &amp;&amp; c1 == c4 &amp;&amp; c1 == c5 &amp;&amp; c1 == c6) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            redis.sadd(INVITE_CODE_SET, <span class=\"string\">&quot;&quot;</span> + c1 + c2 + c3 + c4 + c5 + c6);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再来看邀请码生成组合的生成方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; letters.length - <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; letters.length - <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; k &lt; letters.length - <span class=\"number\">1</span>; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; l &lt; letters.length; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; numbers.length - <span class=\"number\">1</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; y &lt; numbers.length; y++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (letters[i] == letters[j] || letters[i] == letters[k]</span><br><span class=\"line\">                || letters[i] == letters[l]</span><br><span class=\"line\">                || letters[j] == letters[k] || letters[j] == letters[l]</span><br><span class=\"line\">                || letters[k] == letters[l]) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[x] == numbers[y]) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">InviteCodeGenerateGroup</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InviteCodeGenerateGroup</span>();</span><br><span class=\"line\">            group.setCharacters(<span class=\"string\">&quot;&quot;</span> + letters[i] + letters[j] + letters[k] + letters[l]);</span><br><span class=\"line\">            group.setNumbers(<span class=\"string\">&quot;&quot;</span> + numbers[x] + numbers[y]);</span><br><span class=\"line\">            group.setStatus(NORMAL);</span><br><span class=\"line\">            db.insert(group);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的生成方式存在的缺陷已经很明显了，通过遍历数组的方式，仅在最里层遍历做去重，并不能做到有一个组合是<code>hatc12</code>，其他组合不能有这个组合中的任何字母的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>偶然查库检查用户邀请码使用情况的时候，发现居然有重复的邀请码。。。</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>2018&#x2F;05&#x2F;25，这是个很正常的一天，除了京东白条出账催债这个很恼人的事情，大体也就没什么大事缠身的样子。</p>\n<p>同事在检查用户邀请码使用情况的时候，突然叫道我，说了句很严重很致命的话：”怎么邀请码有重复的？”</p>\n<p>咩话？！点解？！我记得邀请码设计是讨论之后敲定的方案，怎么会有重复的邀请码出现？？？</p>\n<p>问题来了，当然还得确认确认是个什么毛病才行。。。</p>\n<h2 id=\"述\"><a href=\"#述\" class=\"headerlink\" title=\"述\"></a>述</h2><p>在本文进行下去之前，让我来说明一下当时的设计是个什么样的方案。</p>\n<p>首先在邀请码的需求上，我们采用的是<code>6</code>位字符串，邀请码生成组合中有<code>4</code>位是字母，另外<code>2</code>位是数字。而在字母组合上，我们去除了邀请码中可能输入错误的字母<code>O</code>和<code>L</code>，并将剩余的 24 个字母打乱组合成四个基础字母组。</p>\n<p>随后遍历四组基础字母和数字，生成无重复的邀请码生成组合。</p>\n<p>文字说明比较生硬，但经过上述处理后，产生的邀请码生成组合没有重复，可以看下面给出的范例：（注意观察，结合后面的内容思考这里埋的坑）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax54&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax56&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax57&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huax58&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">&quot;huac54&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac56&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac57&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"string\">&quot;huac58&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>这只是第一步，因为全部组合的可能性只有 1118 个，完全不可能当作邀请码来使用（根本不够嘛），所以我们更激进的，直接用每个组合进行遍历生成一批邀请码。</p>\n<h2 id=\"验\"><a href=\"#验\" class=\"headerlink\" title=\"验\"></a>验</h2><p>明眼人应该还没看到这里就能想到上面的设计方案存在什么问题了，我先走个过程，来验证一下代码中是否存在问题。</p>\n<p>在判断重复的时候，我们采用 Redis Set 的特性来排除重复。Redis Set 这一数据结构内部不允许出现重复，并且是无序的，所以能满足下面两点需求：</p>\n<ol>\n<li>添加到 Set 内的数据不会有重复</li>\n<li>随机取出邀请码并移出 Set</li>\n</ol>\n<p>在实现的时候，我将上面产生的邀请码生成组合落库，通过状态字段过滤已用组合，实际产生的邀请码存入 Redis Set 中，每当 Set 的集合个数少于 10000 条，就生成新的邀请码丢入 Set。（埋坑）</p>\n<p>在取邀请码的时候，用到 spop 取出，表示这个邀请码已用过，不再可用。（埋了个大坑！）</p>\n<p>那么看到这里，我就来说一下上面的实现存在了什么问题：</p>\n<p>首先，组合中有相互存在的字母，你有<code>h</code>我也有<code>h</code>，你有<code>5</code>我也有<code>5</code>，并没有保证生成组合两两间的完全去重。</p>\n<p>其次，生成的条件只有一个，只要满足 6 位字符就是个合理的邀请码，这样一来就有可能出现多组都是<code>hahhhh</code>，或者<code>555e55</code>之类的邀请码。</p>\n<h2 id=\"研\"><a href=\"#研\" class=\"headerlink\" title=\"研\"></a>研</h2><p>上面提到的三个埋坑点，其实很大的原因是<code>Redis Set内部元素一定唯一</code>这一特性，使得我在开发过程中过度依赖了 Redis 特性，忽视了邀请码 pop 后的场景会产生的问题，以及没有注意到邀请码生成组合本身存在的缺陷。</p>\n<p>埋坑点 1 虽然不是影响最严重的因素，但由于设置的阈值过低，很有可能已经使用过的邀请码早就被 pop 出 Set 了，没有元素重复判断的参照。</p>\n<p>埋坑点 2 则是随机取出邀请码，这里用到了 spop，spop 做的事情是，返回一个随机的元素，并且将这个元素从 Set 中移除。由于元素移除后，Set 中不存在这个元素，从而会导致相同的元素能够成功进入 Set 中。这样的情景其实只是保证了 Redis Set 内的唯一性，但没有保证整个邀请码系统的邀请码唯一性。</p>\n<p>然而上面的埋坑点都不是根源，要知道这些邀请码都是由数据库中的邀请码生成组合产生的，追根揭底还是要检查邀请码组合的构成。</p>\n<p>最终我发现，如果邀请码生成组合内如果两两间存在相同的字符，在现有的生成方法中必定会出现像上面提到的<code>hahhhh</code>的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 邀请码生成写入Redis的为代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> c1 : chars) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c2 : chars) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c3 : chars) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c4 : chars) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c5 : chars) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c6 : chars) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c1 == c2 &amp;&amp; c1 == c3 &amp;&amp; c1 == c4 &amp;&amp; c1 == c5 &amp;&amp; c1 == c6) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            redis.sadd(INVITE_CODE_SET, <span class=\"string\">&quot;&quot;</span> + c1 + c2 + c3 + c4 + c5 + c6);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再来看邀请码生成组合的生成方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; letters.length - <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; letters.length - <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; k &lt; letters.length - <span class=\"number\">1</span>; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; l &lt; letters.length; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; numbers.length - <span class=\"number\">1</span>; x++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; y &lt; numbers.length; y++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (letters[i] == letters[j] || letters[i] == letters[k]</span><br><span class=\"line\">                || letters[i] == letters[l]</span><br><span class=\"line\">                || letters[j] == letters[k] || letters[j] == letters[l]</span><br><span class=\"line\">                || letters[k] == letters[l]) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[x] == numbers[y]) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">InviteCodeGenerateGroup</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InviteCodeGenerateGroup</span>();</span><br><span class=\"line\">            group.setCharacters(<span class=\"string\">&quot;&quot;</span> + letters[i] + letters[j] + letters[k] + letters[l]);</span><br><span class=\"line\">            group.setNumbers(<span class=\"string\">&quot;&quot;</span> + numbers[x] + numbers[y]);</span><br><span class=\"line\">            group.setStatus(NORMAL);</span><br><span class=\"line\">            db.insert(group);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的生成方式存在的缺陷已经很明显了，通过遍历数组的方式，仅在最里层遍历做去重，并不能做到有一个组合是<code>hatc12</code>，其他组合不能有这个组合中的任何字母的情况。</p>\n"},{"title":"DD Monitor","date":"2019-08-27T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n# dd_monitor\n\n> 誰でも大好き\n\n> [Github Repo here](https://github.com/AyakuraYuki/dd_monitor)\n\nDD monitor, which means a monitor for DDs (DD means `誰でも大好き`), can let you watch multiple YouTube streams (if the stream is enabled to be embedded outside YouTube) in one screen at the same time.\n\nIn the beginning, I was planning to see the multi-view of Hololive's Project Winter collab streams, but it is very difficult to allocate space for browsers. So I decide to build this program to make things easier.\n\nWhen I noticed that hey if I can use YouTube embed link, I can watch not only the Project Winter streams but also every stream which supports to play outside YouTube.\n\nSo this is it, a simple but functionally DD monitor.\n\nDD 监视器，你要来当监视房里的老大爷吗？这个工具可以让你同时观看多个（允许在 YouTube 外部播放的）油管直播。\n\n一开始的时候我打算看当时 Hololive 的 Project Winter 联动直播，但是一起 8 个视角，给浏览器分配空间太难了。所以我决定搞一个工具来把事情变得容易解决。\n\n然而当我注意到，当我使用油管的外部嵌入链接时，我不但可以用来看 Project Winter 联动直播，还可以看任何支持在油管外播放的直播。\n\n所以，这就是一个简单但很好用的 DD 监视器。\n\n## Environment\n\n-   Python 3.7.4\n-   Flask 1.1.1\n-   sqlite3\n-   Vue 3\n","source":"_posts/2019-08-27-DDMonitor.md","raw":"---\ntitle: DD Monitor\ndate: 2019-08-27 10:00:00\ncategories:\n    - project\ntags:\n    - Python\nmp3:\ncover:\n---\n\n# dd_monitor\n\n> 誰でも大好き\n\n> [Github Repo here](https://github.com/AyakuraYuki/dd_monitor)\n\nDD monitor, which means a monitor for DDs (DD means `誰でも大好き`), can let you watch multiple YouTube streams (if the stream is enabled to be embedded outside YouTube) in one screen at the same time.\n\nIn the beginning, I was planning to see the multi-view of Hololive's Project Winter collab streams, but it is very difficult to allocate space for browsers. So I decide to build this program to make things easier.\n\nWhen I noticed that hey if I can use YouTube embed link, I can watch not only the Project Winter streams but also every stream which supports to play outside YouTube.\n\nSo this is it, a simple but functionally DD monitor.\n\nDD 监视器，你要来当监视房里的老大爷吗？这个工具可以让你同时观看多个（允许在 YouTube 外部播放的）油管直播。\n\n一开始的时候我打算看当时 Hololive 的 Project Winter 联动直播，但是一起 8 个视角，给浏览器分配空间太难了。所以我决定搞一个工具来把事情变得容易解决。\n\n然而当我注意到，当我使用油管的外部嵌入链接时，我不但可以用来看 Project Winter 联动直播，还可以看任何支持在油管外播放的直播。\n\n所以，这就是一个简单但很好用的 DD 监视器。\n\n## Environment\n\n-   Python 3.7.4\n-   Flask 1.1.1\n-   sqlite3\n-   Vue 3\n","slug":"2019-08-27-DDMonitor","published":1,"updated":"2022-03-31T04:34:14.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9m001wvrip6qzpe9yn","content":"<h1 id=\"dd-monitor\"><a href=\"#dd-monitor\" class=\"headerlink\" title=\"dd_monitor\"></a>dd_monitor</h1><blockquote>\n<p>誰でも大好き</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/AyakuraYuki/dd_monitor\">Github Repo here</a></p>\n</blockquote>\n<p>DD monitor, which means a monitor for DDs (DD means <code>誰でも大好き</code>), can let you watch multiple YouTube streams (if the stream is enabled to be embedded outside YouTube) in one screen at the same time.</p>\n<p>In the beginning, I was planning to see the multi-view of Hololive’s Project Winter collab streams, but it is very difficult to allocate space for browsers. So I decide to build this program to make things easier.</p>\n<p>When I noticed that hey if I can use YouTube embed link, I can watch not only the Project Winter streams but also every stream which supports to play outside YouTube.</p>\n<p>So this is it, a simple but functionally DD monitor.</p>\n<p>DD 监视器，你要来当监视房里的老大爷吗？这个工具可以让你同时观看多个（允许在 YouTube 外部播放的）油管直播。</p>\n<p>一开始的时候我打算看当时 Hololive 的 Project Winter 联动直播，但是一起 8 个视角，给浏览器分配空间太难了。所以我决定搞一个工具来把事情变得容易解决。</p>\n<p>然而当我注意到，当我使用油管的外部嵌入链接时，我不但可以用来看 Project Winter 联动直播，还可以看任何支持在油管外播放的直播。</p>\n<p>所以，这就是一个简单但很好用的 DD 监视器。</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><ul>\n<li>Python 3.7.4</li>\n<li>Flask 1.1.1</li>\n<li>sqlite3</li>\n<li>Vue 3</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dd-monitor\"><a href=\"#dd-monitor\" class=\"headerlink\" title=\"dd_monitor\"></a>dd_monitor</h1><blockquote>\n<p>誰でも大好き</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/AyakuraYuki/dd_monitor\">Github Repo here</a></p>\n</blockquote>\n<p>DD monitor, which means a monitor for DDs (DD means <code>誰でも大好き</code>), can let you watch multiple YouTube streams (if the stream is enabled to be embedded outside YouTube) in one screen at the same time.</p>\n<p>In the beginning, I was planning to see the multi-view of Hololive’s Project Winter collab streams, but it is very difficult to allocate space for browsers. So I decide to build this program to make things easier.</p>\n<p>When I noticed that hey if I can use YouTube embed link, I can watch not only the Project Winter streams but also every stream which supports to play outside YouTube.</p>\n<p>So this is it, a simple but functionally DD monitor.</p>\n<p>DD 监视器，你要来当监视房里的老大爷吗？这个工具可以让你同时观看多个（允许在 YouTube 外部播放的）油管直播。</p>\n<p>一开始的时候我打算看当时 Hololive 的 Project Winter 联动直播，但是一起 8 个视角，给浏览器分配空间太难了。所以我决定搞一个工具来把事情变得容易解决。</p>\n<p>然而当我注意到，当我使用油管的外部嵌入链接时，我不但可以用来看 Project Winter 联动直播，还可以看任何支持在油管外播放的直播。</p>\n<p>所以，这就是一个简单但很好用的 DD 监视器。</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><ul>\n<li>Python 3.7.4</li>\n<li>Flask 1.1.1</li>\n<li>sqlite3</li>\n<li>Vue 3</li>\n</ul>\n"},{"title":"简记Python里的单例化实现办法","date":"2019-08-01T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 简单记录了我学到的Python单例的内容\n> \n> 本人一直都在用 Python3，以下的内容都基于 Python3 来记录，Python2 的这里就不放了\n\n## 引入模块\n\n模块在第一次导入时，会生成`pyc`文件，当第二次导入时，就会直接加载`pyc`文件，避免再次执行模块代码产生新的对象。\n\na.py\n\n```python\nclass Singleton:\n    def foo(self):\n        pass\n\n\nsingleton = Singleton()\n```\n\nb.py\n\n```python\nfrom a import singleton\n```\n\n## 装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）\n\n```python\ndef singleton(cls):\n    __instances = {}\n\n    def _singleton(*args, **kwargs):\n        if cls not in __instances:\n            __instances[cls] = cls(*args, **kwargs)\n        return __instances[cls]\n\n    return _singleton\n\n\n@singleton\nclass A:\n    a = 1\n\n    def __init__(self, x=0):\n        self.x = x\n\n\na1 = A(2)\na2 = A(3)\n```\n\n### 线程锁实现线程安全的单例\n\n```python\nimport time\nimport threading\nclass Singleton:\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        time.sleep(1)\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n### `__new__`实现\n\n`__new__`是 Python 生命周期中必经的步骤，即使我们没有显式声明`__new__`函数，解释器依旧帮我们执行了`object.__new__`。\n\n所以我们可以将单例初始化的代码放入`__new__`函数中，让解释器来帮我们处理初始化的流程。\n\n用`__new__`的方式实现单例是最方便的，并且同样可以实现线程安全的单例。\n\n```python\nimport threading\nclass Singleton:\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        pass\n\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = object.__new__(cls)\n        return Singleton._instance\n```\n\n### `metaclass`元类\n\n```python\nclass Singleton(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass A(metaclass=constant.Singleton):\n    pass\n```\n","source":"_posts/2019-08-01-PythonMetaclassSingleton.md","raw":"---\ntitle: 简记Python里的单例化实现办法\ndate: 2019-08-01 10:00:00\ncategories:\n    - guide\ntags:\n    - Python\n    - design pattern\nmp3:\ncover:\n---\n\n> 简单记录了我学到的Python单例的内容\n> \n> 本人一直都在用 Python3，以下的内容都基于 Python3 来记录，Python2 的这里就不放了\n\n## 引入模块\n\n模块在第一次导入时，会生成`pyc`文件，当第二次导入时，就会直接加载`pyc`文件，避免再次执行模块代码产生新的对象。\n\na.py\n\n```python\nclass Singleton:\n    def foo(self):\n        pass\n\n\nsingleton = Singleton()\n```\n\nb.py\n\n```python\nfrom a import singleton\n```\n\n## 装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）\n\n```python\ndef singleton(cls):\n    __instances = {}\n\n    def _singleton(*args, **kwargs):\n        if cls not in __instances:\n            __instances[cls] = cls(*args, **kwargs)\n        return __instances[cls]\n\n    return _singleton\n\n\n@singleton\nclass A:\n    a = 1\n\n    def __init__(self, x=0):\n        self.x = x\n\n\na1 = A(2)\na2 = A(3)\n```\n\n### 线程锁实现线程安全的单例\n\n```python\nimport time\nimport threading\nclass Singleton:\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        time.sleep(1)\n\n    @classmethod\n    def instance(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = Singleton(*args, **kwargs)\n        return Singleton._instance\n```\n\n### `__new__`实现\n\n`__new__`是 Python 生命周期中必经的步骤，即使我们没有显式声明`__new__`函数，解释器依旧帮我们执行了`object.__new__`。\n\n所以我们可以将单例初始化的代码放入`__new__`函数中，让解释器来帮我们处理初始化的流程。\n\n用`__new__`的方式实现单例是最方便的，并且同样可以实现线程安全的单例。\n\n```python\nimport threading\nclass Singleton:\n    _instance_lock = threading.Lock()\n\n    def __init__(self):\n        pass\n\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(Singleton, \"_instance\"):\n            with Singleton._instance_lock:\n                if not hasattr(Singleton, \"_instance\"):\n                    Singleton._instance = object.__new__(cls)\n        return Singleton._instance\n```\n\n### `metaclass`元类\n\n```python\nclass Singleton(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n\nclass A(metaclass=constant.Singleton):\n    pass\n```\n","slug":"2019-08-01-PythonMetaclassSingleton","published":1,"updated":"2022-03-31T04:33:42.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9m001zvripdrir0njl","content":"<blockquote>\n<p>简单记录了我学到的Python单例的内容</p>\n<p>本人一直都在用 Python3，以下的内容都基于 Python3 来记录，Python2 的这里就不放了</p>\n</blockquote>\n<h2 id=\"引入模块\"><a href=\"#引入模块\" class=\"headerlink\" title=\"引入模块\"></a>引入模块</h2><p>模块在第一次导入时，会生成<code>pyc</code>文件，当第二次导入时，就会直接加载<code>pyc</code>文件，避免再次执行模块代码产生新的对象。</p>\n<p>a.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">singleton = Singleton()</span><br></pre></td></tr></table></figure>\n\n<p>b.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> singleton</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装饰器（我倒是喜欢理解成注解，谁叫我之前写-Java-的）\"><a href=\"#装饰器（我倒是喜欢理解成注解，谁叫我之前写-Java-的）\" class=\"headerlink\" title=\"装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）\"></a>装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    __instances = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_singleton</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> __instances:</span><br><span class=\"line\">            __instances[cls] = cls(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __instances[cls]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a1 = A(<span class=\"number\">2</span>)</span><br><span class=\"line\">a2 = A(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程锁实现线程安全的单例\"><a href=\"#线程锁实现线程安全的单例\" class=\"headerlink\" title=\"线程锁实现线程安全的单例\"></a>线程锁实现线程安全的单例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new-实现\"><a href=\"#new-实现\" class=\"headerlink\" title=\"__new__实现\"></a><code>__new__</code>实现</h3><p><code>__new__</code>是 Python 生命周期中必经的步骤，即使我们没有显式声明<code>__new__</code>函数，解释器依旧帮我们执行了<code>object.__new__</code>。</p>\n<p>所以我们可以将单例初始化的代码放入<code>__new__</code>函数中，让解释器来帮我们处理初始化的流程。</p>\n<p>用<code>__new__</code>的方式实现单例是最方便的，并且同样可以实现线程安全的单例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"metaclass元类\"><a href=\"#metaclass元类\" class=\"headerlink\" title=\"metaclass元类\"></a><code>metaclass</code>元类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">type</span>):</span><br><span class=\"line\">    _instances = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> cls._instances:</span><br><span class=\"line\">            cls._instances[cls] = <span class=\"built_in\">super</span>(Singleton, cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instances[cls]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(metaclass=constant.Singleton):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>简单记录了我学到的Python单例的内容</p>\n<p>本人一直都在用 Python3，以下的内容都基于 Python3 来记录，Python2 的这里就不放了</p>\n</blockquote>\n<h2 id=\"引入模块\"><a href=\"#引入模块\" class=\"headerlink\" title=\"引入模块\"></a>引入模块</h2><p>模块在第一次导入时，会生成<code>pyc</code>文件，当第二次导入时，就会直接加载<code>pyc</code>文件，避免再次执行模块代码产生新的对象。</p>\n<p>a.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">singleton = Singleton()</span><br></pre></td></tr></table></figure>\n\n<p>b.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> singleton</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装饰器（我倒是喜欢理解成注解，谁叫我之前写-Java-的）\"><a href=\"#装饰器（我倒是喜欢理解成注解，谁叫我之前写-Java-的）\" class=\"headerlink\" title=\"装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）\"></a>装饰器（我倒是喜欢理解成注解，谁叫我之前写 Java 的）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    __instances = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_singleton</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> __instances:</span><br><span class=\"line\">            __instances[cls] = cls(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __instances[cls]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a1 = A(<span class=\"number\">2</span>)</span><br><span class=\"line\">a2 = A(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程锁实现线程安全的单例\"><a href=\"#线程锁实现线程安全的单例\" class=\"headerlink\" title=\"线程锁实现线程安全的单例\"></a>线程锁实现线程安全的单例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">instance</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = Singleton(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new-实现\"><a href=\"#new-实现\" class=\"headerlink\" title=\"__new__实现\"></a><code>__new__</code>实现</h3><p><code>__new__</code>是 Python 生命周期中必经的步骤，即使我们没有显式声明<code>__new__</code>函数，解释器依旧帮我们执行了<code>object.__new__</code>。</p>\n<p>所以我们可以将单例初始化的代码放入<code>__new__</code>函数中，让解释器来帮我们处理初始化的流程。</p>\n<p>用<code>__new__</code>的方式实现单例是最方便的，并且同样可以实现线程安全的单例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>:</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> Singleton._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(Singleton, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    Singleton._instance = <span class=\"built_in\">object</span>.__new__(cls)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton._instance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"metaclass元类\"><a href=\"#metaclass元类\" class=\"headerlink\" title=\"metaclass元类\"></a><code>metaclass</code>元类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">type</span>):</span><br><span class=\"line\">    _instances = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> cls._instances:</span><br><span class=\"line\">            cls._instances[cls] = <span class=\"built_in\">super</span>(Singleton, cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instances[cls]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(metaclass=constant.Singleton):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n"},{"title":"简记修复Git提交时GPG签名失败的问题","date":"2019-11-15T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 一直以来都很正常的 GPG 签名，唐突暴毙了？？？\n\n最近在 IDEA 提交代码的时候，因为 GPG 签名失败的问题，一直没有提交成功。\n\n起初是直接走的 IDEA 的 VCS 提交，一开始还觉得是没有触发输入证书密码的界面导致的，但回想了一下之前都可以提交，那应该跟证书密码没什么关系才对。\n\n于是我尝试去终端走命令的方式提交了下，老样子还是失败了。。。\n\n```bash\nerror: gpg failed to sign the data\nfatal: failed to write commit object\n```\n\n上 stack overflow 搜搜问题，偶然发现有一条答案挺有用的，先贴原文地址\n\n[Git error - gpg failed to sign data](https://stackoverflow.com/questions/41052538/git-error-gpg-failed-to-sign-data)\n\n具体步骤嘛，首先检查 Git 全局配置的签名程序配置对了没，正确的配置应该是`gpg.program=gpg2`\n\n那么我本机的话，gpg2 是定位到了`/usr/local/bin/gpg2`，可以直接跑下面的命令修复配置\n\n```bash\ngit config --global gpg.program /usr/local/bin/gpg2\n```\n\n接着用下面的命令检查 GPG 签名时是不是正常工作的\n\n```bash\necho \"test\" | gpg2 --clearsign\n```\n\n顺带一提如果没有输入证书密码的界面，或许需要安装`pinentry`，以 macOS 举例，可以用`brew install pinentry`装一下就完事了\n\n之后再尝试`git commit`，没报错的话就到此为止了，问题定位在没有正确配置签名程序（以及有可能是缺少`pinentry`）\n\n尝试提交还是失败的话，这时候就要把一个叫`gpg-agent`的家伙干掉了\n\n```bash\ngpgconf --kill gpg-agent\n```\n\n一般到此为止，重新提交就可以正常签名。要是缺少`gpgconf`或者`--kill`选项丢失，重新装一下`gnupg`或许是个好选择。\n\n那么这里我顺带吐槽一下，国内各个博客，不是教你怎么关闭提交签名，就是让你检查提交时的`user.name`和`user.email`，其实那些都不是主要问题，别人就是要用 GPG 对提交签名，你们却教别人关闭签名，意义何在？\n","source":"_posts/2019-11-15-FixGPGSignFailedProb.md","raw":"---\ntitle: 简记修复Git提交时GPG签名失败的问题\ndate: 2019-11-15 10:00:00\ncategories:\n    - guide\ntags:\n    - Git\n    - GPG\nmp3:\ncover:\n---\n\n> 一直以来都很正常的 GPG 签名，唐突暴毙了？？？\n\n最近在 IDEA 提交代码的时候，因为 GPG 签名失败的问题，一直没有提交成功。\n\n起初是直接走的 IDEA 的 VCS 提交，一开始还觉得是没有触发输入证书密码的界面导致的，但回想了一下之前都可以提交，那应该跟证书密码没什么关系才对。\n\n于是我尝试去终端走命令的方式提交了下，老样子还是失败了。。。\n\n```bash\nerror: gpg failed to sign the data\nfatal: failed to write commit object\n```\n\n上 stack overflow 搜搜问题，偶然发现有一条答案挺有用的，先贴原文地址\n\n[Git error - gpg failed to sign data](https://stackoverflow.com/questions/41052538/git-error-gpg-failed-to-sign-data)\n\n具体步骤嘛，首先检查 Git 全局配置的签名程序配置对了没，正确的配置应该是`gpg.program=gpg2`\n\n那么我本机的话，gpg2 是定位到了`/usr/local/bin/gpg2`，可以直接跑下面的命令修复配置\n\n```bash\ngit config --global gpg.program /usr/local/bin/gpg2\n```\n\n接着用下面的命令检查 GPG 签名时是不是正常工作的\n\n```bash\necho \"test\" | gpg2 --clearsign\n```\n\n顺带一提如果没有输入证书密码的界面，或许需要安装`pinentry`，以 macOS 举例，可以用`brew install pinentry`装一下就完事了\n\n之后再尝试`git commit`，没报错的话就到此为止了，问题定位在没有正确配置签名程序（以及有可能是缺少`pinentry`）\n\n尝试提交还是失败的话，这时候就要把一个叫`gpg-agent`的家伙干掉了\n\n```bash\ngpgconf --kill gpg-agent\n```\n\n一般到此为止，重新提交就可以正常签名。要是缺少`gpgconf`或者`--kill`选项丢失，重新装一下`gnupg`或许是个好选择。\n\n那么这里我顺带吐槽一下，国内各个博客，不是教你怎么关闭提交签名，就是让你检查提交时的`user.name`和`user.email`，其实那些都不是主要问题，别人就是要用 GPG 对提交签名，你们却教别人关闭签名，意义何在？\n","slug":"2019-11-15-FixGPGSignFailedProb","published":1,"updated":"2022-03-31T04:34:44.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9n0022vrip3c0k0713","content":"<blockquote>\n<p>一直以来都很正常的 GPG 签名，唐突暴毙了？？？</p>\n</blockquote>\n<p>最近在 IDEA 提交代码的时候，因为 GPG 签名失败的问题，一直没有提交成功。</p>\n<p>起初是直接走的 IDEA 的 VCS 提交，一开始还觉得是没有触发输入证书密码的界面导致的，但回想了一下之前都可以提交，那应该跟证书密码没什么关系才对。</p>\n<p>于是我尝试去终端走命令的方式提交了下，老样子还是失败了。。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: gpg failed to sign the data</span><br><span class=\"line\">fatal: failed to write commit object</span><br></pre></td></tr></table></figure>\n\n<p>上 stack overflow 搜搜问题，偶然发现有一条答案挺有用的，先贴原文地址</p>\n<p><a href=\"https://stackoverflow.com/questions/41052538/git-error-gpg-failed-to-sign-data\">Git error - gpg failed to sign data</a></p>\n<p>具体步骤嘛，首先检查 Git 全局配置的签名程序配置对了没，正确的配置应该是<code>gpg.program=gpg2</code></p>\n<p>那么我本机的话，gpg2 是定位到了<code>/usr/local/bin/gpg2</code>，可以直接跑下面的命令修复配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global gpg.program /usr/local/bin/gpg2</span><br></pre></td></tr></table></figure>\n\n<p>接着用下面的命令检查 GPG 签名时是不是正常工作的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;test&quot;</span> | gpg2 --clearsign</span><br></pre></td></tr></table></figure>\n\n<p>顺带一提如果没有输入证书密码的界面，或许需要安装<code>pinentry</code>，以 macOS 举例，可以用<code>brew install pinentry</code>装一下就完事了</p>\n<p>之后再尝试<code>git commit</code>，没报错的话就到此为止了，问题定位在没有正确配置签名程序（以及有可能是缺少<code>pinentry</code>）</p>\n<p>尝试提交还是失败的话，这时候就要把一个叫<code>gpg-agent</code>的家伙干掉了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpgconf --<span class=\"built_in\">kill</span> gpg-agent</span><br></pre></td></tr></table></figure>\n\n<p>一般到此为止，重新提交就可以正常签名。要是缺少<code>gpgconf</code>或者<code>--kill</code>选项丢失，重新装一下<code>gnupg</code>或许是个好选择。</p>\n<p>那么这里我顺带吐槽一下，国内各个博客，不是教你怎么关闭提交签名，就是让你检查提交时的<code>user.name</code>和<code>user.email</code>，其实那些都不是主要问题，别人就是要用 GPG 对提交签名，你们却教别人关闭签名，意义何在？</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直以来都很正常的 GPG 签名，唐突暴毙了？？？</p>\n</blockquote>\n<p>最近在 IDEA 提交代码的时候，因为 GPG 签名失败的问题，一直没有提交成功。</p>\n<p>起初是直接走的 IDEA 的 VCS 提交，一开始还觉得是没有触发输入证书密码的界面导致的，但回想了一下之前都可以提交，那应该跟证书密码没什么关系才对。</p>\n<p>于是我尝试去终端走命令的方式提交了下，老样子还是失败了。。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: gpg failed to sign the data</span><br><span class=\"line\">fatal: failed to write commit object</span><br></pre></td></tr></table></figure>\n\n<p>上 stack overflow 搜搜问题，偶然发现有一条答案挺有用的，先贴原文地址</p>\n<p><a href=\"https://stackoverflow.com/questions/41052538/git-error-gpg-failed-to-sign-data\">Git error - gpg failed to sign data</a></p>\n<p>具体步骤嘛，首先检查 Git 全局配置的签名程序配置对了没，正确的配置应该是<code>gpg.program=gpg2</code></p>\n<p>那么我本机的话，gpg2 是定位到了<code>/usr/local/bin/gpg2</code>，可以直接跑下面的命令修复配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global gpg.program /usr/local/bin/gpg2</span><br></pre></td></tr></table></figure>\n\n<p>接着用下面的命令检查 GPG 签名时是不是正常工作的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;test&quot;</span> | gpg2 --clearsign</span><br></pre></td></tr></table></figure>\n\n<p>顺带一提如果没有输入证书密码的界面，或许需要安装<code>pinentry</code>，以 macOS 举例，可以用<code>brew install pinentry</code>装一下就完事了</p>\n<p>之后再尝试<code>git commit</code>，没报错的话就到此为止了，问题定位在没有正确配置签名程序（以及有可能是缺少<code>pinentry</code>）</p>\n<p>尝试提交还是失败的话，这时候就要把一个叫<code>gpg-agent</code>的家伙干掉了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpgconf --<span class=\"built_in\">kill</span> gpg-agent</span><br></pre></td></tr></table></figure>\n\n<p>一般到此为止，重新提交就可以正常签名。要是缺少<code>gpgconf</code>或者<code>--kill</code>选项丢失，重新装一下<code>gnupg</code>或许是个好选择。</p>\n<p>那么这里我顺带吐槽一下，国内各个博客，不是教你怎么关闭提交签名，就是让你检查提交时的<code>user.name</code>和<code>user.email</code>，其实那些都不是主要问题，别人就是要用 GPG 对提交签名，你们却教别人关闭签名，意义何在？</p>\n"},{"title":"Sign in with Apple? Back-end?","date":"2020-11-24T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n## 引\n\n一年前（注：本文撰写日期`2020-11-24`），Apple 对开发文档做了修改，自 iOS 13 之后，Apple 提供了一项名为`Sign in with Apple`的服务，旨在利用 Apple ID 服务，为第三方应用提供通过 iCloud 账号登录注册的入口。\n\n然而，这项服务随之而来的改动是，任何接入第三方应用登录入口的 APP，必须接入`Sign in with Apple`服务，否则将会被拒绝上架到 App Store。\n\n得知这个改动已经是撰写本文的时候了，其实我不知道该不该庆幸 App Store 审核人员没有因为我们没接这项服务而否掉我们的 APP，不过也是时候要把这个漏洞给补上了。\n\n## 背景\n\n也没啥背景，「一图流」走起：\n\n![反正好狠的规定](/static/images/2020-11-24-SignInWithApple/01.jpeg)\n\n## 怎么做\n\n根据 Apple Developer Documentation 中对 [`Sign in with Apple`](https://developer.apple.com/documentation/sign_in_with_apple) 的说明，利用这项服务跟我们去接入微信服务号登录的流程是差不多的：\n\n1. 向 Apple ID Server 申请登录，从那边获取一个叫`code`的东西。没错，这就是 OAuth 中的授权码，`Sign in with Apple`本质上还是一个 OAuth 授权认证的服务。\n2. 那么我们都清楚了这是一个 OAuth 的授权码模式。APP 那边拿到了`code`之后，接着就是把这玩意儿扔给后端服务器，由后端服务器去通过`code`换取相应的用户信息。\n3. 服务器换到用户信息，就可以继续完成后续的登录/注册的事情。\n\n## 动手？\n\n那么，说的那么简单，实际上对于后段服务器需要做的事情，网上的文档还是比较少的，绝大多数接入`Sign in with Apple`的教程都是客户端方案。当然，我们要的是一个思路，这些方案里或多或少都点到了一些。\n\n实际施工的时候，后端需要关注的细节可以罗列为如下几点：\n\n1. 从 Apple ID Server 获取公钥，取得的不是一个公钥，而是一组公钥，而这些公钥只是用来对`id_token`校验用的。这里提到的`id_token`会在后面解释。\n2. 换取用户信息的操作，需要服务器走一次生成 JWT 的流程，这个流程依赖的一些参数可能不是你想象中的那么容易理解，因为`Sign in with Apple`提供给你的一些配置信息并不像其他的 OAuth 服务那样容易理解。\n3. 苹果的这套服务有个好处，你可以本地调试。是的，本地调试，不一定需要提交到测试服务器，也不一定需要提交到生产环境，但是有可能本地调试通过了放到线上就会有一大批问题。（毕竟生产环境你永远都不知道会发生什么，对吧？）\n4. 我上面第一条提到了`id_token`对吧，首先这个东西是一个\"JWT\"，那么你可以按照 JWT 的方式来对这个参数进行解析取值。但是，苹果在这个参数上用了一个叫 JWS 的概念，所以才会有第一条说到的\"校验\"。\n\n## 好，可以动手了\n\n首先我们需要一些来自苹果那边下发的\"toolkit\"，这些配置里包括`TeamID`、`KeyID`、`BundleID`，还有一个私钥文件。\n\n服务端需要按照下面的流程来完成授权认证的操作：\n\n1. 请求和验证用户，即换取用户信息\n   a. 构造请求信息\n   b. 生成一个叫`client_secret`的东西\n2. 检查返回值的有效性\n   a. 从 Apple ID Server 获取公钥组\n   b. 反解析`id_token`并进行必要的 JWS 检查\n   c. 检查有效性\n\n### 请求和验证\n\n构造请求信息需要携带的一些参数如下所示：\n\n```curl\ncurl -v POST \"https://appleid.apple.com/auth/token\" \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     -d 'client_id=CLIENT_ID' \\\n     -d 'client_secret=CLIENT_SECRET' \\\n     -d 'code=CODE' \\\n     -d 'grant_type=authorization_code' \\\n     -d 'redirect_uri=REDIRECT_URI'\n```\n\n[这里我贴出官方的接口文档，方便各位查看](https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens)\n\n这些参数中，`client_id`、`client_secret`、`grant_type`是必须的，`redirect_uri`仅在需要网页登录时才携带，CS 模式不需要这个参数，`code`是从 APP 那里拿到的授权码。\n\n这里的信息不像微信服务号接入的那样，是`AppID + AppSecret`的模式，而是`BundleID + JWS`的模式。也就是说，苹果并不会给你我们平常看到的一组字符串，而是需要把 APP 的 BundleID 当作这里的`client_id`的参数，然后自己去生成一个 JWS 丢给`client_secret`。\n\n所以上面的 cURL，可以转换成下面的 cURL。这里我用的是 CS 模式，而不是 BS 模式，所以把`redirect_uri`去掉了。\n\n```curl\ncurl -v POST \"https://appleid.apple.com/auth/token\" \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     -d 'client_id=BUNDLE_ID' \\\n     -d 'client_secret=TOKEN' \\\n     -d 'code=CODE' \\\n     -d 'grant_type=authorization_code'\n```\n\n生成`client_secret`的话，这里我还是直接丢代码吧，代码里会有详细的说明：\n\n```java\nclass AppConfig {\n    String teamId;\n    String keyId;\n    String clientId;\n    String keyPath;\n}\n\nclass Service {\n    // 读取私钥\n    byte[] readKeyFile(AppConfig appConfig) {\n        // 获取配置的私钥文件路径\n        String keyPath = appConfig.keyPath;\n        String base64;\n        // 创建字符读取流\n        try (\n            InputStream is = getClass().classLoader.getResourceAsStream(keyPath);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(is)))\n        ) {\n            // 这里我们只需要私钥文件中排除头部和尾部的中间部分，也就是私钥正文部分\n            base64 = reader.lines().collect(Collectors.joining());\n            base64 = base64.replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n                .replace(\"-----END PRIVATE KEY-----\", \"\");\n        } catch (IOException e) {\n            log.error(\"读取私钥失败：\" + e.getLocalizedMessage(), e);\n            return null;\n        }\n        // 最后获得私钥的bytes\n        return Base64.decodeBase64(base64);\n    }\n\n    // 生成client_secret\n    String generateClientSecret(AppConfig appConfig) {\n        Map<String, Object> header = new HashMap<>();\n        // 苹果规定加密的算法是ES256\n        header.put(\"alg\", \"ES256\");\n        // 并且苹果下发给我们的toolkit里，用\"KeyID\"作为header.kid\n        header.put(\"kid\", appConfig.keyId);\n\n        long iat = System.currentTimeMillis() / 1000;\n        Map<String, Object> claims = new HashMap<>();\n        // 苹果规定开发者生成JWS所用的issuer是TeamID\n        claims.put(\"iss\", appConfig.teamId);\n        // iat和exp的参数是UNIX时间戳，秒级单位\n        claims.put(\"iat\", iat);\n        // 这里的过期时间有限制，不能大于iat的六个月之后的时间\n        claims.put(\"exp\", iat + 3 * 30 * 24 * 60 * 60);\n        // aud是一个固定参数，也是苹果规定的\n        claims.put(\"aud\", \"https://appleid.apple.com\");\n        // subject则是开发者手上的APP的BundleID\n        claims.put(\"sub\", appConfig.clientId);\n\n        try {\n            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(readAppleAuthPrivateKey(appConfig));\n            KeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n            return Jwts.builder()\n                .setHeader(header)\n                .setClaims(claims)\n                .signWith(SignatureAlgorithm.ES256, privateKey)\n                .compact();\n        } catch (Exception e) {\n            log.error(\"创建ClientSecret失败：\" + e.getLocalizedMessage(), e);\n            return null;\n        }\n    }\n}\n```\n\n### 检查返回值的有效性\n\n上面的请求如果没有错误，我们会获得 Apple ID Server 下发的 TokenResponse：\n\n```json5\n{\n    access_token: \"一个token，但是没什么用，因为苹果没有开其他的服务接口\",\n    token_type: \"Bearer，固定值\",\n    expires_in: 3600,\n    refresh_token: \"一个用来刷新token的token\",\n    id_token: \"identityToken，结果是JWT，这个是核心\"\n}\n```\n\n就像上面的 JSON 里写到的，`id_token`是我们整个流程的核心，它包括了必要的`sub`，也就是我们常说的微信开放平台 UnionID 的概念。\n\n你可能会好奇为什么我提到了 UnionID。Apple ID Server 没有开放平台和公众平台的说法，理论上一个 Team 下的所有 APP 获取到的都是同一个 UserID，当然也有可能这个就是整个 Apple ID Server 给用户分配的全局 UserID，苹果用这样的 ID 统一了第三方登录的体系，你可以通过这个 UserID，在你的开发者账号下所有的 APP 中打通账户信息。\n\n接下来，我们可以选择直接信任 Apple ID Server 返回给我们的数据，直接解析 `id_token` 的 payload 拿到`sub`，但是我还是建议走一遍公钥校验以验证回传数据的可靠性。\n\n获取公钥很简单，苹果的公钥接口是开放的，不需要任何校验，任何人都可以调用，方法也很简单：\n\n```curl\ncurl -G https://appleid.apple.com/auth/keys\n```\n\n这个接口会返回不止一个公钥，而是一组公钥列表，例如：\n\n```json\n{\n    \"keys\": [\n        {\n            \"kty\": \"RSA\",\n            \"kid\": \"86D88Kf\",\n            \"use\": \"sig\",\n            \"alg\": \"RS256\",\n            \"n\": \"iGaLqP6y-SJCCBq5Hv6pGDbG_SQ11MNjH7rWHcCFYz4hGwHC4lcSurTlV8u3avoVNM8jXevG1Iu1SY11qInqUvjJur--hghr1b56OPJu6H1iKulSxGjEIyDP6c5BdE1uwprYyr4IO9th8fOwCPygjLFrh44XEGbDIFeImwvBAGOhmMB2AD1n1KviyNsH0bEB7phQtiLk-ILjv1bORSRl8AK677-1T8isGfHKXGZ_ZGtStDe7Lu0Ihp8zoUt59kx2o9uWpROkzF56ypresiIl4WprClRCjz8x6cPZXU2qNWhu71TQvUFwvIvbkE1oYaJMb0jcOTmBRZA2QuYw-zHLwQ\",\n            \"e\": \"AQAB\"\n        },\n        {\n            \"kty\": \"RSA\",\n            \"kid\": \"eXaunmL\",\n            \"use\": \"sig\",\n            \"alg\": \"RS256\",\n            \"n\": \"4dGQ7bQK8LgILOdLsYzfZjkEAoQeVC_aqyc8GC6RX7dq_KvRAQAWPvkam8VQv4GK5T4ogklEKEvj5ISBamdDNq1n52TpxQwI2EqxSk7I9fKPKhRt4F8-2yETlYvye-2s6NeWJim0KBtOVrk0gWvEDgd6WOqJl_yt5WBISvILNyVg1qAAM8JeX6dRPosahRVDjA52G2X-Tip84wqwyRpUlq2ybzcLh3zyhCitBOebiRWDQfG26EH9lTlJhll-p_Dg8vAXxJLIJ4SNLcqgFeZe4OfHLgdzMvxXZJnPp_VgmkcpUdRotazKZumj6dBPcXI_XID4Z4Z3OM1KrZPJNdUhxw\",\n            \"e\": \"AQAB\"\n        }\n    ]\n}\n```\n\n是不是有点意外，苹果并不想让你直接知道该用哪个公钥去检查返回值，而是需要通过`KeyID`获取正确的公钥来验证返回值。这个`KeyID`也很好拿，就在`id_token`的 header 里，反解析 JWT 就能拿到。下面我把我自己的代码贴一下：\n\n```java\nclass Service {\n    /**\n     * 从Apple服务器获取验证Token签名的公钥（服务器缓存3600秒）\n     */\n    private JWKSet requestApplePublicKey() {\n        // JWKSet，其结构如上面的 API 返回值\n        JWKSet obj;\n        String value = redis.get(KEY_APPLE_PUBLIC_KEY_LIST);\n        if (StringUtils.isNotEmpty(value)) {\n            // 服务器可以做一次短时缓存，从缓存读取公钥列表\n            obj = JSON.parseObject(value, JWKSet.class);\n        } else {\n            // 第一次访问/缓存未命中，向 Apple ID Server 请求公钥组\n            RestTemplate restTemplate = new RestTemplate();\n            String content = restTemplate.getForObject(API_APPLE_AUTH_KEY, String.class);\n            if (StringUtil.isEmpty(content)) {\n                // 考虑到有可能会请求失败，这里我做了判空\n                return null;\n            }\n            obj = JSON.parseObject(content, JWKSet.class);\n            // 写入短时缓存\n            redis.setex(KEY_APPLE_PUBLIC_KEY_LIST, content, 3600);\n        }\n        // 返回获取到的公钥对象\n        return obj;\n    }\n\n    /**\n     * 获取匹配identityToken.kid的公钥\n     *\n     * @param kid 从 id_token 解析出来的 KeyID\n     */\n    private PublicKey getApplePublicKey(String kid) {\n        JWKSet jwkSet = requestApplePublicKey();\n        if (jwkSet == null) {\n          return null;\n        }\n\n        for (JWKSet.Keys key : jwkSet.getKeys()) {\n            // 在这里，我们把从 id_token 反解到的 kid 拿来查询公钥，如果找到了，则通过关键的两个参数 n 和 e 构造公钥对象，这个公钥会被用来验证 id_token 的有效性。\n            if (kid.equals(key.getKid())) {\n                try {\n                    String n = key.getN();\n                    String e = key.getE();\n                    BigInteger modulus = new BigInteger(1, Base64.decodeBase64(n));\n                    BigInteger publicExponent = new BigInteger(1, Base64.decodeBase64(e));\n                    RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, publicExponent);\n                    KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n                    return kf.generatePublic(spec);\n                } catch (Exception e) {\n                    log.error(\"解析获取公钥失败：\" + e.getLocalizedMessage(), e);\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 检查identityToken是否合法\n     */\n    public boolean verifyAppleIdentityToken(String identityToken) {\n        DecodedJWT jwt = JWT.decode(identityToken);\n        String keyId = jwt.getKeyId();\n        String audience = jwt.getAudience().get(0);\n        String subject = jwt.getSubject();\n\n        PublicKey publicKey = getApplePublicKey(keyId);\n        JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n        // 官方文档说明描述到，由 Apple ID Server 签发的 token 信息，其 iss 是固定值 https://appleid.apple.com\n        jwtParser.requireIssuer(\"https://appleid.apple.com\");\n        // 这里检查 aud 是来自指定 App 发起的授权\n        jwtParser.requireAudience(audience);\n        // 这个检查一般来说会使用客户端传来的 user 做 sub 的检查依据，但我自己的实现就没考虑这么多了。\n        // 建议在 APP 向后端服务器发起登录调用时，安全起见，除开 code 授权码之外，也把 user 传来，因为客户端收到的 user 一定是 Apple ID Server 回传的合法值。\n        jwtParser.requireSubject(subject);\n\n        try {\n            Jws<Claims> jws = jwtParser.parseClaimsJws(identityToken);\n            // 检查 JWS 里是否存在 auth_time ，理由嘛我不知道，但我看大多数文档里大家都是这么检查的 :(\n            return jws != null && jws.getBody().containsKey(\"auth_time\");\n        } catch (Exception e) {\n            log.error(e.getLocalizedMessage(), e);\n            return false;\n        }\n    }\n}\n```\n\n只要我们对`id_token`的检查通过，整个授权流程基本就算完成了，后端服务器就能正确获取到 user 信息，从而进行我们自己的第三方登录/注册流程。\n","source":"_posts/2020-11-24-SignInWithApple.md","raw":"---\ntitle: Sign in with Apple? Back-end?\ndate: 2020-11-24 10:00:00\ncategories:\n    - guide\ntags:\n    - Apple\nmp3:\ncover:\n---\n\n## 引\n\n一年前（注：本文撰写日期`2020-11-24`），Apple 对开发文档做了修改，自 iOS 13 之后，Apple 提供了一项名为`Sign in with Apple`的服务，旨在利用 Apple ID 服务，为第三方应用提供通过 iCloud 账号登录注册的入口。\n\n然而，这项服务随之而来的改动是，任何接入第三方应用登录入口的 APP，必须接入`Sign in with Apple`服务，否则将会被拒绝上架到 App Store。\n\n得知这个改动已经是撰写本文的时候了，其实我不知道该不该庆幸 App Store 审核人员没有因为我们没接这项服务而否掉我们的 APP，不过也是时候要把这个漏洞给补上了。\n\n## 背景\n\n也没啥背景，「一图流」走起：\n\n![反正好狠的规定](/static/images/2020-11-24-SignInWithApple/01.jpeg)\n\n## 怎么做\n\n根据 Apple Developer Documentation 中对 [`Sign in with Apple`](https://developer.apple.com/documentation/sign_in_with_apple) 的说明，利用这项服务跟我们去接入微信服务号登录的流程是差不多的：\n\n1. 向 Apple ID Server 申请登录，从那边获取一个叫`code`的东西。没错，这就是 OAuth 中的授权码，`Sign in with Apple`本质上还是一个 OAuth 授权认证的服务。\n2. 那么我们都清楚了这是一个 OAuth 的授权码模式。APP 那边拿到了`code`之后，接着就是把这玩意儿扔给后端服务器，由后端服务器去通过`code`换取相应的用户信息。\n3. 服务器换到用户信息，就可以继续完成后续的登录/注册的事情。\n\n## 动手？\n\n那么，说的那么简单，实际上对于后段服务器需要做的事情，网上的文档还是比较少的，绝大多数接入`Sign in with Apple`的教程都是客户端方案。当然，我们要的是一个思路，这些方案里或多或少都点到了一些。\n\n实际施工的时候，后端需要关注的细节可以罗列为如下几点：\n\n1. 从 Apple ID Server 获取公钥，取得的不是一个公钥，而是一组公钥，而这些公钥只是用来对`id_token`校验用的。这里提到的`id_token`会在后面解释。\n2. 换取用户信息的操作，需要服务器走一次生成 JWT 的流程，这个流程依赖的一些参数可能不是你想象中的那么容易理解，因为`Sign in with Apple`提供给你的一些配置信息并不像其他的 OAuth 服务那样容易理解。\n3. 苹果的这套服务有个好处，你可以本地调试。是的，本地调试，不一定需要提交到测试服务器，也不一定需要提交到生产环境，但是有可能本地调试通过了放到线上就会有一大批问题。（毕竟生产环境你永远都不知道会发生什么，对吧？）\n4. 我上面第一条提到了`id_token`对吧，首先这个东西是一个\"JWT\"，那么你可以按照 JWT 的方式来对这个参数进行解析取值。但是，苹果在这个参数上用了一个叫 JWS 的概念，所以才会有第一条说到的\"校验\"。\n\n## 好，可以动手了\n\n首先我们需要一些来自苹果那边下发的\"toolkit\"，这些配置里包括`TeamID`、`KeyID`、`BundleID`，还有一个私钥文件。\n\n服务端需要按照下面的流程来完成授权认证的操作：\n\n1. 请求和验证用户，即换取用户信息\n   a. 构造请求信息\n   b. 生成一个叫`client_secret`的东西\n2. 检查返回值的有效性\n   a. 从 Apple ID Server 获取公钥组\n   b. 反解析`id_token`并进行必要的 JWS 检查\n   c. 检查有效性\n\n### 请求和验证\n\n构造请求信息需要携带的一些参数如下所示：\n\n```curl\ncurl -v POST \"https://appleid.apple.com/auth/token\" \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     -d 'client_id=CLIENT_ID' \\\n     -d 'client_secret=CLIENT_SECRET' \\\n     -d 'code=CODE' \\\n     -d 'grant_type=authorization_code' \\\n     -d 'redirect_uri=REDIRECT_URI'\n```\n\n[这里我贴出官方的接口文档，方便各位查看](https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens)\n\n这些参数中，`client_id`、`client_secret`、`grant_type`是必须的，`redirect_uri`仅在需要网页登录时才携带，CS 模式不需要这个参数，`code`是从 APP 那里拿到的授权码。\n\n这里的信息不像微信服务号接入的那样，是`AppID + AppSecret`的模式，而是`BundleID + JWS`的模式。也就是说，苹果并不会给你我们平常看到的一组字符串，而是需要把 APP 的 BundleID 当作这里的`client_id`的参数，然后自己去生成一个 JWS 丢给`client_secret`。\n\n所以上面的 cURL，可以转换成下面的 cURL。这里我用的是 CS 模式，而不是 BS 模式，所以把`redirect_uri`去掉了。\n\n```curl\ncurl -v POST \"https://appleid.apple.com/auth/token\" \\\n     -H 'content-type: application/x-www-form-urlencoded' \\\n     -d 'client_id=BUNDLE_ID' \\\n     -d 'client_secret=TOKEN' \\\n     -d 'code=CODE' \\\n     -d 'grant_type=authorization_code'\n```\n\n生成`client_secret`的话，这里我还是直接丢代码吧，代码里会有详细的说明：\n\n```java\nclass AppConfig {\n    String teamId;\n    String keyId;\n    String clientId;\n    String keyPath;\n}\n\nclass Service {\n    // 读取私钥\n    byte[] readKeyFile(AppConfig appConfig) {\n        // 获取配置的私钥文件路径\n        String keyPath = appConfig.keyPath;\n        String base64;\n        // 创建字符读取流\n        try (\n            InputStream is = getClass().classLoader.getResourceAsStream(keyPath);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(is)))\n        ) {\n            // 这里我们只需要私钥文件中排除头部和尾部的中间部分，也就是私钥正文部分\n            base64 = reader.lines().collect(Collectors.joining());\n            base64 = base64.replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n                .replace(\"-----END PRIVATE KEY-----\", \"\");\n        } catch (IOException e) {\n            log.error(\"读取私钥失败：\" + e.getLocalizedMessage(), e);\n            return null;\n        }\n        // 最后获得私钥的bytes\n        return Base64.decodeBase64(base64);\n    }\n\n    // 生成client_secret\n    String generateClientSecret(AppConfig appConfig) {\n        Map<String, Object> header = new HashMap<>();\n        // 苹果规定加密的算法是ES256\n        header.put(\"alg\", \"ES256\");\n        // 并且苹果下发给我们的toolkit里，用\"KeyID\"作为header.kid\n        header.put(\"kid\", appConfig.keyId);\n\n        long iat = System.currentTimeMillis() / 1000;\n        Map<String, Object> claims = new HashMap<>();\n        // 苹果规定开发者生成JWS所用的issuer是TeamID\n        claims.put(\"iss\", appConfig.teamId);\n        // iat和exp的参数是UNIX时间戳，秒级单位\n        claims.put(\"iat\", iat);\n        // 这里的过期时间有限制，不能大于iat的六个月之后的时间\n        claims.put(\"exp\", iat + 3 * 30 * 24 * 60 * 60);\n        // aud是一个固定参数，也是苹果规定的\n        claims.put(\"aud\", \"https://appleid.apple.com\");\n        // subject则是开发者手上的APP的BundleID\n        claims.put(\"sub\", appConfig.clientId);\n\n        try {\n            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(readAppleAuthPrivateKey(appConfig));\n            KeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n            return Jwts.builder()\n                .setHeader(header)\n                .setClaims(claims)\n                .signWith(SignatureAlgorithm.ES256, privateKey)\n                .compact();\n        } catch (Exception e) {\n            log.error(\"创建ClientSecret失败：\" + e.getLocalizedMessage(), e);\n            return null;\n        }\n    }\n}\n```\n\n### 检查返回值的有效性\n\n上面的请求如果没有错误，我们会获得 Apple ID Server 下发的 TokenResponse：\n\n```json5\n{\n    access_token: \"一个token，但是没什么用，因为苹果没有开其他的服务接口\",\n    token_type: \"Bearer，固定值\",\n    expires_in: 3600,\n    refresh_token: \"一个用来刷新token的token\",\n    id_token: \"identityToken，结果是JWT，这个是核心\"\n}\n```\n\n就像上面的 JSON 里写到的，`id_token`是我们整个流程的核心，它包括了必要的`sub`，也就是我们常说的微信开放平台 UnionID 的概念。\n\n你可能会好奇为什么我提到了 UnionID。Apple ID Server 没有开放平台和公众平台的说法，理论上一个 Team 下的所有 APP 获取到的都是同一个 UserID，当然也有可能这个就是整个 Apple ID Server 给用户分配的全局 UserID，苹果用这样的 ID 统一了第三方登录的体系，你可以通过这个 UserID，在你的开发者账号下所有的 APP 中打通账户信息。\n\n接下来，我们可以选择直接信任 Apple ID Server 返回给我们的数据，直接解析 `id_token` 的 payload 拿到`sub`，但是我还是建议走一遍公钥校验以验证回传数据的可靠性。\n\n获取公钥很简单，苹果的公钥接口是开放的，不需要任何校验，任何人都可以调用，方法也很简单：\n\n```curl\ncurl -G https://appleid.apple.com/auth/keys\n```\n\n这个接口会返回不止一个公钥，而是一组公钥列表，例如：\n\n```json\n{\n    \"keys\": [\n        {\n            \"kty\": \"RSA\",\n            \"kid\": \"86D88Kf\",\n            \"use\": \"sig\",\n            \"alg\": \"RS256\",\n            \"n\": \"iGaLqP6y-SJCCBq5Hv6pGDbG_SQ11MNjH7rWHcCFYz4hGwHC4lcSurTlV8u3avoVNM8jXevG1Iu1SY11qInqUvjJur--hghr1b56OPJu6H1iKulSxGjEIyDP6c5BdE1uwprYyr4IO9th8fOwCPygjLFrh44XEGbDIFeImwvBAGOhmMB2AD1n1KviyNsH0bEB7phQtiLk-ILjv1bORSRl8AK677-1T8isGfHKXGZ_ZGtStDe7Lu0Ihp8zoUt59kx2o9uWpROkzF56ypresiIl4WprClRCjz8x6cPZXU2qNWhu71TQvUFwvIvbkE1oYaJMb0jcOTmBRZA2QuYw-zHLwQ\",\n            \"e\": \"AQAB\"\n        },\n        {\n            \"kty\": \"RSA\",\n            \"kid\": \"eXaunmL\",\n            \"use\": \"sig\",\n            \"alg\": \"RS256\",\n            \"n\": \"4dGQ7bQK8LgILOdLsYzfZjkEAoQeVC_aqyc8GC6RX7dq_KvRAQAWPvkam8VQv4GK5T4ogklEKEvj5ISBamdDNq1n52TpxQwI2EqxSk7I9fKPKhRt4F8-2yETlYvye-2s6NeWJim0KBtOVrk0gWvEDgd6WOqJl_yt5WBISvILNyVg1qAAM8JeX6dRPosahRVDjA52G2X-Tip84wqwyRpUlq2ybzcLh3zyhCitBOebiRWDQfG26EH9lTlJhll-p_Dg8vAXxJLIJ4SNLcqgFeZe4OfHLgdzMvxXZJnPp_VgmkcpUdRotazKZumj6dBPcXI_XID4Z4Z3OM1KrZPJNdUhxw\",\n            \"e\": \"AQAB\"\n        }\n    ]\n}\n```\n\n是不是有点意外，苹果并不想让你直接知道该用哪个公钥去检查返回值，而是需要通过`KeyID`获取正确的公钥来验证返回值。这个`KeyID`也很好拿，就在`id_token`的 header 里，反解析 JWT 就能拿到。下面我把我自己的代码贴一下：\n\n```java\nclass Service {\n    /**\n     * 从Apple服务器获取验证Token签名的公钥（服务器缓存3600秒）\n     */\n    private JWKSet requestApplePublicKey() {\n        // JWKSet，其结构如上面的 API 返回值\n        JWKSet obj;\n        String value = redis.get(KEY_APPLE_PUBLIC_KEY_LIST);\n        if (StringUtils.isNotEmpty(value)) {\n            // 服务器可以做一次短时缓存，从缓存读取公钥列表\n            obj = JSON.parseObject(value, JWKSet.class);\n        } else {\n            // 第一次访问/缓存未命中，向 Apple ID Server 请求公钥组\n            RestTemplate restTemplate = new RestTemplate();\n            String content = restTemplate.getForObject(API_APPLE_AUTH_KEY, String.class);\n            if (StringUtil.isEmpty(content)) {\n                // 考虑到有可能会请求失败，这里我做了判空\n                return null;\n            }\n            obj = JSON.parseObject(content, JWKSet.class);\n            // 写入短时缓存\n            redis.setex(KEY_APPLE_PUBLIC_KEY_LIST, content, 3600);\n        }\n        // 返回获取到的公钥对象\n        return obj;\n    }\n\n    /**\n     * 获取匹配identityToken.kid的公钥\n     *\n     * @param kid 从 id_token 解析出来的 KeyID\n     */\n    private PublicKey getApplePublicKey(String kid) {\n        JWKSet jwkSet = requestApplePublicKey();\n        if (jwkSet == null) {\n          return null;\n        }\n\n        for (JWKSet.Keys key : jwkSet.getKeys()) {\n            // 在这里，我们把从 id_token 反解到的 kid 拿来查询公钥，如果找到了，则通过关键的两个参数 n 和 e 构造公钥对象，这个公钥会被用来验证 id_token 的有效性。\n            if (kid.equals(key.getKid())) {\n                try {\n                    String n = key.getN();\n                    String e = key.getE();\n                    BigInteger modulus = new BigInteger(1, Base64.decodeBase64(n));\n                    BigInteger publicExponent = new BigInteger(1, Base64.decodeBase64(e));\n                    RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, publicExponent);\n                    KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n                    return kf.generatePublic(spec);\n                } catch (Exception e) {\n                    log.error(\"解析获取公钥失败：\" + e.getLocalizedMessage(), e);\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 检查identityToken是否合法\n     */\n    public boolean verifyAppleIdentityToken(String identityToken) {\n        DecodedJWT jwt = JWT.decode(identityToken);\n        String keyId = jwt.getKeyId();\n        String audience = jwt.getAudience().get(0);\n        String subject = jwt.getSubject();\n\n        PublicKey publicKey = getApplePublicKey(keyId);\n        JwtParser jwtParser = Jwts.parser().setSigningKey(publicKey);\n        // 官方文档说明描述到，由 Apple ID Server 签发的 token 信息，其 iss 是固定值 https://appleid.apple.com\n        jwtParser.requireIssuer(\"https://appleid.apple.com\");\n        // 这里检查 aud 是来自指定 App 发起的授权\n        jwtParser.requireAudience(audience);\n        // 这个检查一般来说会使用客户端传来的 user 做 sub 的检查依据，但我自己的实现就没考虑这么多了。\n        // 建议在 APP 向后端服务器发起登录调用时，安全起见，除开 code 授权码之外，也把 user 传来，因为客户端收到的 user 一定是 Apple ID Server 回传的合法值。\n        jwtParser.requireSubject(subject);\n\n        try {\n            Jws<Claims> jws = jwtParser.parseClaimsJws(identityToken);\n            // 检查 JWS 里是否存在 auth_time ，理由嘛我不知道，但我看大多数文档里大家都是这么检查的 :(\n            return jws != null && jws.getBody().containsKey(\"auth_time\");\n        } catch (Exception e) {\n            log.error(e.getLocalizedMessage(), e);\n            return false;\n        }\n    }\n}\n```\n\n只要我们对`id_token`的检查通过，整个授权流程基本就算完成了，后端服务器就能正确获取到 user 信息，从而进行我们自己的第三方登录/注册流程。\n","slug":"2020-11-24-SignInWithApple","published":1,"updated":"2022-03-31T04:35:33.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9n0026vripfb5h9uld","content":"<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>一年前（注：本文撰写日期<code>2020-11-24</code>），Apple 对开发文档做了修改，自 iOS 13 之后，Apple 提供了一项名为<code>Sign in with Apple</code>的服务，旨在利用 Apple ID 服务，为第三方应用提供通过 iCloud 账号登录注册的入口。</p>\n<p>然而，这项服务随之而来的改动是，任何接入第三方应用登录入口的 APP，必须接入<code>Sign in with Apple</code>服务，否则将会被拒绝上架到 App Store。</p>\n<p>得知这个改动已经是撰写本文的时候了，其实我不知道该不该庆幸 App Store 审核人员没有因为我们没接这项服务而否掉我们的 APP，不过也是时候要把这个漏洞给补上了。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>也没啥背景，「一图流」走起：</p>\n<p><img src=\"/static/images/2020-11-24-SignInWithApple/01.jpeg\" alt=\"反正好狠的规定\"></p>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>根据 Apple Developer Documentation 中对 <a href=\"https://developer.apple.com/documentation/sign_in_with_apple\"><code>Sign in with Apple</code></a> 的说明，利用这项服务跟我们去接入微信服务号登录的流程是差不多的：</p>\n<ol>\n<li>向 Apple ID Server 申请登录，从那边获取一个叫<code>code</code>的东西。没错，这就是 OAuth 中的授权码，<code>Sign in with Apple</code>本质上还是一个 OAuth 授权认证的服务。</li>\n<li>那么我们都清楚了这是一个 OAuth 的授权码模式。APP 那边拿到了<code>code</code>之后，接着就是把这玩意儿扔给后端服务器，由后端服务器去通过<code>code</code>换取相应的用户信息。</li>\n<li>服务器换到用户信息，就可以继续完成后续的登录&#x2F;注册的事情。</li>\n</ol>\n<h2 id=\"动手？\"><a href=\"#动手？\" class=\"headerlink\" title=\"动手？\"></a>动手？</h2><p>那么，说的那么简单，实际上对于后段服务器需要做的事情，网上的文档还是比较少的，绝大多数接入<code>Sign in with Apple</code>的教程都是客户端方案。当然，我们要的是一个思路，这些方案里或多或少都点到了一些。</p>\n<p>实际施工的时候，后端需要关注的细节可以罗列为如下几点：</p>\n<ol>\n<li>从 Apple ID Server 获取公钥，取得的不是一个公钥，而是一组公钥，而这些公钥只是用来对<code>id_token</code>校验用的。这里提到的<code>id_token</code>会在后面解释。</li>\n<li>换取用户信息的操作，需要服务器走一次生成 JWT 的流程，这个流程依赖的一些参数可能不是你想象中的那么容易理解，因为<code>Sign in with Apple</code>提供给你的一些配置信息并不像其他的 OAuth 服务那样容易理解。</li>\n<li>苹果的这套服务有个好处，你可以本地调试。是的，本地调试，不一定需要提交到测试服务器，也不一定需要提交到生产环境，但是有可能本地调试通过了放到线上就会有一大批问题。（毕竟生产环境你永远都不知道会发生什么，对吧？）</li>\n<li>我上面第一条提到了<code>id_token</code>对吧，首先这个东西是一个”JWT”，那么你可以按照 JWT 的方式来对这个参数进行解析取值。但是，苹果在这个参数上用了一个叫 JWS 的概念，所以才会有第一条说到的”校验”。</li>\n</ol>\n<h2 id=\"好，可以动手了\"><a href=\"#好，可以动手了\" class=\"headerlink\" title=\"好，可以动手了\"></a>好，可以动手了</h2><p>首先我们需要一些来自苹果那边下发的”toolkit”，这些配置里包括<code>TeamID</code>、<code>KeyID</code>、<code>BundleID</code>，还有一个私钥文件。</p>\n<p>服务端需要按照下面的流程来完成授权认证的操作：</p>\n<ol>\n<li>请求和验证用户，即换取用户信息<br>a. 构造请求信息<br>b. 生成一个叫<code>client_secret</code>的东西</li>\n<li>检查返回值的有效性<br>a. 从 Apple ID Server 获取公钥组<br>b. 反解析<code>id_token</code>并进行必要的 JWS 检查<br>c. 检查有效性</li>\n</ol>\n<h3 id=\"请求和验证\"><a href=\"#请求和验证\" class=\"headerlink\" title=\"请求和验证\"></a>请求和验证</h3><p>构造请求信息需要携带的一些参数如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v POST &quot;https://appleid.apple.com/auth/token&quot; \\</span><br><span class=\"line\">     -H &#x27;content-type: application/x-www-form-urlencoded&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_id=CLIENT_ID&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_secret=CLIENT_SECRET&#x27; \\</span><br><span class=\"line\">     -d &#x27;code=CODE&#x27; \\</span><br><span class=\"line\">     -d &#x27;grant_type=authorization_code&#x27; \\</span><br><span class=\"line\">     -d &#x27;redirect_uri=REDIRECT_URI&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens\">这里我贴出官方的接口文档，方便各位查看</a></p>\n<p>这些参数中，<code>client_id</code>、<code>client_secret</code>、<code>grant_type</code>是必须的，<code>redirect_uri</code>仅在需要网页登录时才携带，CS 模式不需要这个参数，<code>code</code>是从 APP 那里拿到的授权码。</p>\n<p>这里的信息不像微信服务号接入的那样，是<code>AppID + AppSecret</code>的模式，而是<code>BundleID + JWS</code>的模式。也就是说，苹果并不会给你我们平常看到的一组字符串，而是需要把 APP 的 BundleID 当作这里的<code>client_id</code>的参数，然后自己去生成一个 JWS 丢给<code>client_secret</code>。</p>\n<p>所以上面的 cURL，可以转换成下面的 cURL。这里我用的是 CS 模式，而不是 BS 模式，所以把<code>redirect_uri</code>去掉了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v POST &quot;https://appleid.apple.com/auth/token&quot; \\</span><br><span class=\"line\">     -H &#x27;content-type: application/x-www-form-urlencoded&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_id=BUNDLE_ID&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_secret=TOKEN&#x27; \\</span><br><span class=\"line\">     -d &#x27;code=CODE&#x27; \\</span><br><span class=\"line\">     -d &#x27;grant_type=authorization_code&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>client_secret</code>的话，这里我还是直接丢代码吧，代码里会有详细的说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    String teamId;</span><br><span class=\"line\">    String keyId;</span><br><span class=\"line\">    String clientId;</span><br><span class=\"line\">    String keyPath;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取私钥</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>[] readKeyFile(AppConfig appConfig) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置的私钥文件路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">keyPath</span> <span class=\"operator\">=</span> appConfig.keyPath;</span><br><span class=\"line\">        String base64;</span><br><span class=\"line\">        <span class=\"comment\">// 创建字符读取流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> getClass().classLoader.getResourceAsStream(keyPath);</span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(Objects.requireNonNull(is)))</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里我们只需要私钥文件中排除头部和尾部的中间部分，也就是私钥正文部分</span></span><br><span class=\"line\">            base64 = reader.lines().collect(Collectors.joining());</span><br><span class=\"line\">            base64 = base64.replace(<span class=\"string\">&quot;-----BEGIN PRIVATE KEY-----&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                .replace(<span class=\"string\">&quot;-----END PRIVATE KEY-----&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;读取私钥失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后获得私钥的bytes</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.decodeBase64(base64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成client_secret</span></span><br><span class=\"line\">    String <span class=\"title function_\">generateClientSecret</span><span class=\"params\">(AppConfig appConfig)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; header = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 苹果规定加密的算法是ES256</span></span><br><span class=\"line\">        header.put(<span class=\"string\">&quot;alg&quot;</span>, <span class=\"string\">&quot;ES256&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 并且苹果下发给我们的toolkit里，用&quot;KeyID&quot;作为header.kid</span></span><br><span class=\"line\">        header.put(<span class=\"string\">&quot;kid&quot;</span>, appConfig.keyId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">iat</span> <span class=\"operator\">=</span> System.currentTimeMillis() / <span class=\"number\">1000</span>;</span><br><span class=\"line\">        Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 苹果规定开发者生成JWS所用的issuer是TeamID</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;iss&quot;</span>, appConfig.teamId);</span><br><span class=\"line\">        <span class=\"comment\">// iat和exp的参数是UNIX时间戳，秒级单位</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;iat&quot;</span>, iat);</span><br><span class=\"line\">        <span class=\"comment\">// 这里的过期时间有限制，不能大于iat的六个月之后的时间</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;exp&quot;</span>, iat + <span class=\"number\">3</span> * <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">        <span class=\"comment\">// aud是一个固定参数，也是苹果规定的</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;aud&quot;</span>, <span class=\"string\">&quot;https://appleid.apple.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// subject则是开发者手上的APP的BundleID</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;sub&quot;</span>, appConfig.clientId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">PKCS8EncodedKeySpec</span> <span class=\"variable\">pkcs8EncodedKeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PKCS8EncodedKeySpec</span>(readAppleAuthPrivateKey(appConfig));</span><br><span class=\"line\">            <span class=\"type\">KeyFactory</span> <span class=\"variable\">keyFactory</span> <span class=\"operator\">=</span> KeyFactory.getInstance(<span class=\"string\">&quot;EC&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">PrivateKey</span> <span class=\"variable\">privateKey</span> <span class=\"operator\">=</span> keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setHeader(header)</span><br><span class=\"line\">                .setClaims(claims)</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.ES256, privateKey)</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;创建ClientSecret失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查返回值的有效性\"><a href=\"#检查返回值的有效性\" class=\"headerlink\" title=\"检查返回值的有效性\"></a>检查返回值的有效性</h3><p>上面的请求如果没有错误，我们会获得 Apple ID Server 下发的 TokenResponse：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    access_token: &quot;一个token，但是没什么用，因为苹果没有开其他的服务接口&quot;,</span><br><span class=\"line\">    token_type: &quot;Bearer，固定值&quot;,</span><br><span class=\"line\">    expires_in: 3600,</span><br><span class=\"line\">    refresh_token: &quot;一个用来刷新token的token&quot;,</span><br><span class=\"line\">    id_token: &quot;identityToken，结果是JWT，这个是核心&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就像上面的 JSON 里写到的，<code>id_token</code>是我们整个流程的核心，它包括了必要的<code>sub</code>，也就是我们常说的微信开放平台 UnionID 的概念。</p>\n<p>你可能会好奇为什么我提到了 UnionID。Apple ID Server 没有开放平台和公众平台的说法，理论上一个 Team 下的所有 APP 获取到的都是同一个 UserID，当然也有可能这个就是整个 Apple ID Server 给用户分配的全局 UserID，苹果用这样的 ID 统一了第三方登录的体系，你可以通过这个 UserID，在你的开发者账号下所有的 APP 中打通账户信息。</p>\n<p>接下来，我们可以选择直接信任 Apple ID Server 返回给我们的数据，直接解析 <code>id_token</code> 的 payload 拿到<code>sub</code>，但是我还是建议走一遍公钥校验以验证回传数据的可靠性。</p>\n<p>获取公钥很简单，苹果的公钥接口是开放的，不需要任何校验，任何人都可以调用，方法也很简单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -G https://appleid.apple.com/auth/keys</span><br></pre></td></tr></table></figure>\n\n<p>这个接口会返回不止一个公钥，而是一组公钥列表，例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;keys&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kty&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RSA&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;86D88Kf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;use&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sig&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;iGaLqP6y-SJCCBq5Hv6pGDbG_SQ11MNjH7rWHcCFYz4hGwHC4lcSurTlV8u3avoVNM8jXevG1Iu1SY11qInqUvjJur--hghr1b56OPJu6H1iKulSxGjEIyDP6c5BdE1uwprYyr4IO9th8fOwCPygjLFrh44XEGbDIFeImwvBAGOhmMB2AD1n1KviyNsH0bEB7phQtiLk-ILjv1bORSRl8AK677-1T8isGfHKXGZ_ZGtStDe7Lu0Ihp8zoUt59kx2o9uWpROkzF56ypresiIl4WprClRCjz8x6cPZXU2qNWhu71TQvUFwvIvbkE1oYaJMb0jcOTmBRZA2QuYw-zHLwQ&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AQAB&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kty&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RSA&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eXaunmL&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;use&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sig&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4dGQ7bQK8LgILOdLsYzfZjkEAoQeVC_aqyc8GC6RX7dq_KvRAQAWPvkam8VQv4GK5T4ogklEKEvj5ISBamdDNq1n52TpxQwI2EqxSk7I9fKPKhRt4F8-2yETlYvye-2s6NeWJim0KBtOVrk0gWvEDgd6WOqJl_yt5WBISvILNyVg1qAAM8JeX6dRPosahRVDjA52G2X-Tip84wqwyRpUlq2ybzcLh3zyhCitBOebiRWDQfG26EH9lTlJhll-p_Dg8vAXxJLIJ4SNLcqgFeZe4OfHLgdzMvxXZJnPp_VgmkcpUdRotazKZumj6dBPcXI_XID4Z4Z3OM1KrZPJNdUhxw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AQAB&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>是不是有点意外，苹果并不想让你直接知道该用哪个公钥去检查返回值，而是需要通过<code>KeyID</code>获取正确的公钥来验证返回值。这个<code>KeyID</code>也很好拿，就在<code>id_token</code>的 header 里，反解析 JWT 就能拿到。下面我把我自己的代码贴一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从Apple服务器获取验证Token签名的公钥（服务器缓存3600秒）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JWKSet <span class=\"title function_\">requestApplePublicKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// JWKSet，其结构如上面的 API 返回值</span></span><br><span class=\"line\">        JWKSet obj;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> redis.get(KEY_APPLE_PUBLIC_KEY_LIST);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(value)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 服务器可以做一次短时缓存，从缓存读取公钥列表</span></span><br><span class=\"line\">            obj = JSON.parseObject(value, JWKSet.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次访问/缓存未命中，向 Apple ID Server 请求公钥组</span></span><br><span class=\"line\">            <span class=\"type\">RestTemplate</span> <span class=\"variable\">restTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> restTemplate.getForObject(API_APPLE_AUTH_KEY, String.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtil.isEmpty(content)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 考虑到有可能会请求失败，这里我做了判空</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            obj = JSON.parseObject(content, JWKSet.class);</span><br><span class=\"line\">            <span class=\"comment\">// 写入短时缓存</span></span><br><span class=\"line\">            redis.setex(KEY_APPLE_PUBLIC_KEY_LIST, content, <span class=\"number\">3600</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回获取到的公钥对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取匹配identityToken.kid的公钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> kid 从 id_token 解析出来的 KeyID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PublicKey <span class=\"title function_\">getApplePublicKey</span><span class=\"params\">(String kid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JWKSet</span> <span class=\"variable\">jwkSet</span> <span class=\"operator\">=</span> requestApplePublicKey();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jwkSet == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (JWKSet.Keys key : jwkSet.getKeys()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里，我们把从 id_token 反解到的 kid 拿来查询公钥，如果找到了，则通过关键的两个参数 n 和 e 构造公钥对象，这个公钥会被用来验证 id_token 的有效性。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (kid.equals(key.getKid())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> key.getN();</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> key.getE();</span><br><span class=\"line\">                    <span class=\"type\">BigInteger</span> <span class=\"variable\">modulus</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, Base64.decodeBase64(n));</span><br><span class=\"line\">                    <span class=\"type\">BigInteger</span> <span class=\"variable\">publicExponent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, Base64.decodeBase64(e));</span><br><span class=\"line\">                    <span class=\"type\">RSAPublicKeySpec</span> <span class=\"variable\">spec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RSAPublicKeySpec</span>(modulus, publicExponent);</span><br><span class=\"line\">                    <span class=\"type\">KeyFactory</span> <span class=\"variable\">kf</span> <span class=\"operator\">=</span> KeyFactory.getInstance(<span class=\"string\">&quot;RSA&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> kf.generatePublic(spec);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;解析获取公钥失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查identityToken是否合法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">verifyAppleIdentityToken</span><span class=\"params\">(String identityToken)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DecodedJWT</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JWT.decode(identityToken);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">keyId</span> <span class=\"operator\">=</span> jwt.getKeyId();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">audience</span> <span class=\"operator\">=</span> jwt.getAudience().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> jwt.getSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PublicKey</span> <span class=\"variable\">publicKey</span> <span class=\"operator\">=</span> getApplePublicKey(keyId);</span><br><span class=\"line\">        <span class=\"type\">JwtParser</span> <span class=\"variable\">jwtParser</span> <span class=\"operator\">=</span> Jwts.parser().setSigningKey(publicKey);</span><br><span class=\"line\">        <span class=\"comment\">// 官方文档说明描述到，由 Apple ID Server 签发的 token 信息，其 iss 是固定值 https://appleid.apple.com</span></span><br><span class=\"line\">        jwtParser.requireIssuer(<span class=\"string\">&quot;https://appleid.apple.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这里检查 aud 是来自指定 App 发起的授权</span></span><br><span class=\"line\">        jwtParser.requireAudience(audience);</span><br><span class=\"line\">        <span class=\"comment\">// 这个检查一般来说会使用客户端传来的 user 做 sub 的检查依据，但我自己的实现就没考虑这么多了。</span></span><br><span class=\"line\">        <span class=\"comment\">// 建议在 APP 向后端服务器发起登录调用时，安全起见，除开 code 授权码之外，也把 user 传来，因为客户端收到的 user 一定是 Apple ID Server 回传的合法值。</span></span><br><span class=\"line\">        jwtParser.requireSubject(subject);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = jwtParser.parseClaimsJws(identityToken);</span><br><span class=\"line\">            <span class=\"comment\">// 检查 JWS 里是否存在 auth_time ，理由嘛我不知道，但我看大多数文档里大家都是这么检查的 :(</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> jws != <span class=\"literal\">null</span> &amp;&amp; jws.getBody().containsKey(<span class=\"string\">&quot;auth_time&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要我们对<code>id_token</code>的检查通过，整个授权流程基本就算完成了，后端服务器就能正确获取到 user 信息，从而进行我们自己的第三方登录&#x2F;注册流程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>一年前（注：本文撰写日期<code>2020-11-24</code>），Apple 对开发文档做了修改，自 iOS 13 之后，Apple 提供了一项名为<code>Sign in with Apple</code>的服务，旨在利用 Apple ID 服务，为第三方应用提供通过 iCloud 账号登录注册的入口。</p>\n<p>然而，这项服务随之而来的改动是，任何接入第三方应用登录入口的 APP，必须接入<code>Sign in with Apple</code>服务，否则将会被拒绝上架到 App Store。</p>\n<p>得知这个改动已经是撰写本文的时候了，其实我不知道该不该庆幸 App Store 审核人员没有因为我们没接这项服务而否掉我们的 APP，不过也是时候要把这个漏洞给补上了。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>也没啥背景，「一图流」走起：</p>\n<p><img src=\"/static/images/2020-11-24-SignInWithApple/01.jpeg\" alt=\"反正好狠的规定\"></p>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做\"></a>怎么做</h2><p>根据 Apple Developer Documentation 中对 <a href=\"https://developer.apple.com/documentation/sign_in_with_apple\"><code>Sign in with Apple</code></a> 的说明，利用这项服务跟我们去接入微信服务号登录的流程是差不多的：</p>\n<ol>\n<li>向 Apple ID Server 申请登录，从那边获取一个叫<code>code</code>的东西。没错，这就是 OAuth 中的授权码，<code>Sign in with Apple</code>本质上还是一个 OAuth 授权认证的服务。</li>\n<li>那么我们都清楚了这是一个 OAuth 的授权码模式。APP 那边拿到了<code>code</code>之后，接着就是把这玩意儿扔给后端服务器，由后端服务器去通过<code>code</code>换取相应的用户信息。</li>\n<li>服务器换到用户信息，就可以继续完成后续的登录&#x2F;注册的事情。</li>\n</ol>\n<h2 id=\"动手？\"><a href=\"#动手？\" class=\"headerlink\" title=\"动手？\"></a>动手？</h2><p>那么，说的那么简单，实际上对于后段服务器需要做的事情，网上的文档还是比较少的，绝大多数接入<code>Sign in with Apple</code>的教程都是客户端方案。当然，我们要的是一个思路，这些方案里或多或少都点到了一些。</p>\n<p>实际施工的时候，后端需要关注的细节可以罗列为如下几点：</p>\n<ol>\n<li>从 Apple ID Server 获取公钥，取得的不是一个公钥，而是一组公钥，而这些公钥只是用来对<code>id_token</code>校验用的。这里提到的<code>id_token</code>会在后面解释。</li>\n<li>换取用户信息的操作，需要服务器走一次生成 JWT 的流程，这个流程依赖的一些参数可能不是你想象中的那么容易理解，因为<code>Sign in with Apple</code>提供给你的一些配置信息并不像其他的 OAuth 服务那样容易理解。</li>\n<li>苹果的这套服务有个好处，你可以本地调试。是的，本地调试，不一定需要提交到测试服务器，也不一定需要提交到生产环境，但是有可能本地调试通过了放到线上就会有一大批问题。（毕竟生产环境你永远都不知道会发生什么，对吧？）</li>\n<li>我上面第一条提到了<code>id_token</code>对吧，首先这个东西是一个”JWT”，那么你可以按照 JWT 的方式来对这个参数进行解析取值。但是，苹果在这个参数上用了一个叫 JWS 的概念，所以才会有第一条说到的”校验”。</li>\n</ol>\n<h2 id=\"好，可以动手了\"><a href=\"#好，可以动手了\" class=\"headerlink\" title=\"好，可以动手了\"></a>好，可以动手了</h2><p>首先我们需要一些来自苹果那边下发的”toolkit”，这些配置里包括<code>TeamID</code>、<code>KeyID</code>、<code>BundleID</code>，还有一个私钥文件。</p>\n<p>服务端需要按照下面的流程来完成授权认证的操作：</p>\n<ol>\n<li>请求和验证用户，即换取用户信息<br>a. 构造请求信息<br>b. 生成一个叫<code>client_secret</code>的东西</li>\n<li>检查返回值的有效性<br>a. 从 Apple ID Server 获取公钥组<br>b. 反解析<code>id_token</code>并进行必要的 JWS 检查<br>c. 检查有效性</li>\n</ol>\n<h3 id=\"请求和验证\"><a href=\"#请求和验证\" class=\"headerlink\" title=\"请求和验证\"></a>请求和验证</h3><p>构造请求信息需要携带的一些参数如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v POST &quot;https://appleid.apple.com/auth/token&quot; \\</span><br><span class=\"line\">     -H &#x27;content-type: application/x-www-form-urlencoded&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_id=CLIENT_ID&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_secret=CLIENT_SECRET&#x27; \\</span><br><span class=\"line\">     -d &#x27;code=CODE&#x27; \\</span><br><span class=\"line\">     -d &#x27;grant_type=authorization_code&#x27; \\</span><br><span class=\"line\">     -d &#x27;redirect_uri=REDIRECT_URI&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens\">这里我贴出官方的接口文档，方便各位查看</a></p>\n<p>这些参数中，<code>client_id</code>、<code>client_secret</code>、<code>grant_type</code>是必须的，<code>redirect_uri</code>仅在需要网页登录时才携带，CS 模式不需要这个参数，<code>code</code>是从 APP 那里拿到的授权码。</p>\n<p>这里的信息不像微信服务号接入的那样，是<code>AppID + AppSecret</code>的模式，而是<code>BundleID + JWS</code>的模式。也就是说，苹果并不会给你我们平常看到的一组字符串，而是需要把 APP 的 BundleID 当作这里的<code>client_id</code>的参数，然后自己去生成一个 JWS 丢给<code>client_secret</code>。</p>\n<p>所以上面的 cURL，可以转换成下面的 cURL。这里我用的是 CS 模式，而不是 BS 模式，所以把<code>redirect_uri</code>去掉了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -v POST &quot;https://appleid.apple.com/auth/token&quot; \\</span><br><span class=\"line\">     -H &#x27;content-type: application/x-www-form-urlencoded&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_id=BUNDLE_ID&#x27; \\</span><br><span class=\"line\">     -d &#x27;client_secret=TOKEN&#x27; \\</span><br><span class=\"line\">     -d &#x27;code=CODE&#x27; \\</span><br><span class=\"line\">     -d &#x27;grant_type=authorization_code&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>client_secret</code>的话，这里我还是直接丢代码吧，代码里会有详细的说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    String teamId;</span><br><span class=\"line\">    String keyId;</span><br><span class=\"line\">    String clientId;</span><br><span class=\"line\">    String keyPath;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取私钥</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>[] readKeyFile(AppConfig appConfig) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置的私钥文件路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">keyPath</span> <span class=\"operator\">=</span> appConfig.keyPath;</span><br><span class=\"line\">        String base64;</span><br><span class=\"line\">        <span class=\"comment\">// 创建字符读取流</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> (</span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> getClass().classLoader.getResourceAsStream(keyPath);</span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(Objects.requireNonNull(is)))</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里我们只需要私钥文件中排除头部和尾部的中间部分，也就是私钥正文部分</span></span><br><span class=\"line\">            base64 = reader.lines().collect(Collectors.joining());</span><br><span class=\"line\">            base64 = base64.replace(<span class=\"string\">&quot;-----BEGIN PRIVATE KEY-----&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                .replace(<span class=\"string\">&quot;-----END PRIVATE KEY-----&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;读取私钥失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后获得私钥的bytes</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.decodeBase64(base64);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成client_secret</span></span><br><span class=\"line\">    String <span class=\"title function_\">generateClientSecret</span><span class=\"params\">(AppConfig appConfig)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; header = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 苹果规定加密的算法是ES256</span></span><br><span class=\"line\">        header.put(<span class=\"string\">&quot;alg&quot;</span>, <span class=\"string\">&quot;ES256&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 并且苹果下发给我们的toolkit里，用&quot;KeyID&quot;作为header.kid</span></span><br><span class=\"line\">        header.put(<span class=\"string\">&quot;kid&quot;</span>, appConfig.keyId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">iat</span> <span class=\"operator\">=</span> System.currentTimeMillis() / <span class=\"number\">1000</span>;</span><br><span class=\"line\">        Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 苹果规定开发者生成JWS所用的issuer是TeamID</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;iss&quot;</span>, appConfig.teamId);</span><br><span class=\"line\">        <span class=\"comment\">// iat和exp的参数是UNIX时间戳，秒级单位</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;iat&quot;</span>, iat);</span><br><span class=\"line\">        <span class=\"comment\">// 这里的过期时间有限制，不能大于iat的六个月之后的时间</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;exp&quot;</span>, iat + <span class=\"number\">3</span> * <span class=\"number\">30</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">        <span class=\"comment\">// aud是一个固定参数，也是苹果规定的</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;aud&quot;</span>, <span class=\"string\">&quot;https://appleid.apple.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// subject则是开发者手上的APP的BundleID</span></span><br><span class=\"line\">        claims.put(<span class=\"string\">&quot;sub&quot;</span>, appConfig.clientId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">PKCS8EncodedKeySpec</span> <span class=\"variable\">pkcs8EncodedKeySpec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PKCS8EncodedKeySpec</span>(readAppleAuthPrivateKey(appConfig));</span><br><span class=\"line\">            <span class=\"type\">KeyFactory</span> <span class=\"variable\">keyFactory</span> <span class=\"operator\">=</span> KeyFactory.getInstance(<span class=\"string\">&quot;EC&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">PrivateKey</span> <span class=\"variable\">privateKey</span> <span class=\"operator\">=</span> keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setHeader(header)</span><br><span class=\"line\">                .setClaims(claims)</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.ES256, privateKey)</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;创建ClientSecret失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查返回值的有效性\"><a href=\"#检查返回值的有效性\" class=\"headerlink\" title=\"检查返回值的有效性\"></a>检查返回值的有效性</h3><p>上面的请求如果没有错误，我们会获得 Apple ID Server 下发的 TokenResponse：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    access_token: &quot;一个token，但是没什么用，因为苹果没有开其他的服务接口&quot;,</span><br><span class=\"line\">    token_type: &quot;Bearer，固定值&quot;,</span><br><span class=\"line\">    expires_in: 3600,</span><br><span class=\"line\">    refresh_token: &quot;一个用来刷新token的token&quot;,</span><br><span class=\"line\">    id_token: &quot;identityToken，结果是JWT，这个是核心&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就像上面的 JSON 里写到的，<code>id_token</code>是我们整个流程的核心，它包括了必要的<code>sub</code>，也就是我们常说的微信开放平台 UnionID 的概念。</p>\n<p>你可能会好奇为什么我提到了 UnionID。Apple ID Server 没有开放平台和公众平台的说法，理论上一个 Team 下的所有 APP 获取到的都是同一个 UserID，当然也有可能这个就是整个 Apple ID Server 给用户分配的全局 UserID，苹果用这样的 ID 统一了第三方登录的体系，你可以通过这个 UserID，在你的开发者账号下所有的 APP 中打通账户信息。</p>\n<p>接下来，我们可以选择直接信任 Apple ID Server 返回给我们的数据，直接解析 <code>id_token</code> 的 payload 拿到<code>sub</code>，但是我还是建议走一遍公钥校验以验证回传数据的可靠性。</p>\n<p>获取公钥很简单，苹果的公钥接口是开放的，不需要任何校验，任何人都可以调用，方法也很简单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -G https://appleid.apple.com/auth/keys</span><br></pre></td></tr></table></figure>\n\n<p>这个接口会返回不止一个公钥，而是一组公钥列表，例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;keys&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kty&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RSA&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;86D88Kf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;use&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sig&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;iGaLqP6y-SJCCBq5Hv6pGDbG_SQ11MNjH7rWHcCFYz4hGwHC4lcSurTlV8u3avoVNM8jXevG1Iu1SY11qInqUvjJur--hghr1b56OPJu6H1iKulSxGjEIyDP6c5BdE1uwprYyr4IO9th8fOwCPygjLFrh44XEGbDIFeImwvBAGOhmMB2AD1n1KviyNsH0bEB7phQtiLk-ILjv1bORSRl8AK677-1T8isGfHKXGZ_ZGtStDe7Lu0Ihp8zoUt59kx2o9uWpROkzF56ypresiIl4WprClRCjz8x6cPZXU2qNWhu71TQvUFwvIvbkE1oYaJMb0jcOTmBRZA2QuYw-zHLwQ&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AQAB&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kty&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RSA&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;kid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eXaunmL&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;use&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sig&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4dGQ7bQK8LgILOdLsYzfZjkEAoQeVC_aqyc8GC6RX7dq_KvRAQAWPvkam8VQv4GK5T4ogklEKEvj5ISBamdDNq1n52TpxQwI2EqxSk7I9fKPKhRt4F8-2yETlYvye-2s6NeWJim0KBtOVrk0gWvEDgd6WOqJl_yt5WBISvILNyVg1qAAM8JeX6dRPosahRVDjA52G2X-Tip84wqwyRpUlq2ybzcLh3zyhCitBOebiRWDQfG26EH9lTlJhll-p_Dg8vAXxJLIJ4SNLcqgFeZe4OfHLgdzMvxXZJnPp_VgmkcpUdRotazKZumj6dBPcXI_XID4Z4Z3OM1KrZPJNdUhxw&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AQAB&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>是不是有点意外，苹果并不想让你直接知道该用哪个公钥去检查返回值，而是需要通过<code>KeyID</code>获取正确的公钥来验证返回值。这个<code>KeyID</code>也很好拿，就在<code>id_token</code>的 header 里，反解析 JWT 就能拿到。下面我把我自己的代码贴一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Service</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从Apple服务器获取验证Token签名的公钥（服务器缓存3600秒）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JWKSet <span class=\"title function_\">requestApplePublicKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// JWKSet，其结构如上面的 API 返回值</span></span><br><span class=\"line\">        JWKSet obj;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> redis.get(KEY_APPLE_PUBLIC_KEY_LIST);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(value)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 服务器可以做一次短时缓存，从缓存读取公钥列表</span></span><br><span class=\"line\">            obj = JSON.parseObject(value, JWKSet.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次访问/缓存未命中，向 Apple ID Server 请求公钥组</span></span><br><span class=\"line\">            <span class=\"type\">RestTemplate</span> <span class=\"variable\">restTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> restTemplate.getForObject(API_APPLE_AUTH_KEY, String.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtil.isEmpty(content)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 考虑到有可能会请求失败，这里我做了判空</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            obj = JSON.parseObject(content, JWKSet.class);</span><br><span class=\"line\">            <span class=\"comment\">// 写入短时缓存</span></span><br><span class=\"line\">            redis.setex(KEY_APPLE_PUBLIC_KEY_LIST, content, <span class=\"number\">3600</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回获取到的公钥对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取匹配identityToken.kid的公钥</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> kid 从 id_token 解析出来的 KeyID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PublicKey <span class=\"title function_\">getApplePublicKey</span><span class=\"params\">(String kid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JWKSet</span> <span class=\"variable\">jwkSet</span> <span class=\"operator\">=</span> requestApplePublicKey();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jwkSet == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (JWKSet.Keys key : jwkSet.getKeys()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里，我们把从 id_token 反解到的 kid 拿来查询公钥，如果找到了，则通过关键的两个参数 n 和 e 构造公钥对象，这个公钥会被用来验证 id_token 的有效性。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (kid.equals(key.getKid())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> key.getN();</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> key.getE();</span><br><span class=\"line\">                    <span class=\"type\">BigInteger</span> <span class=\"variable\">modulus</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, Base64.decodeBase64(n));</span><br><span class=\"line\">                    <span class=\"type\">BigInteger</span> <span class=\"variable\">publicExponent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, Base64.decodeBase64(e));</span><br><span class=\"line\">                    <span class=\"type\">RSAPublicKeySpec</span> <span class=\"variable\">spec</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RSAPublicKeySpec</span>(modulus, publicExponent);</span><br><span class=\"line\">                    <span class=\"type\">KeyFactory</span> <span class=\"variable\">kf</span> <span class=\"operator\">=</span> KeyFactory.getInstance(<span class=\"string\">&quot;RSA&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> kf.generatePublic(spec);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;解析获取公钥失败：&quot;</span> + e.getLocalizedMessage(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查identityToken是否合法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">verifyAppleIdentityToken</span><span class=\"params\">(String identityToken)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DecodedJWT</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JWT.decode(identityToken);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">keyId</span> <span class=\"operator\">=</span> jwt.getKeyId();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">audience</span> <span class=\"operator\">=</span> jwt.getAudience().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> jwt.getSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PublicKey</span> <span class=\"variable\">publicKey</span> <span class=\"operator\">=</span> getApplePublicKey(keyId);</span><br><span class=\"line\">        <span class=\"type\">JwtParser</span> <span class=\"variable\">jwtParser</span> <span class=\"operator\">=</span> Jwts.parser().setSigningKey(publicKey);</span><br><span class=\"line\">        <span class=\"comment\">// 官方文档说明描述到，由 Apple ID Server 签发的 token 信息，其 iss 是固定值 https://appleid.apple.com</span></span><br><span class=\"line\">        jwtParser.requireIssuer(<span class=\"string\">&quot;https://appleid.apple.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 这里检查 aud 是来自指定 App 发起的授权</span></span><br><span class=\"line\">        jwtParser.requireAudience(audience);</span><br><span class=\"line\">        <span class=\"comment\">// 这个检查一般来说会使用客户端传来的 user 做 sub 的检查依据，但我自己的实现就没考虑这么多了。</span></span><br><span class=\"line\">        <span class=\"comment\">// 建议在 APP 向后端服务器发起登录调用时，安全起见，除开 code 授权码之外，也把 user 传来，因为客户端收到的 user 一定是 Apple ID Server 回传的合法值。</span></span><br><span class=\"line\">        jwtParser.requireSubject(subject);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Jws&lt;Claims&gt; jws = jwtParser.parseClaimsJws(identityToken);</span><br><span class=\"line\">            <span class=\"comment\">// 检查 JWS 里是否存在 auth_time ，理由嘛我不知道，但我看大多数文档里大家都是这么检查的 :(</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> jws != <span class=\"literal\">null</span> &amp;&amp; jws.getBody().containsKey(<span class=\"string\">&quot;auth_time&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(e.getLocalizedMessage(), e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要我们对<code>id_token</code>的检查通过，整个授权流程基本就算完成了，后端服务器就能正确获取到 user 信息，从而进行我们自己的第三方登录&#x2F;注册流程。</p>\n"},{"title":"粗分析Discord Bot OAuth认证过程","date":"2021-03-03T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 稍微记录一下我对V8版本的Discord Bot授权认证的流程的理解\n\n## 引\n\n最近因为我需要设计一个开放 API 系统（虽然能不能达到`系统`这个高度我都保不准），我重新回顾了一下以前做`Discord Bots`的事情，也稍微花了点时间啃了[Discord Dev Doc - OAuth - Bots](https://discord.com/developers/docs/topics/oauth2#bots)章节，\n所以为了避免以后还要重新回去想一遍流程之类的细节，我想把我对整个 Bot 认证授权的理解粗略记录下来。\n\n## 关于 Discord Bot\n\n`Discord Bots`（下简称`Bot`或`Bots（复数形式）`）是个比较巧妙的东西，因为透过 RESTFul API 和 Gateway，Discord 开放了几乎所有能对外使用的功能，这在 Discord 这个平台中给了开发者很大的发展空间。\n\n> We support the authorization code grant, the implicit grant, client credentials, and some modified special-for-Discord flows for Bots and Webhooks\n\nDiscord 开发团队为`Bots`设计的 OAuth 是一种定制化的 OAuth，有别于一般的客户端授权模式，它让 Bots 的接入变得十分简单。\n\n一个可用的`Bot`其本质是一个个开发者创建的`Application`（下简称`APP`）下属的一个特殊的用户，在 Discord 中，这样的用户被称为`Bot user`。\n\n在创建`APP`时，Discord 应用中心会为`APP`分配通常 OAuth 服务会下发的诸如`ClientID`、`ClientSecret`等参数，并且创建一个属于这个应用的`Bot user`，这个用户拥有自己独特的`Token`，可以理解为这是一个给`Bot user`用来当作登录的密码。\n\n> 这里说是`密码`其实是有原因的，在[Extended Bot Authorization Access Token Example](https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization-extended-bot-authorization-access-token-example) 小节中，\n> 官方给出了一个`Bot`授权后的返回值范例，其中的`access_token`是一个分发下来的参数。\n>\n> 所以`Bot user`的`Token`并不是一个可以直接拿去请求 API 的`access_token`\n>\n> 然而这个范例是[Advanced Bot Authorization](https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization)章节下的，所以这里也可能是我理解错了。\n\n## `Bots`是怎么运作的？\n\n当你创建了一个应用后，按照上面的说明，你还不能拿着 Discord 下发给你的东西直接去快乐调接口，因为这个时候你手上的`APP`还仅仅只是一个空壳，甚至`Bot`没有进入过一个伺服器，也没有加过一个好友（别忘了，在 Discord 里`Bot`连加好友的能力都没有）。\n\n在[Bot Authorization Flow](https://discord.com/developers/docs/topics/oauth2#bot-authorization-flow)章节中，文档告诉了你授权`Bot`进入伺服器的流程。\n\n`https://discord.com/api/oauth2/authorize?client_id=157730590492196864&scope=bot&permissions=1`\n\n| name                 | description                                                            |\n| :------------------- | :--------------------------------------------------------------------- |\n| client_id            | your app's client id                                                   |\n| scope                | needs to include `bot` for the bot flow                                |\n| permissions          | the permissions you're requesting                                      |\n| guild_id             | pre-fills the dropdown picker with a guild for the user                |\n| disable_guild_select | `true` or `false` —disallows the user from changing the guild dropdown |\n\n这个链接会把你带到一个 Discord 官方提供的授权页面，在这个页面里，按我的理解，Discord 做了如下几件事情：\n\n1. 验证用户登录状态\n2. 用户选择需要加入的自己持有的伺服器\n3. 等待用户通过授权\n\n从上面的流程上来看，一个`Bot`的授权，实际上是一个加入伺服器的申请，需要伺服器所有者通过`Bot`的加入申请（有可能是管理员？我在我加入过的所有伺服器都没有管理员的身份，所以管理员可否授权我就无从得知了）。\n\n所以明面上来看，`Bot`的授权流程其实还蛮简单的，把应用 ID 或者一个拼好的链接发送给伺服器所有者，然后等待对方通过授权（通过加入伺服器申请），之后这个`Bot`就可以在伺服器里快乐玩耍了。\n\n## 后续\n\n后续的工作，以我通常会用的`Discord.py`举例，只要把一些需要交给`Bot`去做的事情、指令等等，写好代码定义好，再把 Discord 下发的`Token`放到代码里跑起来，似乎就完成了一个简单的`APP`了。\n\n## 关键点\n\n到这里，该说的东西也不剩多少了。\n\n`Bots`依赖`Application`，是`APP`下属的一个特殊用户，这个用户有一个全局唯一的`Token`，这个`Token`一方面用来辨别`Bot user`，一方面用来申请`Bot`用的`access_token`来调用开放的 API。\n\n`Bot`能正常工作，通常需要让伺服器所有者通过授权，也就是通过加入申请，让`Bot user`加入到伺服器中。\n\n大概就点到这里为止。\n","source":"_posts/2021-03-03-AnalysisOfDiscordBotOAuth.md","raw":"---\ntitle: 粗分析Discord Bot OAuth认证过程\ndate: 2021-03-03 10:00:00\ncategories:\n    - guide\ntags:\n    - Discord\n    - Discord API\n    - Discord Bot\nmp3:\ncover:\n---\n\n> 稍微记录一下我对V8版本的Discord Bot授权认证的流程的理解\n\n## 引\n\n最近因为我需要设计一个开放 API 系统（虽然能不能达到`系统`这个高度我都保不准），我重新回顾了一下以前做`Discord Bots`的事情，也稍微花了点时间啃了[Discord Dev Doc - OAuth - Bots](https://discord.com/developers/docs/topics/oauth2#bots)章节，\n所以为了避免以后还要重新回去想一遍流程之类的细节，我想把我对整个 Bot 认证授权的理解粗略记录下来。\n\n## 关于 Discord Bot\n\n`Discord Bots`（下简称`Bot`或`Bots（复数形式）`）是个比较巧妙的东西，因为透过 RESTFul API 和 Gateway，Discord 开放了几乎所有能对外使用的功能，这在 Discord 这个平台中给了开发者很大的发展空间。\n\n> We support the authorization code grant, the implicit grant, client credentials, and some modified special-for-Discord flows for Bots and Webhooks\n\nDiscord 开发团队为`Bots`设计的 OAuth 是一种定制化的 OAuth，有别于一般的客户端授权模式，它让 Bots 的接入变得十分简单。\n\n一个可用的`Bot`其本质是一个个开发者创建的`Application`（下简称`APP`）下属的一个特殊的用户，在 Discord 中，这样的用户被称为`Bot user`。\n\n在创建`APP`时，Discord 应用中心会为`APP`分配通常 OAuth 服务会下发的诸如`ClientID`、`ClientSecret`等参数，并且创建一个属于这个应用的`Bot user`，这个用户拥有自己独特的`Token`，可以理解为这是一个给`Bot user`用来当作登录的密码。\n\n> 这里说是`密码`其实是有原因的，在[Extended Bot Authorization Access Token Example](https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization-extended-bot-authorization-access-token-example) 小节中，\n> 官方给出了一个`Bot`授权后的返回值范例，其中的`access_token`是一个分发下来的参数。\n>\n> 所以`Bot user`的`Token`并不是一个可以直接拿去请求 API 的`access_token`\n>\n> 然而这个范例是[Advanced Bot Authorization](https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization)章节下的，所以这里也可能是我理解错了。\n\n## `Bots`是怎么运作的？\n\n当你创建了一个应用后，按照上面的说明，你还不能拿着 Discord 下发给你的东西直接去快乐调接口，因为这个时候你手上的`APP`还仅仅只是一个空壳，甚至`Bot`没有进入过一个伺服器，也没有加过一个好友（别忘了，在 Discord 里`Bot`连加好友的能力都没有）。\n\n在[Bot Authorization Flow](https://discord.com/developers/docs/topics/oauth2#bot-authorization-flow)章节中，文档告诉了你授权`Bot`进入伺服器的流程。\n\n`https://discord.com/api/oauth2/authorize?client_id=157730590492196864&scope=bot&permissions=1`\n\n| name                 | description                                                            |\n| :------------------- | :--------------------------------------------------------------------- |\n| client_id            | your app's client id                                                   |\n| scope                | needs to include `bot` for the bot flow                                |\n| permissions          | the permissions you're requesting                                      |\n| guild_id             | pre-fills the dropdown picker with a guild for the user                |\n| disable_guild_select | `true` or `false` —disallows the user from changing the guild dropdown |\n\n这个链接会把你带到一个 Discord 官方提供的授权页面，在这个页面里，按我的理解，Discord 做了如下几件事情：\n\n1. 验证用户登录状态\n2. 用户选择需要加入的自己持有的伺服器\n3. 等待用户通过授权\n\n从上面的流程上来看，一个`Bot`的授权，实际上是一个加入伺服器的申请，需要伺服器所有者通过`Bot`的加入申请（有可能是管理员？我在我加入过的所有伺服器都没有管理员的身份，所以管理员可否授权我就无从得知了）。\n\n所以明面上来看，`Bot`的授权流程其实还蛮简单的，把应用 ID 或者一个拼好的链接发送给伺服器所有者，然后等待对方通过授权（通过加入伺服器申请），之后这个`Bot`就可以在伺服器里快乐玩耍了。\n\n## 后续\n\n后续的工作，以我通常会用的`Discord.py`举例，只要把一些需要交给`Bot`去做的事情、指令等等，写好代码定义好，再把 Discord 下发的`Token`放到代码里跑起来，似乎就完成了一个简单的`APP`了。\n\n## 关键点\n\n到这里，该说的东西也不剩多少了。\n\n`Bots`依赖`Application`，是`APP`下属的一个特殊用户，这个用户有一个全局唯一的`Token`，这个`Token`一方面用来辨别`Bot user`，一方面用来申请`Bot`用的`access_token`来调用开放的 API。\n\n`Bot`能正常工作，通常需要让伺服器所有者通过授权，也就是通过加入申请，让`Bot user`加入到伺服器中。\n\n大概就点到这里为止。\n","slug":"2021-03-03-AnalysisOfDiscordBotOAuth","published":1,"updated":"2022-03-31T04:36:09.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9n0029vrip26pd0ui6","content":"<blockquote>\n<p>稍微记录一下我对V8版本的Discord Bot授权认证的流程的理解</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>最近因为我需要设计一个开放 API 系统（虽然能不能达到<code>系统</code>这个高度我都保不准），我重新回顾了一下以前做<code>Discord Bots</code>的事情，也稍微花了点时间啃了<a href=\"https://discord.com/developers/docs/topics/oauth2#bots\">Discord Dev Doc - OAuth - Bots</a>章节，<br>所以为了避免以后还要重新回去想一遍流程之类的细节，我想把我对整个 Bot 认证授权的理解粗略记录下来。</p>\n<h2 id=\"关于-Discord-Bot\"><a href=\"#关于-Discord-Bot\" class=\"headerlink\" title=\"关于 Discord Bot\"></a>关于 Discord Bot</h2><p><code>Discord Bots</code>（下简称<code>Bot</code>或<code>Bots（复数形式）</code>）是个比较巧妙的东西，因为透过 RESTFul API 和 Gateway，Discord 开放了几乎所有能对外使用的功能，这在 Discord 这个平台中给了开发者很大的发展空间。</p>\n<blockquote>\n<p>We support the authorization code grant, the implicit grant, client credentials, and some modified special-for-Discord flows for Bots and Webhooks</p>\n</blockquote>\n<p>Discord 开发团队为<code>Bots</code>设计的 OAuth 是一种定制化的 OAuth，有别于一般的客户端授权模式，它让 Bots 的接入变得十分简单。</p>\n<p>一个可用的<code>Bot</code>其本质是一个个开发者创建的<code>Application</code>（下简称<code>APP</code>）下属的一个特殊的用户，在 Discord 中，这样的用户被称为<code>Bot user</code>。</p>\n<p>在创建<code>APP</code>时，Discord 应用中心会为<code>APP</code>分配通常 OAuth 服务会下发的诸如<code>ClientID</code>、<code>ClientSecret</code>等参数，并且创建一个属于这个应用的<code>Bot user</code>，这个用户拥有自己独特的<code>Token</code>，可以理解为这是一个给<code>Bot user</code>用来当作登录的密码。</p>\n<blockquote>\n<p>这里说是<code>密码</code>其实是有原因的，在<a href=\"https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization-extended-bot-authorization-access-token-example\">Extended Bot Authorization Access Token Example</a> 小节中，<br>官方给出了一个<code>Bot</code>授权后的返回值范例，其中的<code>access_token</code>是一个分发下来的参数。</p>\n<p>所以<code>Bot user</code>的<code>Token</code>并不是一个可以直接拿去请求 API 的<code>access_token</code></p>\n<p>然而这个范例是<a href=\"https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization\">Advanced Bot Authorization</a>章节下的，所以这里也可能是我理解错了。</p>\n</blockquote>\n<h2 id=\"Bots是怎么运作的？\"><a href=\"#Bots是怎么运作的？\" class=\"headerlink\" title=\"Bots是怎么运作的？\"></a><code>Bots</code>是怎么运作的？</h2><p>当你创建了一个应用后，按照上面的说明，你还不能拿着 Discord 下发给你的东西直接去快乐调接口，因为这个时候你手上的<code>APP</code>还仅仅只是一个空壳，甚至<code>Bot</code>没有进入过一个伺服器，也没有加过一个好友（别忘了，在 Discord 里<code>Bot</code>连加好友的能力都没有）。</p>\n<p>在<a href=\"https://discord.com/developers/docs/topics/oauth2#bot-authorization-flow\">Bot Authorization Flow</a>章节中，文档告诉了你授权<code>Bot</code>进入伺服器的流程。</p>\n<p><code>https://discord.com/api/oauth2/authorize?client_id=157730590492196864&amp;scope=bot&amp;permissions=1</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">name</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">your app’s client id</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">needs to include <code>bot</code> for the bot flow</td>\n</tr>\n<tr>\n<td align=\"left\">permissions</td>\n<td align=\"left\">the permissions you’re requesting</td>\n</tr>\n<tr>\n<td align=\"left\">guild_id</td>\n<td align=\"left\">pre-fills the dropdown picker with a guild for the user</td>\n</tr>\n<tr>\n<td align=\"left\">disable_guild_select</td>\n<td align=\"left\"><code>true</code> or <code>false</code> —disallows the user from changing the guild dropdown</td>\n</tr>\n</tbody></table>\n<p>这个链接会把你带到一个 Discord 官方提供的授权页面，在这个页面里，按我的理解，Discord 做了如下几件事情：</p>\n<ol>\n<li>验证用户登录状态</li>\n<li>用户选择需要加入的自己持有的伺服器</li>\n<li>等待用户通过授权</li>\n</ol>\n<p>从上面的流程上来看，一个<code>Bot</code>的授权，实际上是一个加入伺服器的申请，需要伺服器所有者通过<code>Bot</code>的加入申请（有可能是管理员？我在我加入过的所有伺服器都没有管理员的身份，所以管理员可否授权我就无从得知了）。</p>\n<p>所以明面上来看，<code>Bot</code>的授权流程其实还蛮简单的，把应用 ID 或者一个拼好的链接发送给伺服器所有者，然后等待对方通过授权（通过加入伺服器申请），之后这个<code>Bot</code>就可以在伺服器里快乐玩耍了。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>后续的工作，以我通常会用的<code>Discord.py</code>举例，只要把一些需要交给<code>Bot</code>去做的事情、指令等等，写好代码定义好，再把 Discord 下发的<code>Token</code>放到代码里跑起来，似乎就完成了一个简单的<code>APP</code>了。</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><p>到这里，该说的东西也不剩多少了。</p>\n<p><code>Bots</code>依赖<code>Application</code>，是<code>APP</code>下属的一个特殊用户，这个用户有一个全局唯一的<code>Token</code>，这个<code>Token</code>一方面用来辨别<code>Bot user</code>，一方面用来申请<code>Bot</code>用的<code>access_token</code>来调用开放的 API。</p>\n<p><code>Bot</code>能正常工作，通常需要让伺服器所有者通过授权，也就是通过加入申请，让<code>Bot user</code>加入到伺服器中。</p>\n<p>大概就点到这里为止。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>稍微记录一下我对V8版本的Discord Bot授权认证的流程的理解</p>\n</blockquote>\n<h2 id=\"引\"><a href=\"#引\" class=\"headerlink\" title=\"引\"></a>引</h2><p>最近因为我需要设计一个开放 API 系统（虽然能不能达到<code>系统</code>这个高度我都保不准），我重新回顾了一下以前做<code>Discord Bots</code>的事情，也稍微花了点时间啃了<a href=\"https://discord.com/developers/docs/topics/oauth2#bots\">Discord Dev Doc - OAuth - Bots</a>章节，<br>所以为了避免以后还要重新回去想一遍流程之类的细节，我想把我对整个 Bot 认证授权的理解粗略记录下来。</p>\n<h2 id=\"关于-Discord-Bot\"><a href=\"#关于-Discord-Bot\" class=\"headerlink\" title=\"关于 Discord Bot\"></a>关于 Discord Bot</h2><p><code>Discord Bots</code>（下简称<code>Bot</code>或<code>Bots（复数形式）</code>）是个比较巧妙的东西，因为透过 RESTFul API 和 Gateway，Discord 开放了几乎所有能对外使用的功能，这在 Discord 这个平台中给了开发者很大的发展空间。</p>\n<blockquote>\n<p>We support the authorization code grant, the implicit grant, client credentials, and some modified special-for-Discord flows for Bots and Webhooks</p>\n</blockquote>\n<p>Discord 开发团队为<code>Bots</code>设计的 OAuth 是一种定制化的 OAuth，有别于一般的客户端授权模式，它让 Bots 的接入变得十分简单。</p>\n<p>一个可用的<code>Bot</code>其本质是一个个开发者创建的<code>Application</code>（下简称<code>APP</code>）下属的一个特殊的用户，在 Discord 中，这样的用户被称为<code>Bot user</code>。</p>\n<p>在创建<code>APP</code>时，Discord 应用中心会为<code>APP</code>分配通常 OAuth 服务会下发的诸如<code>ClientID</code>、<code>ClientSecret</code>等参数，并且创建一个属于这个应用的<code>Bot user</code>，这个用户拥有自己独特的<code>Token</code>，可以理解为这是一个给<code>Bot user</code>用来当作登录的密码。</p>\n<blockquote>\n<p>这里说是<code>密码</code>其实是有原因的，在<a href=\"https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization-extended-bot-authorization-access-token-example\">Extended Bot Authorization Access Token Example</a> 小节中，<br>官方给出了一个<code>Bot</code>授权后的返回值范例，其中的<code>access_token</code>是一个分发下来的参数。</p>\n<p>所以<code>Bot user</code>的<code>Token</code>并不是一个可以直接拿去请求 API 的<code>access_token</code></p>\n<p>然而这个范例是<a href=\"https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization\">Advanced Bot Authorization</a>章节下的，所以这里也可能是我理解错了。</p>\n</blockquote>\n<h2 id=\"Bots是怎么运作的？\"><a href=\"#Bots是怎么运作的？\" class=\"headerlink\" title=\"Bots是怎么运作的？\"></a><code>Bots</code>是怎么运作的？</h2><p>当你创建了一个应用后，按照上面的说明，你还不能拿着 Discord 下发给你的东西直接去快乐调接口，因为这个时候你手上的<code>APP</code>还仅仅只是一个空壳，甚至<code>Bot</code>没有进入过一个伺服器，也没有加过一个好友（别忘了，在 Discord 里<code>Bot</code>连加好友的能力都没有）。</p>\n<p>在<a href=\"https://discord.com/developers/docs/topics/oauth2#bot-authorization-flow\">Bot Authorization Flow</a>章节中，文档告诉了你授权<code>Bot</code>进入伺服器的流程。</p>\n<p><code>https://discord.com/api/oauth2/authorize?client_id=157730590492196864&amp;scope=bot&amp;permissions=1</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">name</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">your app’s client id</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">needs to include <code>bot</code> for the bot flow</td>\n</tr>\n<tr>\n<td align=\"left\">permissions</td>\n<td align=\"left\">the permissions you’re requesting</td>\n</tr>\n<tr>\n<td align=\"left\">guild_id</td>\n<td align=\"left\">pre-fills the dropdown picker with a guild for the user</td>\n</tr>\n<tr>\n<td align=\"left\">disable_guild_select</td>\n<td align=\"left\"><code>true</code> or <code>false</code> —disallows the user from changing the guild dropdown</td>\n</tr>\n</tbody></table>\n<p>这个链接会把你带到一个 Discord 官方提供的授权页面，在这个页面里，按我的理解，Discord 做了如下几件事情：</p>\n<ol>\n<li>验证用户登录状态</li>\n<li>用户选择需要加入的自己持有的伺服器</li>\n<li>等待用户通过授权</li>\n</ol>\n<p>从上面的流程上来看，一个<code>Bot</code>的授权，实际上是一个加入伺服器的申请，需要伺服器所有者通过<code>Bot</code>的加入申请（有可能是管理员？我在我加入过的所有伺服器都没有管理员的身份，所以管理员可否授权我就无从得知了）。</p>\n<p>所以明面上来看，<code>Bot</code>的授权流程其实还蛮简单的，把应用 ID 或者一个拼好的链接发送给伺服器所有者，然后等待对方通过授权（通过加入伺服器申请），之后这个<code>Bot</code>就可以在伺服器里快乐玩耍了。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>后续的工作，以我通常会用的<code>Discord.py</code>举例，只要把一些需要交给<code>Bot</code>去做的事情、指令等等，写好代码定义好，再把 Discord 下发的<code>Token</code>放到代码里跑起来，似乎就完成了一个简单的<code>APP</code>了。</p>\n<h2 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h2><p>到这里，该说的东西也不剩多少了。</p>\n<p><code>Bots</code>依赖<code>Application</code>，是<code>APP</code>下属的一个特殊用户，这个用户有一个全局唯一的<code>Token</code>，这个<code>Token</code>一方面用来辨别<code>Bot user</code>，一方面用来申请<code>Bot</code>用的<code>access_token</code>来调用开放的 API。</p>\n<p><code>Bot</code>能正常工作，通常需要让伺服器所有者通过授权，也就是通过加入申请，让<code>Bot user</code>加入到伺服器中。</p>\n<p>大概就点到这里为止。</p>\n"},{"title":"Android项目各文件夹含义说明","date":"2017-09-14T04:00:00.000Z","mp3":null,"cover":null,"_content":"\n> 使用Android Studio 2.3版开发的Android项目文件结构说明\n\n> AS 版本：Android Studio 2.3.3 <br/>\n> 视图：Project <br/>\n> 注：本文部分说明可以通过“视图：Android”查看该文件/文件夹影响或相关的部分\n\n初次创建了一个 Basic Activity 例程之后，我们会获得如下图的文件结构\n\n![](/static/images/2017-09-14-ASProjectFolders/1.png)\n\n# /Demo\n\n这个文件夹是整个项目的根目录，包含了项目的主要资源文件，以及构建所需的 Gradle 配置和脚本。\n\n### /gradle\n\n该文件夹主要包含了 gradle wrapper 有关的文件，无须我们关心。\n\n### /.idea & Demo.iml\n\n这两个文件放在一起说，主要是它们和项目完全无关。由于 AS 2.x 之后使用了 JetBrains 的 IDE 系列，所以必然会创建它们，用来让 IDE 识别项目，并自动配置 IDE 相关环境。\n\n### /.gradle\n\n该文件夹是 AS 自动生成的，表示该项目是一个由 gradle 管理和构建的项目，效果与上面的两项相同。\n\n### .gitignore\n\n这是用来存放需要忽略，不提交到 git 版本控制项目中的文件/文件夹的名称。通过这个文件，就可以在 commit/push 到 git 时自动忽略列表中的文件/文件夹。\n\n### build.gradle\n\n这个文件在项目中一共有两个，位于/Demo 下的该文件配置了项目构建相关的配置信息，一般不需要修改。\n\n在本人的项目中，由于我使用了 Groovy 进行 Android 开发，所以我会对本文件进行修改。\n\n### settings.gradle\n\n这个文件在例程 Demo 中，由于我们只有一个/app，所以只会包含一句：\n\n```yaml\ninclude ':app'\n```\n\n它的作用是，指定 Project 中所引入的 module。通常该文件由 IDE 自动完成注入，不需要开发者自行填写。\n\n### gradle.properties\n\nGradle 全局配置，包括代理设置、编译所需 JVM 内存等。一般不建议修改，或使用 IDE 提供的工具进行影响较小的修改。\n\n### local.properties\n\n这个文件不是用来配置本地化默认国家语言编码的，而是用来指定本机 Android SKD 的路径。根据文件注释说明，该文件不能上传到版本控制项目中，以免出现协同开发错误。\n\n### gradlew & gradlew.bat\n\n这两个文件，前者运行于 Unix/Linux 系统，后者运行于 Windows 系统，它们是用于命令行执行 Gradle 脚本的批处理脚本，一般不允许修改。\n\n# /app\n\n主要的开发目录，项目的几乎所有的资源都存放在如下目录中。该文件夹内构成如图\n\n![](/static/images/2017-09-14-ASProjectFolders/2.png)\n\n### /build\n\n该文件夹也是作为构建输出文件夹，但相对于/Demo/build，该文件夹用于存放具体编译构建的资源，其内容更复杂。\n\n### /libs\n\n如果项目使用了第三方依赖包，这些依赖包会被存放到该文件夹中，并由 IDE 自动注入。\n\n### .gitignore\n\n同理，该文件夹管理根目录为/app 的目录下，不提交到 git 的文件/文件夹列表\n\n### app.iml\n\n该文件用于让 AS 识别项目，但不建议直接从此处打开，否则会缺失全局 gradle 配置信息，导致编译构建失败。\n\n### build.gradle\n\n此处的 build.gradle 直接管理项目引入的依赖包、编译器版本等配置信息，比/Demo/build.gradle 更复杂，一般开发不需要修改。\n\n同理，我使用了 Groovy 开发，所以我需要在这个文件夹添加相关的依赖和 compile 信息。\n\n### proguard-rules.pro\n\n进行大型 Java 项目开发的开发者应该都清楚该文件的作用。该文件是由开发者指定代码混淆保护的混淆规则，显式指定忽略哪些包、类，或者混淆哪些包、类。\n\n对代码混淆不熟悉的开发者一般不会修改这个文件。\n\n## /app/src（或称/src）\n\n该文件夹无疑是我们开发的重心，所有的源代码和资源文件都在这个文件夹下。\n\n该文件夹的构成如下图：\n\n![](/static/images/2017-09-14-ASProjectFolders/3.png)\n\n### /androidTest\n\n此处用来编写 Android Test 测试用例，可以对项目进行测试。\n\n### /test\n\n相对的此处则是编写单元测试代码，可以对一些独立模块进行功能性测试。\n\n### /main\n\n该文件夹包含了我们接触最多的开发资源，具体如下\n\n### /java\n\n顾名思义，这个包下面包含了程序主要的逻辑代码（Java 代码），所有的 Java 包/类，都在这个包下面存放。\n\n### /res\n\n全称“resources”，即资源文件。这个文件夹下存放了一个 APK 所需的如 ICON、颜色配置、layout 设计、界面元素等等文件。\n\n该文件夹内的结构比较规范，一般不用担心资源该放在哪里。\n\n#### /drawable\n\n该文件夹用来存放图片\n\n#### /mipmap\n\n该文件夹用来存放 ICON\n\n#### /values\n\n该文件夹用来存放样式、颜色配置\n\n#### /layout\n\n该文件夹存放 application 的布局配置文件\n\n### AndroidManifest.xml\n\n该文件管理了整个 application 的配置，包括定义的组件、application 所需的权限，都在这个文件里定义。\n\n# 核心文件\n\n### AndroidManifest.xml\n\n一个 Android Application 的所有样式配置、activities、使用到的权限，都会被引入到这个文件中，在安装、运行时被调用。这个文件相当于 Android Application 的中枢。\n\n### layout/activity_main.xml\n\n这个文件是整个 Android Application 的基础界面设计配置文件，几乎所有的前台显示的界面的设计配置文件都会由这个文件引用。\n\n### cc.ayakurayuki.demo.MainActivity\n\n> （路径：cc/ayakurayuki/demo/MainActivity.groovy）\n\n这个文件即逻辑代码，创建的 Basic Activity 会生成。它管理了 application 中按钮、菜单等元素交互的逻辑。\n","source":"_posts/2017-09-14-ASProjectFolders.md","raw":"---\ntitle: Android项目各文件夹含义说明\ndate: 2017-09-14 12:00:00\ncategories:\n    - guide\ntags:\n    - Android\nmp3:\ncover:\n---\n\n> 使用Android Studio 2.3版开发的Android项目文件结构说明\n\n> AS 版本：Android Studio 2.3.3 <br/>\n> 视图：Project <br/>\n> 注：本文部分说明可以通过“视图：Android”查看该文件/文件夹影响或相关的部分\n\n初次创建了一个 Basic Activity 例程之后，我们会获得如下图的文件结构\n\n![](/static/images/2017-09-14-ASProjectFolders/1.png)\n\n# /Demo\n\n这个文件夹是整个项目的根目录，包含了项目的主要资源文件，以及构建所需的 Gradle 配置和脚本。\n\n### /gradle\n\n该文件夹主要包含了 gradle wrapper 有关的文件，无须我们关心。\n\n### /.idea & Demo.iml\n\n这两个文件放在一起说，主要是它们和项目完全无关。由于 AS 2.x 之后使用了 JetBrains 的 IDE 系列，所以必然会创建它们，用来让 IDE 识别项目，并自动配置 IDE 相关环境。\n\n### /.gradle\n\n该文件夹是 AS 自动生成的，表示该项目是一个由 gradle 管理和构建的项目，效果与上面的两项相同。\n\n### .gitignore\n\n这是用来存放需要忽略，不提交到 git 版本控制项目中的文件/文件夹的名称。通过这个文件，就可以在 commit/push 到 git 时自动忽略列表中的文件/文件夹。\n\n### build.gradle\n\n这个文件在项目中一共有两个，位于/Demo 下的该文件配置了项目构建相关的配置信息，一般不需要修改。\n\n在本人的项目中，由于我使用了 Groovy 进行 Android 开发，所以我会对本文件进行修改。\n\n### settings.gradle\n\n这个文件在例程 Demo 中，由于我们只有一个/app，所以只会包含一句：\n\n```yaml\ninclude ':app'\n```\n\n它的作用是，指定 Project 中所引入的 module。通常该文件由 IDE 自动完成注入，不需要开发者自行填写。\n\n### gradle.properties\n\nGradle 全局配置，包括代理设置、编译所需 JVM 内存等。一般不建议修改，或使用 IDE 提供的工具进行影响较小的修改。\n\n### local.properties\n\n这个文件不是用来配置本地化默认国家语言编码的，而是用来指定本机 Android SKD 的路径。根据文件注释说明，该文件不能上传到版本控制项目中，以免出现协同开发错误。\n\n### gradlew & gradlew.bat\n\n这两个文件，前者运行于 Unix/Linux 系统，后者运行于 Windows 系统，它们是用于命令行执行 Gradle 脚本的批处理脚本，一般不允许修改。\n\n# /app\n\n主要的开发目录，项目的几乎所有的资源都存放在如下目录中。该文件夹内构成如图\n\n![](/static/images/2017-09-14-ASProjectFolders/2.png)\n\n### /build\n\n该文件夹也是作为构建输出文件夹，但相对于/Demo/build，该文件夹用于存放具体编译构建的资源，其内容更复杂。\n\n### /libs\n\n如果项目使用了第三方依赖包，这些依赖包会被存放到该文件夹中，并由 IDE 自动注入。\n\n### .gitignore\n\n同理，该文件夹管理根目录为/app 的目录下，不提交到 git 的文件/文件夹列表\n\n### app.iml\n\n该文件用于让 AS 识别项目，但不建议直接从此处打开，否则会缺失全局 gradle 配置信息，导致编译构建失败。\n\n### build.gradle\n\n此处的 build.gradle 直接管理项目引入的依赖包、编译器版本等配置信息，比/Demo/build.gradle 更复杂，一般开发不需要修改。\n\n同理，我使用了 Groovy 开发，所以我需要在这个文件夹添加相关的依赖和 compile 信息。\n\n### proguard-rules.pro\n\n进行大型 Java 项目开发的开发者应该都清楚该文件的作用。该文件是由开发者指定代码混淆保护的混淆规则，显式指定忽略哪些包、类，或者混淆哪些包、类。\n\n对代码混淆不熟悉的开发者一般不会修改这个文件。\n\n## /app/src（或称/src）\n\n该文件夹无疑是我们开发的重心，所有的源代码和资源文件都在这个文件夹下。\n\n该文件夹的构成如下图：\n\n![](/static/images/2017-09-14-ASProjectFolders/3.png)\n\n### /androidTest\n\n此处用来编写 Android Test 测试用例，可以对项目进行测试。\n\n### /test\n\n相对的此处则是编写单元测试代码，可以对一些独立模块进行功能性测试。\n\n### /main\n\n该文件夹包含了我们接触最多的开发资源，具体如下\n\n### /java\n\n顾名思义，这个包下面包含了程序主要的逻辑代码（Java 代码），所有的 Java 包/类，都在这个包下面存放。\n\n### /res\n\n全称“resources”，即资源文件。这个文件夹下存放了一个 APK 所需的如 ICON、颜色配置、layout 设计、界面元素等等文件。\n\n该文件夹内的结构比较规范，一般不用担心资源该放在哪里。\n\n#### /drawable\n\n该文件夹用来存放图片\n\n#### /mipmap\n\n该文件夹用来存放 ICON\n\n#### /values\n\n该文件夹用来存放样式、颜色配置\n\n#### /layout\n\n该文件夹存放 application 的布局配置文件\n\n### AndroidManifest.xml\n\n该文件管理了整个 application 的配置，包括定义的组件、application 所需的权限，都在这个文件里定义。\n\n# 核心文件\n\n### AndroidManifest.xml\n\n一个 Android Application 的所有样式配置、activities、使用到的权限，都会被引入到这个文件中，在安装、运行时被调用。这个文件相当于 Android Application 的中枢。\n\n### layout/activity_main.xml\n\n这个文件是整个 Android Application 的基础界面设计配置文件，几乎所有的前台显示的界面的设计配置文件都会由这个文件引用。\n\n### cc.ayakurayuki.demo.MainActivity\n\n> （路径：cc/ayakurayuki/demo/MainActivity.groovy）\n\n这个文件即逻辑代码，创建的 Basic Activity 会生成。它管理了 application 中按钮、菜单等元素交互的逻辑。\n","slug":"2017-09-14-ASProjectFolders","published":1,"updated":"2022-03-31T04:27:26.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9o002dvrip6of6fjps","content":"<blockquote>\n<p>使用Android Studio 2.3版开发的Android项目文件结构说明</p>\n</blockquote>\n<blockquote>\n<p>AS 版本：Android Studio 2.3.3 <br/><br>视图：Project <br/><br>注：本文部分说明可以通过“视图：Android”查看该文件&#x2F;文件夹影响或相关的部分</p>\n</blockquote>\n<p>初次创建了一个 Basic Activity 例程之后，我们会获得如下图的文件结构</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/1.png\"></p>\n<h1 id=\"x2F-Demo\"><a href=\"#x2F-Demo\" class=\"headerlink\" title=\"&#x2F;Demo\"></a>&#x2F;Demo</h1><p>这个文件夹是整个项目的根目录，包含了项目的主要资源文件，以及构建所需的 Gradle 配置和脚本。</p>\n<h3 id=\"x2F-gradle\"><a href=\"#x2F-gradle\" class=\"headerlink\" title=\"&#x2F;gradle\"></a>&#x2F;gradle</h3><p>该文件夹主要包含了 gradle wrapper 有关的文件，无须我们关心。</p>\n<h3 id=\"x2F-idea-amp-Demo-iml\"><a href=\"#x2F-idea-amp-Demo-iml\" class=\"headerlink\" title=\"&#x2F;.idea &amp; Demo.iml\"></a>&#x2F;.idea &amp; Demo.iml</h3><p>这两个文件放在一起说，主要是它们和项目完全无关。由于 AS 2.x 之后使用了 JetBrains 的 IDE 系列，所以必然会创建它们，用来让 IDE 识别项目，并自动配置 IDE 相关环境。</p>\n<h3 id=\"x2F-gradle-1\"><a href=\"#x2F-gradle-1\" class=\"headerlink\" title=\"&#x2F;.gradle\"></a>&#x2F;.gradle</h3><p>该文件夹是 AS 自动生成的，表示该项目是一个由 gradle 管理和构建的项目，效果与上面的两项相同。</p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>这是用来存放需要忽略，不提交到 git 版本控制项目中的文件&#x2F;文件夹的名称。通过这个文件，就可以在 commit&#x2F;push 到 git 时自动忽略列表中的文件&#x2F;文件夹。</p>\n<h3 id=\"build-gradle\"><a href=\"#build-gradle\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h3><p>这个文件在项目中一共有两个，位于&#x2F;Demo 下的该文件配置了项目构建相关的配置信息，一般不需要修改。</p>\n<p>在本人的项目中，由于我使用了 Groovy 进行 Android 开发，所以我会对本文件进行修改。</p>\n<h3 id=\"settings-gradle\"><a href=\"#settings-gradle\" class=\"headerlink\" title=\"settings.gradle\"></a>settings.gradle</h3><p>这个文件在例程 Demo 中，由于我们只有一个&#x2F;app，所以只会包含一句：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>它的作用是，指定 Project 中所引入的 module。通常该文件由 IDE 自动完成注入，不需要开发者自行填写。</p>\n<h3 id=\"gradle-properties\"><a href=\"#gradle-properties\" class=\"headerlink\" title=\"gradle.properties\"></a>gradle.properties</h3><p>Gradle 全局配置，包括代理设置、编译所需 JVM 内存等。一般不建议修改，或使用 IDE 提供的工具进行影响较小的修改。</p>\n<h3 id=\"local-properties\"><a href=\"#local-properties\" class=\"headerlink\" title=\"local.properties\"></a>local.properties</h3><p>这个文件不是用来配置本地化默认国家语言编码的，而是用来指定本机 Android SKD 的路径。根据文件注释说明，该文件不能上传到版本控制项目中，以免出现协同开发错误。</p>\n<h3 id=\"gradlew-amp-gradlew-bat\"><a href=\"#gradlew-amp-gradlew-bat\" class=\"headerlink\" title=\"gradlew &amp; gradlew.bat\"></a>gradlew &amp; gradlew.bat</h3><p>这两个文件，前者运行于 Unix&#x2F;Linux 系统，后者运行于 Windows 系统，它们是用于命令行执行 Gradle 脚本的批处理脚本，一般不允许修改。</p>\n<h1 id=\"x2F-app\"><a href=\"#x2F-app\" class=\"headerlink\" title=\"&#x2F;app\"></a>&#x2F;app</h1><p>主要的开发目录，项目的几乎所有的资源都存放在如下目录中。该文件夹内构成如图</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/2.png\"></p>\n<h3 id=\"x2F-build\"><a href=\"#x2F-build\" class=\"headerlink\" title=\"&#x2F;build\"></a>&#x2F;build</h3><p>该文件夹也是作为构建输出文件夹，但相对于&#x2F;Demo&#x2F;build，该文件夹用于存放具体编译构建的资源，其内容更复杂。</p>\n<h3 id=\"x2F-libs\"><a href=\"#x2F-libs\" class=\"headerlink\" title=\"&#x2F;libs\"></a>&#x2F;libs</h3><p>如果项目使用了第三方依赖包，这些依赖包会被存放到该文件夹中，并由 IDE 自动注入。</p>\n<h3 id=\"gitignore-1\"><a href=\"#gitignore-1\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>同理，该文件夹管理根目录为&#x2F;app 的目录下，不提交到 git 的文件&#x2F;文件夹列表</p>\n<h3 id=\"app-iml\"><a href=\"#app-iml\" class=\"headerlink\" title=\"app.iml\"></a>app.iml</h3><p>该文件用于让 AS 识别项目，但不建议直接从此处打开，否则会缺失全局 gradle 配置信息，导致编译构建失败。</p>\n<h3 id=\"build-gradle-1\"><a href=\"#build-gradle-1\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h3><p>此处的 build.gradle 直接管理项目引入的依赖包、编译器版本等配置信息，比&#x2F;Demo&#x2F;build.gradle 更复杂，一般开发不需要修改。</p>\n<p>同理，我使用了 Groovy 开发，所以我需要在这个文件夹添加相关的依赖和 compile 信息。</p>\n<h3 id=\"proguard-rules-pro\"><a href=\"#proguard-rules-pro\" class=\"headerlink\" title=\"proguard-rules.pro\"></a>proguard-rules.pro</h3><p>进行大型 Java 项目开发的开发者应该都清楚该文件的作用。该文件是由开发者指定代码混淆保护的混淆规则，显式指定忽略哪些包、类，或者混淆哪些包、类。</p>\n<p>对代码混淆不熟悉的开发者一般不会修改这个文件。</p>\n<h2 id=\"x2F-app-x2F-src（或称-x2F-src）\"><a href=\"#x2F-app-x2F-src（或称-x2F-src）\" class=\"headerlink\" title=\"&#x2F;app&#x2F;src（或称&#x2F;src）\"></a>&#x2F;app&#x2F;src（或称&#x2F;src）</h2><p>该文件夹无疑是我们开发的重心，所有的源代码和资源文件都在这个文件夹下。</p>\n<p>该文件夹的构成如下图：</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/3.png\"></p>\n<h3 id=\"x2F-androidTest\"><a href=\"#x2F-androidTest\" class=\"headerlink\" title=\"&#x2F;androidTest\"></a>&#x2F;androidTest</h3><p>此处用来编写 Android Test 测试用例，可以对项目进行测试。</p>\n<h3 id=\"x2F-test\"><a href=\"#x2F-test\" class=\"headerlink\" title=\"&#x2F;test\"></a>&#x2F;test</h3><p>相对的此处则是编写单元测试代码，可以对一些独立模块进行功能性测试。</p>\n<h3 id=\"x2F-main\"><a href=\"#x2F-main\" class=\"headerlink\" title=\"&#x2F;main\"></a>&#x2F;main</h3><p>该文件夹包含了我们接触最多的开发资源，具体如下</p>\n<h3 id=\"x2F-java\"><a href=\"#x2F-java\" class=\"headerlink\" title=\"&#x2F;java\"></a>&#x2F;java</h3><p>顾名思义，这个包下面包含了程序主要的逻辑代码（Java 代码），所有的 Java 包&#x2F;类，都在这个包下面存放。</p>\n<h3 id=\"x2F-res\"><a href=\"#x2F-res\" class=\"headerlink\" title=\"&#x2F;res\"></a>&#x2F;res</h3><p>全称“resources”，即资源文件。这个文件夹下存放了一个 APK 所需的如 ICON、颜色配置、layout 设计、界面元素等等文件。</p>\n<p>该文件夹内的结构比较规范，一般不用担心资源该放在哪里。</p>\n<h4 id=\"x2F-drawable\"><a href=\"#x2F-drawable\" class=\"headerlink\" title=\"&#x2F;drawable\"></a>&#x2F;drawable</h4><p>该文件夹用来存放图片</p>\n<h4 id=\"x2F-mipmap\"><a href=\"#x2F-mipmap\" class=\"headerlink\" title=\"&#x2F;mipmap\"></a>&#x2F;mipmap</h4><p>该文件夹用来存放 ICON</p>\n<h4 id=\"x2F-values\"><a href=\"#x2F-values\" class=\"headerlink\" title=\"&#x2F;values\"></a>&#x2F;values</h4><p>该文件夹用来存放样式、颜色配置</p>\n<h4 id=\"x2F-layout\"><a href=\"#x2F-layout\" class=\"headerlink\" title=\"&#x2F;layout\"></a>&#x2F;layout</h4><p>该文件夹存放 application 的布局配置文件</p>\n<h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><p>该文件管理了整个 application 的配置，包括定义的组件、application 所需的权限，都在这个文件里定义。</p>\n<h1 id=\"核心文件\"><a href=\"#核心文件\" class=\"headerlink\" title=\"核心文件\"></a>核心文件</h1><h3 id=\"AndroidManifest-xml-1\"><a href=\"#AndroidManifest-xml-1\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><p>一个 Android Application 的所有样式配置、activities、使用到的权限，都会被引入到这个文件中，在安装、运行时被调用。这个文件相当于 Android Application 的中枢。</p>\n<h3 id=\"layout-x2F-activity-main-xml\"><a href=\"#layout-x2F-activity-main-xml\" class=\"headerlink\" title=\"layout&#x2F;activity_main.xml\"></a>layout&#x2F;activity_main.xml</h3><p>这个文件是整个 Android Application 的基础界面设计配置文件，几乎所有的前台显示的界面的设计配置文件都会由这个文件引用。</p>\n<h3 id=\"cc-ayakurayuki-demo-MainActivity\"><a href=\"#cc-ayakurayuki-demo-MainActivity\" class=\"headerlink\" title=\"cc.ayakurayuki.demo.MainActivity\"></a>cc.ayakurayuki.demo.MainActivity</h3><blockquote>\n<p>（路径：cc&#x2F;ayakurayuki&#x2F;demo&#x2F;MainActivity.groovy）</p>\n</blockquote>\n<p>这个文件即逻辑代码，创建的 Basic Activity 会生成。它管理了 application 中按钮、菜单等元素交互的逻辑。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用Android Studio 2.3版开发的Android项目文件结构说明</p>\n</blockquote>\n<blockquote>\n<p>AS 版本：Android Studio 2.3.3 <br/><br>视图：Project <br/><br>注：本文部分说明可以通过“视图：Android”查看该文件&#x2F;文件夹影响或相关的部分</p>\n</blockquote>\n<p>初次创建了一个 Basic Activity 例程之后，我们会获得如下图的文件结构</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/1.png\"></p>\n<h1 id=\"x2F-Demo\"><a href=\"#x2F-Demo\" class=\"headerlink\" title=\"&#x2F;Demo\"></a>&#x2F;Demo</h1><p>这个文件夹是整个项目的根目录，包含了项目的主要资源文件，以及构建所需的 Gradle 配置和脚本。</p>\n<h3 id=\"x2F-gradle\"><a href=\"#x2F-gradle\" class=\"headerlink\" title=\"&#x2F;gradle\"></a>&#x2F;gradle</h3><p>该文件夹主要包含了 gradle wrapper 有关的文件，无须我们关心。</p>\n<h3 id=\"x2F-idea-amp-Demo-iml\"><a href=\"#x2F-idea-amp-Demo-iml\" class=\"headerlink\" title=\"&#x2F;.idea &amp; Demo.iml\"></a>&#x2F;.idea &amp; Demo.iml</h3><p>这两个文件放在一起说，主要是它们和项目完全无关。由于 AS 2.x 之后使用了 JetBrains 的 IDE 系列，所以必然会创建它们，用来让 IDE 识别项目，并自动配置 IDE 相关环境。</p>\n<h3 id=\"x2F-gradle-1\"><a href=\"#x2F-gradle-1\" class=\"headerlink\" title=\"&#x2F;.gradle\"></a>&#x2F;.gradle</h3><p>该文件夹是 AS 自动生成的，表示该项目是一个由 gradle 管理和构建的项目，效果与上面的两项相同。</p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>这是用来存放需要忽略，不提交到 git 版本控制项目中的文件&#x2F;文件夹的名称。通过这个文件，就可以在 commit&#x2F;push 到 git 时自动忽略列表中的文件&#x2F;文件夹。</p>\n<h3 id=\"build-gradle\"><a href=\"#build-gradle\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h3><p>这个文件在项目中一共有两个，位于&#x2F;Demo 下的该文件配置了项目构建相关的配置信息，一般不需要修改。</p>\n<p>在本人的项目中，由于我使用了 Groovy 进行 Android 开发，所以我会对本文件进行修改。</p>\n<h3 id=\"settings-gradle\"><a href=\"#settings-gradle\" class=\"headerlink\" title=\"settings.gradle\"></a>settings.gradle</h3><p>这个文件在例程 Demo 中，由于我们只有一个&#x2F;app，所以只会包含一句：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>它的作用是，指定 Project 中所引入的 module。通常该文件由 IDE 自动完成注入，不需要开发者自行填写。</p>\n<h3 id=\"gradle-properties\"><a href=\"#gradle-properties\" class=\"headerlink\" title=\"gradle.properties\"></a>gradle.properties</h3><p>Gradle 全局配置，包括代理设置、编译所需 JVM 内存等。一般不建议修改，或使用 IDE 提供的工具进行影响较小的修改。</p>\n<h3 id=\"local-properties\"><a href=\"#local-properties\" class=\"headerlink\" title=\"local.properties\"></a>local.properties</h3><p>这个文件不是用来配置本地化默认国家语言编码的，而是用来指定本机 Android SKD 的路径。根据文件注释说明，该文件不能上传到版本控制项目中，以免出现协同开发错误。</p>\n<h3 id=\"gradlew-amp-gradlew-bat\"><a href=\"#gradlew-amp-gradlew-bat\" class=\"headerlink\" title=\"gradlew &amp; gradlew.bat\"></a>gradlew &amp; gradlew.bat</h3><p>这两个文件，前者运行于 Unix&#x2F;Linux 系统，后者运行于 Windows 系统，它们是用于命令行执行 Gradle 脚本的批处理脚本，一般不允许修改。</p>\n<h1 id=\"x2F-app\"><a href=\"#x2F-app\" class=\"headerlink\" title=\"&#x2F;app\"></a>&#x2F;app</h1><p>主要的开发目录，项目的几乎所有的资源都存放在如下目录中。该文件夹内构成如图</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/2.png\"></p>\n<h3 id=\"x2F-build\"><a href=\"#x2F-build\" class=\"headerlink\" title=\"&#x2F;build\"></a>&#x2F;build</h3><p>该文件夹也是作为构建输出文件夹，但相对于&#x2F;Demo&#x2F;build，该文件夹用于存放具体编译构建的资源，其内容更复杂。</p>\n<h3 id=\"x2F-libs\"><a href=\"#x2F-libs\" class=\"headerlink\" title=\"&#x2F;libs\"></a>&#x2F;libs</h3><p>如果项目使用了第三方依赖包，这些依赖包会被存放到该文件夹中，并由 IDE 自动注入。</p>\n<h3 id=\"gitignore-1\"><a href=\"#gitignore-1\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>同理，该文件夹管理根目录为&#x2F;app 的目录下，不提交到 git 的文件&#x2F;文件夹列表</p>\n<h3 id=\"app-iml\"><a href=\"#app-iml\" class=\"headerlink\" title=\"app.iml\"></a>app.iml</h3><p>该文件用于让 AS 识别项目，但不建议直接从此处打开，否则会缺失全局 gradle 配置信息，导致编译构建失败。</p>\n<h3 id=\"build-gradle-1\"><a href=\"#build-gradle-1\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h3><p>此处的 build.gradle 直接管理项目引入的依赖包、编译器版本等配置信息，比&#x2F;Demo&#x2F;build.gradle 更复杂，一般开发不需要修改。</p>\n<p>同理，我使用了 Groovy 开发，所以我需要在这个文件夹添加相关的依赖和 compile 信息。</p>\n<h3 id=\"proguard-rules-pro\"><a href=\"#proguard-rules-pro\" class=\"headerlink\" title=\"proguard-rules.pro\"></a>proguard-rules.pro</h3><p>进行大型 Java 项目开发的开发者应该都清楚该文件的作用。该文件是由开发者指定代码混淆保护的混淆规则，显式指定忽略哪些包、类，或者混淆哪些包、类。</p>\n<p>对代码混淆不熟悉的开发者一般不会修改这个文件。</p>\n<h2 id=\"x2F-app-x2F-src（或称-x2F-src）\"><a href=\"#x2F-app-x2F-src（或称-x2F-src）\" class=\"headerlink\" title=\"&#x2F;app&#x2F;src（或称&#x2F;src）\"></a>&#x2F;app&#x2F;src（或称&#x2F;src）</h2><p>该文件夹无疑是我们开发的重心，所有的源代码和资源文件都在这个文件夹下。</p>\n<p>该文件夹的构成如下图：</p>\n<p><img src=\"/static/images/2017-09-14-ASProjectFolders/3.png\"></p>\n<h3 id=\"x2F-androidTest\"><a href=\"#x2F-androidTest\" class=\"headerlink\" title=\"&#x2F;androidTest\"></a>&#x2F;androidTest</h3><p>此处用来编写 Android Test 测试用例，可以对项目进行测试。</p>\n<h3 id=\"x2F-test\"><a href=\"#x2F-test\" class=\"headerlink\" title=\"&#x2F;test\"></a>&#x2F;test</h3><p>相对的此处则是编写单元测试代码，可以对一些独立模块进行功能性测试。</p>\n<h3 id=\"x2F-main\"><a href=\"#x2F-main\" class=\"headerlink\" title=\"&#x2F;main\"></a>&#x2F;main</h3><p>该文件夹包含了我们接触最多的开发资源，具体如下</p>\n<h3 id=\"x2F-java\"><a href=\"#x2F-java\" class=\"headerlink\" title=\"&#x2F;java\"></a>&#x2F;java</h3><p>顾名思义，这个包下面包含了程序主要的逻辑代码（Java 代码），所有的 Java 包&#x2F;类，都在这个包下面存放。</p>\n<h3 id=\"x2F-res\"><a href=\"#x2F-res\" class=\"headerlink\" title=\"&#x2F;res\"></a>&#x2F;res</h3><p>全称“resources”，即资源文件。这个文件夹下存放了一个 APK 所需的如 ICON、颜色配置、layout 设计、界面元素等等文件。</p>\n<p>该文件夹内的结构比较规范，一般不用担心资源该放在哪里。</p>\n<h4 id=\"x2F-drawable\"><a href=\"#x2F-drawable\" class=\"headerlink\" title=\"&#x2F;drawable\"></a>&#x2F;drawable</h4><p>该文件夹用来存放图片</p>\n<h4 id=\"x2F-mipmap\"><a href=\"#x2F-mipmap\" class=\"headerlink\" title=\"&#x2F;mipmap\"></a>&#x2F;mipmap</h4><p>该文件夹用来存放 ICON</p>\n<h4 id=\"x2F-values\"><a href=\"#x2F-values\" class=\"headerlink\" title=\"&#x2F;values\"></a>&#x2F;values</h4><p>该文件夹用来存放样式、颜色配置</p>\n<h4 id=\"x2F-layout\"><a href=\"#x2F-layout\" class=\"headerlink\" title=\"&#x2F;layout\"></a>&#x2F;layout</h4><p>该文件夹存放 application 的布局配置文件</p>\n<h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><p>该文件管理了整个 application 的配置，包括定义的组件、application 所需的权限，都在这个文件里定义。</p>\n<h1 id=\"核心文件\"><a href=\"#核心文件\" class=\"headerlink\" title=\"核心文件\"></a>核心文件</h1><h3 id=\"AndroidManifest-xml-1\"><a href=\"#AndroidManifest-xml-1\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><p>一个 Android Application 的所有样式配置、activities、使用到的权限，都会被引入到这个文件中，在安装、运行时被调用。这个文件相当于 Android Application 的中枢。</p>\n<h3 id=\"layout-x2F-activity-main-xml\"><a href=\"#layout-x2F-activity-main-xml\" class=\"headerlink\" title=\"layout&#x2F;activity_main.xml\"></a>layout&#x2F;activity_main.xml</h3><p>这个文件是整个 Android Application 的基础界面设计配置文件，几乎所有的前台显示的界面的设计配置文件都会由这个文件引用。</p>\n<h3 id=\"cc-ayakurayuki-demo-MainActivity\"><a href=\"#cc-ayakurayuki-demo-MainActivity\" class=\"headerlink\" title=\"cc.ayakurayuki.demo.MainActivity\"></a>cc.ayakurayuki.demo.MainActivity</h3><blockquote>\n<p>（路径：cc&#x2F;ayakurayuki&#x2F;demo&#x2F;MainActivity.groovy）</p>\n</blockquote>\n<p>这个文件即逻辑代码，创建的 Basic Activity 会生成。它管理了 application 中按钮、菜单等元素交互的逻辑。</p>\n"},{"title":"Content Storage App","date":"2017-10-19T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n# content-storage-app\n\n> 泛用型个人内容存储，采用两步验证来验证用户\n\n## 环境 / Environment\n\n-   Spring Boot `ver 2.0.2.RELEASE`\n-   MyBatis `ver 3.4.6`\n-   SQLite JDBC `ver 3.23.1`\n-   Groovy `ver 2.5.0`\n-   JDK 1.8 `ver 1.8.0_181`\n\n## 特性 / Feature\n\n-   JSON 化存储内容\n-   使用 Google Authenticator 两步验证\n-   单机使用\n-   数据加密后持久化\n-   DB 文件级唯一的 DES Key\n\n## 使用：用户\n\n如果您是普通用户，建议您从[Release](https://github.com/AyakuraYuki/content-storage-app/releases)下载\n\nLinux/macOS 使用`startup.sh`，Windows 使用`startup.bat`启动\n\n浏览器访问地址：`http://localhost:8888/`\n\n## 使用：开发者\n\n如果您是开发者，并且有兴趣进行客制化开发和生成，您可以根据下面的说明来使用\n\n### clone\n\n```git\ngit clone https://github.com/AyakuraYuki/content-storage-app.git\n```\n\n### 导入\n\n> 推荐使用 IntelliJ IDEA\n\n选择导入 maven 项目即可\n\n### 修改配置文件\n\n将配置文件中的 MySQL 连接信息修改为您的 SQLite 连接信息，可修改属性如下：\n\n```yaml\nurl: jdbc:sqlite:< _your_db_file_path_ || data/storage.db >\n```\n\n### 执行程序\n\n```bash\n(java -jar content-storage-app-<version>.jar &)\n```\n\n## Special Thanks to\n\n<div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/variant-2_logos/jetbrains-variant-2.png\" alt=\"JetBrains\" width=\"300px\"/>\n</div>\n\n-   [JetBrains: Developer Tools for Professionals and Teams](https://www.jetbrains.com/?from=content-storage-app)\n\n### Built by\n\n<div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/intellij-idea_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/webstorm_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/datagrip_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n</div>\n","source":"_posts/2017-10-19-ContentStorageApp.md","raw":"---\ntitle: Content Storage App\ndate: 2017-10-19 10:00:00\ncategories:\n    - guide\ntags:\n    - Java\n    - Spring\nmp3:\ncover:\n---\n\n# content-storage-app\n\n> 泛用型个人内容存储，采用两步验证来验证用户\n\n## 环境 / Environment\n\n-   Spring Boot `ver 2.0.2.RELEASE`\n-   MyBatis `ver 3.4.6`\n-   SQLite JDBC `ver 3.23.1`\n-   Groovy `ver 2.5.0`\n-   JDK 1.8 `ver 1.8.0_181`\n\n## 特性 / Feature\n\n-   JSON 化存储内容\n-   使用 Google Authenticator 两步验证\n-   单机使用\n-   数据加密后持久化\n-   DB 文件级唯一的 DES Key\n\n## 使用：用户\n\n如果您是普通用户，建议您从[Release](https://github.com/AyakuraYuki/content-storage-app/releases)下载\n\nLinux/macOS 使用`startup.sh`，Windows 使用`startup.bat`启动\n\n浏览器访问地址：`http://localhost:8888/`\n\n## 使用：开发者\n\n如果您是开发者，并且有兴趣进行客制化开发和生成，您可以根据下面的说明来使用\n\n### clone\n\n```git\ngit clone https://github.com/AyakuraYuki/content-storage-app.git\n```\n\n### 导入\n\n> 推荐使用 IntelliJ IDEA\n\n选择导入 maven 项目即可\n\n### 修改配置文件\n\n将配置文件中的 MySQL 连接信息修改为您的 SQLite 连接信息，可修改属性如下：\n\n```yaml\nurl: jdbc:sqlite:< _your_db_file_path_ || data/storage.db >\n```\n\n### 执行程序\n\n```bash\n(java -jar content-storage-app-<version>.jar &)\n```\n\n## Special Thanks to\n\n<div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/variant-2_logos/jetbrains-variant-2.png\" alt=\"JetBrains\" width=\"300px\"/>\n</div>\n\n-   [JetBrains: Developer Tools for Professionals and Teams](https://www.jetbrains.com/?from=content-storage-app)\n\n### Built by\n\n<div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/intellij-idea_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/webstorm_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/datagrip_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n</div>\n","slug":"2017-10-19-ContentStorageApp","published":1,"updated":"2022-03-31T04:23:57.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9q0030vripcw7z2va8","content":"<h1 id=\"content-storage-app\"><a href=\"#content-storage-app\" class=\"headerlink\" title=\"content-storage-app\"></a>content-storage-app</h1><blockquote>\n<p>泛用型个人内容存储，采用两步验证来验证用户</p>\n</blockquote>\n<h2 id=\"环境-x2F-Environment\"><a href=\"#环境-x2F-Environment\" class=\"headerlink\" title=\"环境 &#x2F; Environment\"></a>环境 &#x2F; Environment</h2><ul>\n<li>Spring Boot <code>ver 2.0.2.RELEASE</code></li>\n<li>MyBatis <code>ver 3.4.6</code></li>\n<li>SQLite JDBC <code>ver 3.23.1</code></li>\n<li>Groovy <code>ver 2.5.0</code></li>\n<li>JDK 1.8 <code>ver 1.8.0_181</code></li>\n</ul>\n<h2 id=\"特性-x2F-Feature\"><a href=\"#特性-x2F-Feature\" class=\"headerlink\" title=\"特性 &#x2F; Feature\"></a>特性 &#x2F; Feature</h2><ul>\n<li>JSON 化存储内容</li>\n<li>使用 Google Authenticator 两步验证</li>\n<li>单机使用</li>\n<li>数据加密后持久化</li>\n<li>DB 文件级唯一的 DES Key</li>\n</ul>\n<h2 id=\"使用：用户\"><a href=\"#使用：用户\" class=\"headerlink\" title=\"使用：用户\"></a>使用：用户</h2><p>如果您是普通用户，建议您从<a href=\"https://github.com/AyakuraYuki/content-storage-app/releases\">Release</a>下载</p>\n<p>Linux&#x2F;macOS 使用<code>startup.sh</code>，Windows 使用<code>startup.bat</code>启动</p>\n<p>浏览器访问地址：<code>http://localhost:8888/</code></p>\n<h2 id=\"使用：开发者\"><a href=\"#使用：开发者\" class=\"headerlink\" title=\"使用：开发者\"></a>使用：开发者</h2><p>如果您是开发者，并且有兴趣进行客制化开发和生成，您可以根据下面的说明来使用</p>\n<h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/AyakuraYuki/content-storage-app.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><blockquote>\n<p>推荐使用 IntelliJ IDEA</p>\n</blockquote>\n<p>选择导入 maven 项目即可</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>将配置文件中的 MySQL 连接信息修改为您的 SQLite 连接信息，可修改属性如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">jdbc:sqlite:&lt;</span> <span class=\"string\">_your_db_file_path_</span> <span class=\"string\">||</span> <span class=\"string\">data/storage.db</span> <span class=\"string\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行程序\"><a href=\"#执行程序\" class=\"headerlink\" title=\"执行程序\"></a>执行程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(java -jar content-storage-app-&lt;version&gt;.jar &amp;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Special-Thanks-to\"><a href=\"#Special-Thanks-to\" class=\"headerlink\" title=\"Special Thanks to\"></a>Special Thanks to</h2><div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/variant-2_logos/jetbrains-variant-2.png\" alt=\"JetBrains\" width=\"300px\"/>\n</div>\n\n<ul>\n<li><a href=\"https://www.jetbrains.com/?from=content-storage-app\">JetBrains: Developer Tools for Professionals and Teams</a></li>\n</ul>\n<h3 id=\"Built-by\"><a href=\"#Built-by\" class=\"headerlink\" title=\"Built by\"></a>Built by</h3><div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/intellij-idea_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/webstorm_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/datagrip_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"content-storage-app\"><a href=\"#content-storage-app\" class=\"headerlink\" title=\"content-storage-app\"></a>content-storage-app</h1><blockquote>\n<p>泛用型个人内容存储，采用两步验证来验证用户</p>\n</blockquote>\n<h2 id=\"环境-x2F-Environment\"><a href=\"#环境-x2F-Environment\" class=\"headerlink\" title=\"环境 &#x2F; Environment\"></a>环境 &#x2F; Environment</h2><ul>\n<li>Spring Boot <code>ver 2.0.2.RELEASE</code></li>\n<li>MyBatis <code>ver 3.4.6</code></li>\n<li>SQLite JDBC <code>ver 3.23.1</code></li>\n<li>Groovy <code>ver 2.5.0</code></li>\n<li>JDK 1.8 <code>ver 1.8.0_181</code></li>\n</ul>\n<h2 id=\"特性-x2F-Feature\"><a href=\"#特性-x2F-Feature\" class=\"headerlink\" title=\"特性 &#x2F; Feature\"></a>特性 &#x2F; Feature</h2><ul>\n<li>JSON 化存储内容</li>\n<li>使用 Google Authenticator 两步验证</li>\n<li>单机使用</li>\n<li>数据加密后持久化</li>\n<li>DB 文件级唯一的 DES Key</li>\n</ul>\n<h2 id=\"使用：用户\"><a href=\"#使用：用户\" class=\"headerlink\" title=\"使用：用户\"></a>使用：用户</h2><p>如果您是普通用户，建议您从<a href=\"https://github.com/AyakuraYuki/content-storage-app/releases\">Release</a>下载</p>\n<p>Linux&#x2F;macOS 使用<code>startup.sh</code>，Windows 使用<code>startup.bat</code>启动</p>\n<p>浏览器访问地址：<code>http://localhost:8888/</code></p>\n<h2 id=\"使用：开发者\"><a href=\"#使用：开发者\" class=\"headerlink\" title=\"使用：开发者\"></a>使用：开发者</h2><p>如果您是开发者，并且有兴趣进行客制化开发和生成，您可以根据下面的说明来使用</p>\n<h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/AyakuraYuki/content-storage-app.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><blockquote>\n<p>推荐使用 IntelliJ IDEA</p>\n</blockquote>\n<p>选择导入 maven 项目即可</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>将配置文件中的 MySQL 连接信息修改为您的 SQLite 连接信息，可修改属性如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">jdbc:sqlite:&lt;</span> <span class=\"string\">_your_db_file_path_</span> <span class=\"string\">||</span> <span class=\"string\">data/storage.db</span> <span class=\"string\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行程序\"><a href=\"#执行程序\" class=\"headerlink\" title=\"执行程序\"></a>执行程序</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(java -jar content-storage-app-&lt;version&gt;.jar &amp;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Special-Thanks-to\"><a href=\"#Special-Thanks-to\" class=\"headerlink\" title=\"Special Thanks to\"></a>Special Thanks to</h2><div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/variant-2_logos/jetbrains-variant-2.png\" alt=\"JetBrains\" width=\"300px\"/>\n</div>\n\n<ul>\n<li><a href=\"https://www.jetbrains.com/?from=content-storage-app\">JetBrains: Developer Tools for Professionals and Teams</a></li>\n</ul>\n<h3 id=\"Built-by\"><a href=\"#Built-by\" class=\"headerlink\" title=\"Built by\"></a>Built by</h3><div>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/intellij-idea_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/webstorm_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n  <img src=\"https://blog.ayakurayuki.cc/assets/img/jetbrains/datagrip_logos/logo.png\" alt=\"JetBrains\" width=\"120px\"/>\n</div>\n"},{"title":"【重要】コンテンツ更新終了のお知らせ","date":"2017-10-30T02:00:00.000Z","mp3":null,"cover":null,"_content":"\n# グリマスコンテンツ更新終了のお知らせ\n\n「アイドルマスター ミリオンライブ！」をご利用いただき、誠にありがとうございます。<br>\n<br>\nサービス開始以来、4 年以上にわたり多くの皆様にご愛顧頂きました「アイドルマスター ミリオンライブ！」は、<br>\nこの度、2017 年 11 月中旬開催予定のイベント「Thank You! ミリオンシアターライブ Final Party!」をもちまして、最終公演とさせていただくこととなりました。<br>\n<br>\nこれに伴い、近い将来のサービス終了に向けて「<span style=\"color:#bbbbff\">各種コンテンツの終了・更新停止および仕様の一部変更</span>」を 2017 年 12 月より順次行います。<br>\n<br>\nプロデューサーの皆様には、深くお詫びを申し上げますと共に、これまでの長きにわたるご支援、ご愛顧に心より感謝し、厚く御礼申し上げます。<br>\n<br>\n本サービスの終了後も、アイドルたちは、仲間たちと手を取りあって元気にトップアイドルを目指す日々を送っていきますので、引き続き応援していただけますと幸いです。<br>\n<br>\nサービスの終了時期については、具体的な日程が決まりましたら、あらためて本告知にてお伝えいたします。<br>\n<br>\nまた、明日 31 日 12:00 より、フィナーレに向けたキャンペーン「<span style=\"color:#ffff33\">TH@NK YOU FOREVER!!</span>」を開催いたします。<br>\nキャンペーンの内容につきましては専用ページにてご確認ください。<br>\n<br>\n10 月 30 日現在、すでに決定している内容につきましては下記をご確認ください。<br>\n<br>\n\n<hr>\n<span style=\"color:#ff3333\">▼▼▼終了となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■プラチナガシャ（有償ガシャ）</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n11月下旬開始のプラチナガシャ「Happy Days!ミリオンシアターライブ Day15」を上記時刻まで販売いたします。<br>\nまた、同日12:00よりミリオンジュエル及び各種チケットにてご利用いただける無償ガシャを開始いたします。<br>\n※プラチナガシャに付属していたバザーチケットは、以降も劇場のポイント交換にて引き続き獲得可能です<br>\n※補填等で配布している「サービスチケット」の使用期限は11/13 13:59（11月月初ガシャの終了日時）までとなりますのでご注意ください<br>\n<br>\n<span style=\"color:#ffcc33\">■イベント</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n11月中旬開始のイベント「Thank You! ミリオンシアターライブ Final Party!」が最後のランキング対象イベントとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■ショップでの限定セット販売</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\nイベント期間限定セット、キャンペーン記念セット、HappyBirthday iDOLセットの販売は上記時刻までとなります。<br>\n以降ショップにて販売される有償アイテムは「スパークドリンク」「バトルキャンディ」の2種類のみとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■カムバックメール送信キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n「カムバックリクエストメール」の送信、「カムバック成功報酬」の獲得期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■招待キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n「招待メール」の送信、「招待くじ券」「招待pt」「HR確定ガシャチケット(招待pt)」の獲得および使用期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■社長ミッション</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\nミッション達成および達成報酬獲得期限は上記時刻までとなります。<br>\n<br>\n<hr>\n<span style=\"color:#ff5533\">▼▼▼更新停止となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■オーディオルーム</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\nCD試聴音源、ライブセットリスト音源の追加・更新は上記時刻までとなります。<br>\n※すでに公開済みの音源は引き続きご試聴いただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■電撃マオウ連載コミック試し読み</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\n11月発売号の試し読みを最後に、以降の更新を停止いたします。<br>\n※すでに公開済みの試し読みは引き続きお楽しみいただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■誕生日のお祝い</span><br>\n<span style=\"color:#ffff77\">2017/12/29 23:59にて更新停止</span><br>\n12/29に予定されている高山紗代子の誕生日を最後に、以降の更新を停止いたします。<br>\n※GREEカレンダーによる誕生日通知（登録者のみ）も停止いたします<br>\n<br>\n<span style=\"color:#ffcc33\">■ボイス</span><br>\n下記の項目につきましては、10/30現時点での収録済みボイスの最終追加を11月中旬頃に予定しております。<br>\n（※上記最終追加以降は、未収録分の追加予定はございません）<br>\n◎スキル発動ボイス（数量未定）<br>\n◎SRカードボイス（数量未定）<br>\n<br>\n下記の項目につきましては、現在未実装分すべてをサービス終了までに順次追加予定です。<br>\n（※ただし、「田中琴葉」分を除きます）<br>\n◎ネクストプロローグ編アイドルストーリー（Lv.2～Lv.6）<br>\n◎親愛度達成ボイス（Lv.8～Lv.10）<br>\n<br>\n<span style=\"color:#ffcc33\">■その他</span><br>\n下記の項目につきましては、今後の追加・更新予定はありません。<br>\n◎営業エリア（「横浜2」まで）<br>\n◎アイドルLv上限（Lv.150まで）<br>\n◎SPスキル（「Vo/Da/Vi属性の特大ｱﾋﾟｰﾙで敵HPﾀﾞｳﾝ」まで）<br>\n◎親愛Lv上限（Lv.10まで）<br>\n<br>\n下記の項目につきましては、今後も更新を予定しております。<br>\n◎劇場Lv上限（最終更新11月上旬頃予定）<br>\n<br>\n<hr>\n<span style=\"color:#ff8833\">▼▼▼一部変更となる仕様▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■ライブバトルシアターくじ報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 12:00以降</span><br>\nHR確定ガシャチケット(招待pt)　→　スターメダルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■お仕事完了報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 0:00以降</span><br>\nイベント専用ドリンクおよびキャンディ　→　ミリオンジュエルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■ログインボーナス変更</span><br>\n<span style=\"color:#ffff77\">2017/10/31 12:00以降</span><br>\nミリオンジュエル10～100個　→　毎日ミリオンジュエル300個＋ファンからの手紙30個＋ファンからのプレゼント30個に変更<br>\n※10/31 9:59までのマイページアクセスで変更前の報酬が獲得できるのに加え、さらに同日メンテナンス終了後の12:00以降のアクセスで変更後の報酬も重ねて獲得可能となります<br>\n※ただし「新人プロデューサー応援連続ログインボーナス」および「お帰りなさいプロデューサーさん連続ログインボーナス」が継続中のお客様につきましては、<br>\n連続ログイン期間（最大5日間）終了の翌日より、変更後のログインボーナスが開始いたします<br>\n<br>\n<hr>\n<br>\n<span style=\"color:#ff3333\">なお、すでにご購入頂いた有償アイテム（スパークドリンク、バトルキャンディ等）につきましては<br>\n「GREEコイン」および「ミリオンコイン（iOS/Androidアプリ版専用通貨）」への返還を承ることはできません。</span><br>\nご理解ご了承くださいますようお願い申し上げます。<br>  \n<br>\nご不明点につきましては、ゲーム内ページ最下部の「お問い合わせ」よりお問い合わせください。<br>\n<br>\n今後とも「アイドルマスター ミリオンライブ！」をよろしくお願いいたします。<br><br>\n","source":"_posts/2017-10-30-ContentUpdateOverNotification.md","raw":"---\ntitle: 【重要】コンテンツ更新終了のお知らせ\ndate: 2017-10-30 10:00:00\ncategories:\n    - notification\ntags:\n    - IM@S\n    - MillionLive\nmp3:\ncover:\n---\n\n# グリマスコンテンツ更新終了のお知らせ\n\n「アイドルマスター ミリオンライブ！」をご利用いただき、誠にありがとうございます。<br>\n<br>\nサービス開始以来、4 年以上にわたり多くの皆様にご愛顧頂きました「アイドルマスター ミリオンライブ！」は、<br>\nこの度、2017 年 11 月中旬開催予定のイベント「Thank You! ミリオンシアターライブ Final Party!」をもちまして、最終公演とさせていただくこととなりました。<br>\n<br>\nこれに伴い、近い将来のサービス終了に向けて「<span style=\"color:#bbbbff\">各種コンテンツの終了・更新停止および仕様の一部変更</span>」を 2017 年 12 月より順次行います。<br>\n<br>\nプロデューサーの皆様には、深くお詫びを申し上げますと共に、これまでの長きにわたるご支援、ご愛顧に心より感謝し、厚く御礼申し上げます。<br>\n<br>\n本サービスの終了後も、アイドルたちは、仲間たちと手を取りあって元気にトップアイドルを目指す日々を送っていきますので、引き続き応援していただけますと幸いです。<br>\n<br>\nサービスの終了時期については、具体的な日程が決まりましたら、あらためて本告知にてお伝えいたします。<br>\n<br>\nまた、明日 31 日 12:00 より、フィナーレに向けたキャンペーン「<span style=\"color:#ffff33\">TH@NK YOU FOREVER!!</span>」を開催いたします。<br>\nキャンペーンの内容につきましては専用ページにてご確認ください。<br>\n<br>\n10 月 30 日現在、すでに決定している内容につきましては下記をご確認ください。<br>\n<br>\n\n<hr>\n<span style=\"color:#ff3333\">▼▼▼終了となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■プラチナガシャ（有償ガシャ）</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n11月下旬開始のプラチナガシャ「Happy Days!ミリオンシアターライブ Day15」を上記時刻まで販売いたします。<br>\nまた、同日12:00よりミリオンジュエル及び各種チケットにてご利用いただける無償ガシャを開始いたします。<br>\n※プラチナガシャに付属していたバザーチケットは、以降も劇場のポイント交換にて引き続き獲得可能です<br>\n※補填等で配布している「サービスチケット」の使用期限は11/13 13:59（11月月初ガシャの終了日時）までとなりますのでご注意ください<br>\n<br>\n<span style=\"color:#ffcc33\">■イベント</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n11月中旬開始のイベント「Thank You! ミリオンシアターライブ Final Party!」が最後のランキング対象イベントとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■ショップでの限定セット販売</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\nイベント期間限定セット、キャンペーン記念セット、HappyBirthday iDOLセットの販売は上記時刻までとなります。<br>\n以降ショップにて販売される有償アイテムは「スパークドリンク」「バトルキャンディ」の2種類のみとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■カムバックメール送信キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n「カムバックリクエストメール」の送信、「カムバック成功報酬」の獲得期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■招待キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n「招待メール」の送信、「招待くじ券」「招待pt」「HR確定ガシャチケット(招待pt)」の獲得および使用期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■社長ミッション</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\nミッション達成および達成報酬獲得期限は上記時刻までとなります。<br>\n<br>\n<hr>\n<span style=\"color:#ff5533\">▼▼▼更新停止となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■オーディオルーム</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\nCD試聴音源、ライブセットリスト音源の追加・更新は上記時刻までとなります。<br>\n※すでに公開済みの音源は引き続きご試聴いただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■電撃マオウ連載コミック試し読み</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\n11月発売号の試し読みを最後に、以降の更新を停止いたします。<br>\n※すでに公開済みの試し読みは引き続きお楽しみいただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■誕生日のお祝い</span><br>\n<span style=\"color:#ffff77\">2017/12/29 23:59にて更新停止</span><br>\n12/29に予定されている高山紗代子の誕生日を最後に、以降の更新を停止いたします。<br>\n※GREEカレンダーによる誕生日通知（登録者のみ）も停止いたします<br>\n<br>\n<span style=\"color:#ffcc33\">■ボイス</span><br>\n下記の項目につきましては、10/30現時点での収録済みボイスの最終追加を11月中旬頃に予定しております。<br>\n（※上記最終追加以降は、未収録分の追加予定はございません）<br>\n◎スキル発動ボイス（数量未定）<br>\n◎SRカードボイス（数量未定）<br>\n<br>\n下記の項目につきましては、現在未実装分すべてをサービス終了までに順次追加予定です。<br>\n（※ただし、「田中琴葉」分を除きます）<br>\n◎ネクストプロローグ編アイドルストーリー（Lv.2～Lv.6）<br>\n◎親愛度達成ボイス（Lv.8～Lv.10）<br>\n<br>\n<span style=\"color:#ffcc33\">■その他</span><br>\n下記の項目につきましては、今後の追加・更新予定はありません。<br>\n◎営業エリア（「横浜2」まで）<br>\n◎アイドルLv上限（Lv.150まで）<br>\n◎SPスキル（「Vo/Da/Vi属性の特大ｱﾋﾟｰﾙで敵HPﾀﾞｳﾝ」まで）<br>\n◎親愛Lv上限（Lv.10まで）<br>\n<br>\n下記の項目につきましては、今後も更新を予定しております。<br>\n◎劇場Lv上限（最終更新11月上旬頃予定）<br>\n<br>\n<hr>\n<span style=\"color:#ff8833\">▼▼▼一部変更となる仕様▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■ライブバトルシアターくじ報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 12:00以降</span><br>\nHR確定ガシャチケット(招待pt)　→　スターメダルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■お仕事完了報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 0:00以降</span><br>\nイベント専用ドリンクおよびキャンディ　→　ミリオンジュエルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■ログインボーナス変更</span><br>\n<span style=\"color:#ffff77\">2017/10/31 12:00以降</span><br>\nミリオンジュエル10～100個　→　毎日ミリオンジュエル300個＋ファンからの手紙30個＋ファンからのプレゼント30個に変更<br>\n※10/31 9:59までのマイページアクセスで変更前の報酬が獲得できるのに加え、さらに同日メンテナンス終了後の12:00以降のアクセスで変更後の報酬も重ねて獲得可能となります<br>\n※ただし「新人プロデューサー応援連続ログインボーナス」および「お帰りなさいプロデューサーさん連続ログインボーナス」が継続中のお客様につきましては、<br>\n連続ログイン期間（最大5日間）終了の翌日より、変更後のログインボーナスが開始いたします<br>\n<br>\n<hr>\n<br>\n<span style=\"color:#ff3333\">なお、すでにご購入頂いた有償アイテム（スパークドリンク、バトルキャンディ等）につきましては<br>\n「GREEコイン」および「ミリオンコイン（iOS/Androidアプリ版専用通貨）」への返還を承ることはできません。</span><br>\nご理解ご了承くださいますようお願い申し上げます。<br>  \n<br>\nご不明点につきましては、ゲーム内ページ最下部の「お問い合わせ」よりお問い合わせください。<br>\n<br>\n今後とも「アイドルマスター ミリオンライブ！」をよろしくお願いいたします。<br><br>\n","slug":"2017-10-30-ContentUpdateOverNotification","published":1,"updated":"2022-03-31T04:25:30.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1ei8z9q0031vripey1ddcif","content":"<h1 id=\"グリマスコンテンツ更新終了のお知らせ\"><a href=\"#グリマスコンテンツ更新終了のお知らせ\" class=\"headerlink\" title=\"グリマスコンテンツ更新終了のお知らせ\"></a>グリマスコンテンツ更新終了のお知らせ</h1><p>「アイドルマスター ミリオンライブ！」をご利用いただき、誠にありがとうございます。<br><br><br><br>サービス開始以来、4 年以上にわたり多くの皆様にご愛顧頂きました「アイドルマスター ミリオンライブ！」は、<br><br>この度、2017 年 11 月中旬開催予定のイベント「Thank You! ミリオンシアターライブ Final Party!」をもちまして、最終公演とさせていただくこととなりました。<br><br><br><br>これに伴い、近い将来のサービス終了に向けて「<span style=\"color:#bbbbff\">各種コンテンツの終了・更新停止および仕様の一部変更</span>」を 2017 年 12 月より順次行います。<br><br><br><br>プロデューサーの皆様には、深くお詫びを申し上げますと共に、これまでの長きにわたるご支援、ご愛顧に心より感謝し、厚く御礼申し上げます。<br><br><br><br>本サービスの終了後も、アイドルたちは、仲間たちと手を取りあって元気にトップアイドルを目指す日々を送っていきますので、引き続き応援していただけますと幸いです。<br><br><br><br>サービスの終了時期については、具体的な日程が決まりましたら、あらためて本告知にてお伝えいたします。<br><br><br><br>また、明日 31 日 12:00 より、フィナーレに向けたキャンペーン「<span style=\"color:#ffff33\">TH@NK YOU FOREVER!!</span>」を開催いたします。<br><br>キャンペーンの内容につきましては専用ページにてご確認ください。<br><br><br><br>10 月 30 日現在、すでに決定している内容につきましては下記をご確認ください。<br><br><br></p>\n<hr>\n<span style=\"color:#ff3333\">▼▼▼終了となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■プラチナガシャ（有償ガシャ）</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n11月下旬開始のプラチナガシャ「Happy Days!ミリオンシアターライブ Day15」を上記時刻まで販売いたします。<br>\nまた、同日12:00よりミリオンジュエル及び各種チケットにてご利用いただける無償ガシャを開始いたします。<br>\n※プラチナガシャに付属していたバザーチケットは、以降も劇場のポイント交換にて引き続き獲得可能です<br>\n※補填等で配布している「サービスチケット」の使用期限は11/13 13:59（11月月初ガシャの終了日時）までとなりますのでご注意ください<br>\n<br>\n<span style=\"color:#ffcc33\">■イベント</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n11月中旬開始のイベント「Thank You! ミリオンシアターライブ Final Party!」が最後のランキング対象イベントとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■ショップでの限定セット販売</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\nイベント期間限定セット、キャンペーン記念セット、HappyBirthday iDOLセットの販売は上記時刻までとなります。<br>\n以降ショップにて販売される有償アイテムは「スパークドリンク」「バトルキャンディ」の2種類のみとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■カムバックメール送信キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n「カムバックリクエストメール」の送信、「カムバック成功報酬」の獲得期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■招待キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n「招待メール」の送信、「招待くじ券」「招待pt」「HR確定ガシャチケット(招待pt)」の獲得および使用期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■社長ミッション</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\nミッション達成および達成報酬獲得期限は上記時刻までとなります。<br>\n<br>\n<hr>\n<span style=\"color:#ff5533\">▼▼▼更新停止となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■オーディオルーム</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\nCD試聴音源、ライブセットリスト音源の追加・更新は上記時刻までとなります。<br>\n※すでに公開済みの音源は引き続きご試聴いただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■電撃マオウ連載コミック試し読み</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\n11月発売号の試し読みを最後に、以降の更新を停止いたします。<br>\n※すでに公開済みの試し読みは引き続きお楽しみいただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■誕生日のお祝い</span><br>\n<span style=\"color:#ffff77\">2017/12/29 23:59にて更新停止</span><br>\n12/29に予定されている高山紗代子の誕生日を最後に、以降の更新を停止いたします。<br>\n※GREEカレンダーによる誕生日通知（登録者のみ）も停止いたします<br>\n<br>\n<span style=\"color:#ffcc33\">■ボイス</span><br>\n下記の項目につきましては、10/30現時点での収録済みボイスの最終追加を11月中旬頃に予定しております。<br>\n（※上記最終追加以降は、未収録分の追加予定はございません）<br>\n◎スキル発動ボイス（数量未定）<br>\n◎SRカードボイス（数量未定）<br>\n<br>\n下記の項目につきましては、現在未実装分すべてをサービス終了までに順次追加予定です。<br>\n（※ただし、「田中琴葉」分を除きます）<br>\n◎ネクストプロローグ編アイドルストーリー（Lv.2～Lv.6）<br>\n◎親愛度達成ボイス（Lv.8～Lv.10）<br>\n<br>\n<span style=\"color:#ffcc33\">■その他</span><br>\n下記の項目につきましては、今後の追加・更新予定はありません。<br>\n◎営業エリア（「横浜2」まで）<br>\n◎アイドルLv上限（Lv.150まで）<br>\n◎SPスキル（「Vo/Da/Vi属性の特大ｱﾋﾟｰﾙで敵HPﾀﾞｳﾝ」まで）<br>\n◎親愛Lv上限（Lv.10まで）<br>\n<br>\n下記の項目につきましては、今後も更新を予定しております。<br>\n◎劇場Lv上限（最終更新11月上旬頃予定）<br>\n<br>\n<hr>\n<span style=\"color:#ff8833\">▼▼▼一部変更となる仕様▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■ライブバトルシアターくじ報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 12:00以降</span><br>\nHR確定ガシャチケット(招待pt)　→　スターメダルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■お仕事完了報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 0:00以降</span><br>\nイベント専用ドリンクおよびキャンディ　→　ミリオンジュエルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■ログインボーナス変更</span><br>\n<span style=\"color:#ffff77\">2017/10/31 12:00以降</span><br>\nミリオンジュエル10～100個　→　毎日ミリオンジュエル300個＋ファンからの手紙30個＋ファンからのプレゼント30個に変更<br>\n※10/31 9:59までのマイページアクセスで変更前の報酬が獲得できるのに加え、さらに同日メンテナンス終了後の12:00以降のアクセスで変更後の報酬も重ねて獲得可能となります<br>\n※ただし「新人プロデューサー応援連続ログインボーナス」および「お帰りなさいプロデューサーさん連続ログインボーナス」が継続中のお客様につきましては、<br>\n連続ログイン期間（最大5日間）終了の翌日より、変更後のログインボーナスが開始いたします<br>\n<br>\n<hr>\n<br>\n<span style=\"color:#ff3333\">なお、すでにご購入頂いた有償アイテム（スパークドリンク、バトルキャンディ等）につきましては<br>\n「GREEコイン」および「ミリオンコイン（iOS/Androidアプリ版専用通貨）」への返還を承ることはできません。</span><br>\nご理解ご了承くださいますようお願い申し上げます。<br>  \n<br>\nご不明点につきましては、ゲーム内ページ最下部の「お問い合わせ」よりお問い合わせください。<br>\n<br>\n今後とも「アイドルマスター ミリオンライブ！」をよろしくお願いいたします。<br><br>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"グリマスコンテンツ更新終了のお知らせ\"><a href=\"#グリマスコンテンツ更新終了のお知らせ\" class=\"headerlink\" title=\"グリマスコンテンツ更新終了のお知らせ\"></a>グリマスコンテンツ更新終了のお知らせ</h1><p>「アイドルマスター ミリオンライブ！」をご利用いただき、誠にありがとうございます。<br><br><br><br>サービス開始以来、4 年以上にわたり多くの皆様にご愛顧頂きました「アイドルマスター ミリオンライブ！」は、<br><br>この度、2017 年 11 月中旬開催予定のイベント「Thank You! ミリオンシアターライブ Final Party!」をもちまして、最終公演とさせていただくこととなりました。<br><br><br><br>これに伴い、近い将来のサービス終了に向けて「<span style=\"color:#bbbbff\">各種コンテンツの終了・更新停止および仕様の一部変更</span>」を 2017 年 12 月より順次行います。<br><br><br><br>プロデューサーの皆様には、深くお詫びを申し上げますと共に、これまでの長きにわたるご支援、ご愛顧に心より感謝し、厚く御礼申し上げます。<br><br><br><br>本サービスの終了後も、アイドルたちは、仲間たちと手を取りあって元気にトップアイドルを目指す日々を送っていきますので、引き続き応援していただけますと幸いです。<br><br><br><br>サービスの終了時期については、具体的な日程が決まりましたら、あらためて本告知にてお伝えいたします。<br><br><br><br>また、明日 31 日 12:00 より、フィナーレに向けたキャンペーン「<span style=\"color:#ffff33\">TH@NK YOU FOREVER!!</span>」を開催いたします。<br><br>キャンペーンの内容につきましては専用ページにてご確認ください。<br><br><br><br>10 月 30 日現在、すでに決定している内容につきましては下記をご確認ください。<br><br><br></p>\n<hr>\n<span style=\"color:#ff3333\">▼▼▼終了となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■プラチナガシャ（有償ガシャ）</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n11月下旬開始のプラチナガシャ「Happy Days!ミリオンシアターライブ Day15」を上記時刻まで販売いたします。<br>\nまた、同日12:00よりミリオンジュエル及び各種チケットにてご利用いただける無償ガシャを開始いたします。<br>\n※プラチナガシャに付属していたバザーチケットは、以降も劇場のポイント交換にて引き続き獲得可能です<br>\n※補填等で配布している「サービスチケット」の使用期限は11/13 13:59（11月月初ガシャの終了日時）までとなりますのでご注意ください<br>\n<br>\n<span style=\"color:#ffcc33\">■イベント</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n11月中旬開始のイベント「Thank You! ミリオンシアターライブ Final Party!」が最後のランキング対象イベントとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■ショップでの限定セット販売</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\nイベント期間限定セット、キャンペーン記念セット、HappyBirthday iDOLセットの販売は上記時刻までとなります。<br>\n以降ショップにて販売される有償アイテムは「スパークドリンク」「バトルキャンディ」の2種類のみとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■カムバックメール送信キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて終了</span><br>\n「カムバックリクエストメール」の送信、「カムバック成功報酬」の獲得期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■招待キャンペーン</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\n「招待メール」の送信、「招待くじ券」「招待pt」「HR確定ガシャチケット(招待pt)」の獲得および使用期限は上記時刻までとなります。<br>\n<br>\n<span style=\"color:#ffcc33\">■社長ミッション</span><br>\n<span style=\"color:#ffff77\">2017/12/1 9:59にて終了</span><br>\nミッション達成および達成報酬獲得期限は上記時刻までとなります。<br>\n<br>\n<hr>\n<span style=\"color:#ff5533\">▼▼▼更新停止となるコンテンツ▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■オーディオルーム</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\nCD試聴音源、ライブセットリスト音源の追加・更新は上記時刻までとなります。<br>\n※すでに公開済みの音源は引き続きご試聴いただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■電撃マオウ連載コミック試し読み</span><br>\n<span style=\"color:#ffff77\">2017/11/30 23:59にて更新停止</span><br>\n11月発売号の試し読みを最後に、以降の更新を停止いたします。<br>\n※すでに公開済みの試し読みは引き続きお楽しみいただけます<br>\n<br>\n<span style=\"color:#ffcc33\">■誕生日のお祝い</span><br>\n<span style=\"color:#ffff77\">2017/12/29 23:59にて更新停止</span><br>\n12/29に予定されている高山紗代子の誕生日を最後に、以降の更新を停止いたします。<br>\n※GREEカレンダーによる誕生日通知（登録者のみ）も停止いたします<br>\n<br>\n<span style=\"color:#ffcc33\">■ボイス</span><br>\n下記の項目につきましては、10/30現時点での収録済みボイスの最終追加を11月中旬頃に予定しております。<br>\n（※上記最終追加以降は、未収録分の追加予定はございません）<br>\n◎スキル発動ボイス（数量未定）<br>\n◎SRカードボイス（数量未定）<br>\n<br>\n下記の項目につきましては、現在未実装分すべてをサービス終了までに順次追加予定です。<br>\n（※ただし、「田中琴葉」分を除きます）<br>\n◎ネクストプロローグ編アイドルストーリー（Lv.2～Lv.6）<br>\n◎親愛度達成ボイス（Lv.8～Lv.10）<br>\n<br>\n<span style=\"color:#ffcc33\">■その他</span><br>\n下記の項目につきましては、今後の追加・更新予定はありません。<br>\n◎営業エリア（「横浜2」まで）<br>\n◎アイドルLv上限（Lv.150まで）<br>\n◎SPスキル（「Vo/Da/Vi属性の特大ｱﾋﾟｰﾙで敵HPﾀﾞｳﾝ」まで）<br>\n◎親愛Lv上限（Lv.10まで）<br>\n<br>\n下記の項目につきましては、今後も更新を予定しております。<br>\n◎劇場Lv上限（最終更新11月上旬頃予定）<br>\n<br>\n<hr>\n<span style=\"color:#ff8833\">▼▼▼一部変更となる仕様▼▼▼</span><br>\n<span style=\"color:#ffcc33\">■ライブバトルシアターくじ報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 12:00以降</span><br>\nHR確定ガシャチケット(招待pt)　→　スターメダルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■お仕事完了報酬の一部変更</span><br>\n<span style=\"color:#ffff77\">2017/12/1 0:00以降</span><br>\nイベント専用ドリンクおよびキャンディ　→　ミリオンジュエルに変更<br>\n<br>\n<span style=\"color:#ffcc33\">■ログインボーナス変更</span><br>\n<span style=\"color:#ffff77\">2017/10/31 12:00以降</span><br>\nミリオンジュエル10～100個　→　毎日ミリオンジュエル300個＋ファンからの手紙30個＋ファンからのプレゼント30個に変更<br>\n※10/31 9:59までのマイページアクセスで変更前の報酬が獲得できるのに加え、さらに同日メンテナンス終了後の12:00以降のアクセスで変更後の報酬も重ねて獲得可能となります<br>\n※ただし「新人プロデューサー応援連続ログインボーナス」および「お帰りなさいプロデューサーさん連続ログインボーナス」が継続中のお客様につきましては、<br>\n連続ログイン期間（最大5日間）終了の翌日より、変更後のログインボーナスが開始いたします<br>\n<br>\n<hr>\n<br>\n<span style=\"color:#ff3333\">なお、すでにご購入頂いた有償アイテム（スパークドリンク、バトルキャンディ等）につきましては<br>\n「GREEコイン」および「ミリオンコイン（iOS/Androidアプリ版専用通貨）」への返還を承ることはできません。</span><br>\nご理解ご了承くださいますようお願い申し上げます。<br>  \n<br>\nご不明点につきましては、ゲーム内ページ最下部の「お問い合わせ」よりお問い合わせください。<br>\n<br>\n今後とも「アイドルマスター ミリオンライブ！」をよろしくお願いいたします。<br><br>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl1ei8z9a0000vrip5xpr45yg","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9f0005vripf1p55uq9"},{"post_id":"cl1ei8z9c0001vrip9w8n2c5t","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9f0007vrip1bx61q40"},{"post_id":"cl1ei8z9e0003vripfdt6g5hh","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9f000avripdk1x2ax8"},{"post_id":"cl1ei8z9e0004vrip51ki5xw3","category_id":"cl1eh9d220000sdipe1cw363r","_id":"cl1ei8z9g000cvripcs6n2wu4"},{"post_id":"cl1ei8z9f0006vripck3i5vfi","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9h000gvrip1u538907"},{"post_id":"cl1ei8z9f0009vrip7sf09zf3","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9h000jvrip73licdgq"},{"post_id":"cl1ei8z9g000bvripbqio2tl3","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9i000nvripdhuqaw0n"},{"post_id":"cl1ei8z9h000fvripc9lyeg5k","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9i000pvrip6heu59tz"},{"post_id":"cl1ei8z9h000ivrip4gmf7lsv","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9i000svripdfn45okx"},{"post_id":"cl1ei8z9h000mvrip12cm8jx9","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9i000uvripeoqo0izx"},{"post_id":"cl1ei8z9l001jvrip7f7q8pfk","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9l001ovripb3om0dvq"},{"post_id":"cl1ei8z9l001kvripdzh15lga","category_id":"cl1ehucx70012svip4qn86tj2","_id":"cl1ei8z9m001qvrip9jpf4em5"},{"post_id":"cl1ei8z9l001mvrip09zi2o0w","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9m001uvripbcx80s4x"},{"post_id":"cl1ei8z9l001nvrip15omff7y","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9m001xvriphrxe3np3"},{"post_id":"cl1ei8z9m001pvrip5p70cdop","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9n0020vrip7c1m63qv"},{"post_id":"cl1ei8z9m001tvrip6kx3bm2w","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9n0023vripep8w23sk"},{"post_id":"cl1ei8z9m001wvrip6qzpe9yn","category_id":"cl1eh4sjn0031g7ip944m3hnk","_id":"cl1ei8z9n0027vripgfyycj01"},{"post_id":"cl1ei8z9m001zvripdrir0njl","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9n002avripahkdaeie"},{"post_id":"cl1ei8z9n0022vrip3c0k0713","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9o002evripfud0bv12"},{"post_id":"cl1ei8z9n0026vripfb5h9uld","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9o002fvrip62c788ab"},{"post_id":"cl1ei8z9n0029vrip26pd0ui6","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9o002gvripg17g4ook"},{"post_id":"cl1ei8z9o002dvrip6of6fjps","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9o002jvrip3x1c6z6t"},{"post_id":"cl1ei8z9q0030vripcw7z2va8","category_id":"cl1ehl1xp0009svip111hdlxw","_id":"cl1ei8z9r0035vrip16ywfr4a"},{"post_id":"cl1ei8z9q0031vripey1ddcif","category_id":"cl1ehtck7000xsvip80xy70r4","_id":"cl1ei8z9r0036vrip9z7s12tz"}],"PostTag":[{"post_id":"cl1ei8z9f0009vrip7sf09zf3","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9g000evrip9s9gbi9x"},{"post_id":"cl1ei8z9f0009vrip7sf09zf3","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9h000hvripgvzu1qds"},{"post_id":"cl1ei8z9a0000vrip5xpr45yg","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9h000lvripg5hc7a40"},{"post_id":"cl1ei8z9a0000vrip5xpr45yg","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9i000ovripdd17dfui"},{"post_id":"cl1ei8z9g000bvripbqio2tl3","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9i000rvrip1olv1tws"},{"post_id":"cl1ei8z9g000bvripbqio2tl3","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9i000tvrip8ypm0yha"},{"post_id":"cl1ei8z9h000mvrip12cm8jx9","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9i000vvriphs693ee8"},{"post_id":"cl1ei8z9h000mvrip12cm8jx9","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9i000xvrip09bu0ndw"},{"post_id":"cl1ei8z9c0001vrip9w8n2c5t","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9i000yvrip5aitf047"},{"post_id":"cl1ei8z9c0001vrip9w8n2c5t","tag_id":"cl1ei8z9h000kvrip5kio4cls","_id":"cl1ei8z9i0010vrip7ypc9vj8"},{"post_id":"cl1ei8z9c0001vrip9w8n2c5t","tag_id":"cl1ei8z9i000qvripc3a472zl","_id":"cl1ei8z9i0011vripheri0qzb"},{"post_id":"cl1ei8z9e0003vripfdt6g5hh","tag_id":"cl1ei8z9i000wvrip963s790f","_id":"cl1ei8z9i0013vrip66f3axq1"},{"post_id":"cl1ei8z9e0003vripfdt6g5hh","tag_id":"cl1ei8z9i000zvrip64ra2t0k","_id":"cl1ei8z9i0014vripff6xes0a"},{"post_id":"cl1ei8z9e0004vrip51ki5xw3","tag_id":"cl1ei8z9i0012vripgxw802ez","_id":"cl1ei8z9j0016vrip183z90h1"},{"post_id":"cl1ei8z9f0006vripck3i5vfi","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9j0018vrip68qfaibh"},{"post_id":"cl1ei8z9f0006vripck3i5vfi","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9j0019vrip99042sz9"},{"post_id":"cl1ei8z9h000fvripc9lyeg5k","tag_id":"cl1ei8z9j0017vriphtn1btga","_id":"cl1ei8z9j001dvripbm00eak2"},{"post_id":"cl1ei8z9h000fvripc9lyeg5k","tag_id":"cl1ei8z9j001avripdw45g5q9","_id":"cl1ei8z9j001evrip7wwfb5rx"},{"post_id":"cl1ei8z9h000fvripc9lyeg5k","tag_id":"cl1ei8z9j001bvripc97c9fpo","_id":"cl1ei8z9j001gvrip7x2k5sc6"},{"post_id":"cl1ei8z9h000ivrip4gmf7lsv","tag_id":"cl1ei8z9i000wvrip963s790f","_id":"cl1ei8z9j001hvripeltw11fc"},{"post_id":"cl1ei8z9h000ivrip4gmf7lsv","tag_id":"cl1ei8z9i000zvrip64ra2t0k","_id":"cl1ei8z9j001ivripbpmcdsap"},{"post_id":"cl1ei8z9l001nvrip15omff7y","tag_id":"cl1ei8z9l001lvrip8y406hf0","_id":"cl1ei8z9m001svripbjf68vp6"},{"post_id":"cl1ei8z9l001jvrip7f7q8pfk","tag_id":"cl1ei8z9l001lvrip8y406hf0","_id":"cl1ei8z9m001vvrip2xmpe1ex"},{"post_id":"cl1ei8z9l001kvripdzh15lga","tag_id":"cl1ei8z9i000qvripc3a472zl","_id":"cl1ei8z9n0021vrip2b5051pp"},{"post_id":"cl1ei8z9l001kvripdzh15lga","tag_id":"cl1ei8z9m001rvrip3hl92riq","_id":"cl1ei8z9n0024vrip1nedd0q9"},{"post_id":"cl1ei8z9m001wvrip6qzpe9yn","tag_id":"cl1ei8z9j0017vriphtn1btga","_id":"cl1ei8z9n0028vrip7uf786ni"},{"post_id":"cl1ei8z9l001mvrip09zi2o0w","tag_id":"cl1ei8z9m001yvripaanb89ut","_id":"cl1ei8z9n002bvriphunx0gm0"},{"post_id":"cl1ei8z9m001pvrip5p70cdop","tag_id":"cl1ei8z9n0025vrip0hol4xzi","_id":"cl1ei8z9o002ivripehdp4s0d"},{"post_id":"cl1ei8z9m001pvrip5p70cdop","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9o002kvrip9zj2fo5b"},{"post_id":"cl1ei8z9m001pvrip5p70cdop","tag_id":"cl1ei8z9o002cvripgs5m4u0m","_id":"cl1ei8z9o002mvripeqh73jj9"},{"post_id":"cl1ei8z9m001zvripdrir0njl","tag_id":"cl1ei8z9j0017vriphtn1btga","_id":"cl1ei8z9o002nvripbb0kd6hj"},{"post_id":"cl1ei8z9m001zvripdrir0njl","tag_id":"cl1ei8z9o002hvrip4dn9hl41","_id":"cl1ei8z9o002pvrip9mfq9gav"},{"post_id":"cl1ei8z9n0022vrip3c0k0713","tag_id":"cl1ei8z9o002lvriph8h92ksf","_id":"cl1ei8z9p002rvripe20563xq"},{"post_id":"cl1ei8z9n0022vrip3c0k0713","tag_id":"cl1ei8z9o002ovrip5ofh9eon","_id":"cl1ei8z9p002svripcd3vgzpd"},{"post_id":"cl1ei8z9n0026vripfb5h9uld","tag_id":"cl1ei8z9p002qvriphw48hzds","_id":"cl1ei8z9p002uvripgn457jxw"},{"post_id":"cl1ei8z9n0029vrip26pd0ui6","tag_id":"cl1ei8z9j001avripdw45g5q9","_id":"cl1ei8z9p002wvripbjkvh1q3"},{"post_id":"cl1ei8z9n0029vrip26pd0ui6","tag_id":"cl1ei8z9p002tvripfk209v71","_id":"cl1ei8z9p002xvripcux26nht"},{"post_id":"cl1ei8z9n0029vrip26pd0ui6","tag_id":"cl1ei8z9j001bvripc97c9fpo","_id":"cl1ei8z9p002yvripekvg3bls"},{"post_id":"cl1ei8z9o002dvrip6of6fjps","tag_id":"cl1ei8z9p002vvripb3niabm9","_id":"cl1ei8z9p002zvripf49h2wwe"},{"post_id":"cl1ei8z9q0030vripcw7z2va8","tag_id":"cl1ei8z9d0002vripdb3i2i16","_id":"cl1ei8z9r0032vripedz80yw3"},{"post_id":"cl1ei8z9q0030vripcw7z2va8","tag_id":"cl1ei8z9f0008vripaquhdcd9","_id":"cl1ei8z9r0034vrip81fwbu4m"},{"post_id":"cl1ei8z9q0031vripey1ddcif","tag_id":"cl1ei8z9i000qvripc3a472zl","_id":"cl1ei8z9r0037vrip4kwgc0sl"},{"post_id":"cl1ei8z9q0031vripey1ddcif","tag_id":"cl1ei8z9r0033vrip11ka21pd","_id":"cl1ei8z9r0038vrip8emy1gzc"}],"Tag":[{"name":"Java","_id":"cl1ei8z9d0002vripdb3i2i16"},{"name":"Spring","_id":"cl1ei8z9f0008vripaquhdcd9"},{"name":"Swing","_id":"cl1ei8z9h000kvrip5kio4cls"},{"name":"IM@S","_id":"cl1ei8z9i000qvripc3a472zl"},{"name":"C#","_id":"cl1ei8z9i000wvrip963s790f"},{"name":"generator","_id":"cl1ei8z9i000zvrip64ra2t0k"},{"name":"welcome","_id":"cl1ei8z9i0012vripgxw802ez"},{"name":"Python","_id":"cl1ei8z9j0017vriphtn1btga"},{"name":"Discord","_id":"cl1ei8z9j001avripdw45g5q9"},{"name":"Discord Bot","_id":"cl1ei8z9j001bvripc97c9fpo"},{"name":"Swift","_id":"cl1ei8z9l001lvrip8y406hf0"},{"name":"CinderellaGirls","_id":"cl1ei8z9m001rvrip3hl92riq"},{"name":"regex","_id":"cl1ei8z9m001yvripaanb89ut"},{"name":"macOS","_id":"cl1ei8z9n0025vrip0hol4xzi"},{"name":"JDK","_id":"cl1ei8z9o002cvripgs5m4u0m"},{"name":"design pattern","_id":"cl1ei8z9o002hvrip4dn9hl41"},{"name":"Git","_id":"cl1ei8z9o002lvriph8h92ksf"},{"name":"GPG","_id":"cl1ei8z9o002ovrip5ofh9eon"},{"name":"Apple","_id":"cl1ei8z9p002qvriphw48hzds"},{"name":"Discord API","_id":"cl1ei8z9p002tvripfk209v71"},{"name":"Android","_id":"cl1ei8z9p002vvripb3niabm9"},{"name":"MillionLive","_id":"cl1ei8z9r0033vrip11ka21pd"}]}}